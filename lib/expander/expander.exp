(ex:import-libraries-for-run (quote (((rnrs base) 0))) (quote (&build~1622177385~1633)) 0)
(define ex:make-variable-transformer #f)
(define ex:identifier? #f)
(define ex:bound-identifier=? #f)
(define ex:free-identifier=? #f)
(define ex:generate-temporaries #f)
(define ex:datum->syntax #f)
(define ex:syntax->datum #f)
(define ex:environment #f)
(define ex:environment-bindings #f)
(define ex:eval #f)
(define ex:load #f)
(define ex:syntax-violation #f)
(define ex:expand-file #f)
(define ex:repl #f)
(define ex:expand-r5rs-file #f)
(define ex:run-r6rs-sequence #f)
(define ex:run-r6rs-program #f)
(define ex:invalid-form #f)
(define ex:register-macro! #f)
(define ex:syntax-rename #f)
(define ex:map-while #f)
(define ex:dotted-length #f)
(define ex:dotted-butlast #f)
(define ex:dotted-last #f)
(define ex:uncompress #f)
(define ex:free=? #f)
((lambda (&*toplevel-env*~1622177385~2076) ((lambda (&*usage-env*~1622177385~2079) ((lambda (&*phase*~1622177385~2082) ((lambda (&*color*~1622177385~2085) ((lambda (&*macro-table*~1622177385~2088) ((lambda (&*env-table*~1622177385~2091) ((lambda (&*current-library*~1622177385~2094) ((lambda (&*used*~1622177385~2097) ((lambda (&*trace*~1622177385~2100) ((lambda (&*syntax-reflected*~1622177385~2103) ((lambda (&:identifier~1622177385~2106) ((lambda (&make-identifier~1622177385~2109) ((lambda (&make-library-language~1622177385~2258 &library-language-names~1622177385~2257 &source->syntax~1622177385~2256 &toplevel-template~1622177385~2255 &write-file~1622177385~2254 &read-file~1622177385~2253 &normalize~1622177385~2252 &expand-r5rs-file~1622177385~2251 &expand-file~1622177385~2250 &r6rs-load~1622177385~2249 &expand-toplevel-sequence~1622177385~2248 &with-toplevel-parameters~1622177385~2247 &run-r6rs-program~1622177385~2246 &run-r6rs-sequence~1622177385~2245 &repl~1622177385~2244 &invalid-form~1622177385~2243 &check~1622177385~2242 &compose~1622177385~2241 &list->string~1622177385~2240 &drop-tail~1622177385~2239 &unionv~1622177385~2238 &check-set?~1622177385~2237 &map-while~1622177385~2236 &dotted-last~1622177385~2235 &dotted-butlast~1622177385~2234 &dotted-length~1622177385~2233 &dotted-map~1622177385~2232 &dotted-memp~1622177385~2231 &sexp-map~1622177385~2230 &flatten~1622177385~2229 &format-mapping~1622177385~2228 &environment-bindings~1622177385~2227 &r6rs-eval~1622177385~2226 &environment~1622177385~2225 &r6rs-environment-env~1622177385~2224 &r6rs-environment-imported-libraries~1622177385~2223 &make-r6rs-environment~1622177385~2222 &eval-template~1622177385~2221 &syntax-debug~1622177385~2220 &syntax-violation~1622177385~2219 &subversion-condition?~1622177385~2218 &subversion-reference?~1622177385~2217 &version-reference?~1622177385~2216 &subversion?~1622177385~2215 &version?~1622177385~2214 &library-ref-helper~1622177385~2213 &library-ref~1622177385~2212 &scan-library-name~1622177385~2211 &unify-imports~1622177385~2210 &compose-levels~1622177385~2209 &scan-levels~1622177385~2208 &scan-import-spec~1622177385~2207 &scan-imports~1622177385~2206 &scan-export-set~1622177385~2205 &scan-exports~1622177385~2204 &import-libraries-for-expand~1622177385~2203 &current-builds~1622177385~2202 &env-import!~1622177385~2201 &expand-library-or-program~1622177385~2200 &expand-library~1622177385~2199 &expand-program~1622177385~2198 &check-used~1622177385~2197 &merge-used-with-parent-frame!~1622177385~2196 &register-use!~1622177385~2195 &add-fresh-used-frame!~1622177385~2194 &segment-tail~1622177385~2193 &segment-head~1622177385~2192 &segment-depth~1622177385~2191 &free-meta-variables~1622177385~2190 &process-template~1622177385~2189 &expand-syntax~1622177385~2188 &process-clauses~1622177385~2187 &expand-syntax-case~1622177385~2186 &check-expression-body~1622177385~2185 &check-valid-definition~1622177385~2184 &check-toplevel~1622177385~2183 &check-expression-sequence~1622177385~2182 &parse-local-syntax~1622177385~2181 &parse-definition~1622177385~2180 &emit-body~1622177385~2179 &scan-sequence~1622177385~2178 &wrap-exp~1622177385~2177 &wrap-env~1622177385~2176 &make-wrap~1622177385~2175 &formals?~1622177385~2174 &expand-lambda~1622177385~2173 &expand-or~1622177385~2172 &expand-and~1622177385~2171 &expand-local-syntax~1622177385~2170 &expand-begin~1622177385~2169 &expand-set!~1622177385~2168 &expand-if~1622177385~2167 &expand-quote~1622177385~2166 &check-implicit-import-of-mutable~1622177385~2165 &operator-binding~1622177385~2164 &head-expand~1622177385~2163 &expand~1622177385~2162 &invoke-macro~1622177385~2161 &register-macro!~1622177385~2160 &binding->macro~1622177385~2159 &make-user-macro~1622177385~2158 &make-variable-transformer~1622177385~2157 &make-transformer~1622177385~2156 &make-expander~1622177385~2155 &macro-proc~1622177385~2154 &macro-type~1622177385~2153 &make-macro~1622177385~2152 &rename~1622177385~2151 &generate-temporaries~1622177385~2150 &syntax->datum~1622177385~2149 &datum->syntax~1622177385~2148 &syntax-rename~1622177385~2147 &syntax-reflect~1622177385~2146 &uncompress~1622177385~2145 &compress~1622177385~2144 &env-reify~1622177385~2143 &env-reflect~1622177385~2142 &duplicate?~1622177385~2141 &env-lookup~1622177385~2140 &env-extend!~1622177385~2139 &env-extend~1622177385~2138 &make-unit-env~1622177385~2137 &make-null-env~1622177385~2136 &check-binding-level~1622177385~2135 &source-level~1622177385~2134 &make-toplevel-mapping~1622177385~2133 &make-local-mapping~1622177385~2132 &binding~1622177385~2131 &binding-mutable-set!~1622177385~2130 &binding-library~1622177385~2129 &binding-dimension~1622177385~2128 &binding-mutable?~1622177385~2127 &binding-levels~1622177385~2126 &binding-name~1622177385~2125 &binding-type~1622177385~2124 &make-binding~1622177385~2123 &generate-color~1622177385~2122 &make-free-name~1622177385~2121 &generate-guid~1622177385~2120 &free=?~1622177385~2119 &free-identifier=?~1622177385~2118 &bound-identifier=?~1622177385~2117 &id-library~1622177385~2116 &id-maybe-library~1622177385~2115 &id-displacement~1622177385~2114 &id-transformer-envs~1622177385~2113 &id-colors~1622177385~2112 &id-name~1622177385~2111 &identifier?~1622177385~2110) (set! &identifier?~1622177385~2110 (record-predicate &:identifier~1622177385~2106)) (set! &id-name~1622177385~2111 (record-accessor &:identifier~1622177385~2106 0)) (set! &id-colors~1622177385~2112 (record-accessor &:identifier~1622177385~2106 1)) (set! &id-transformer-envs~1622177385~2113 (record-accessor &:identifier~1622177385~2106 2)) (set! &id-displacement~1622177385~2114 (record-accessor &:identifier~1622177385~2106 3)) (set! &id-maybe-library~1622177385~2115 (record-accessor &:identifier~1622177385~2106 4)) (set! &id-library~1622177385~2116 (lambda (&id~1622177385~9679) (let ((x (&id-maybe-library~1622177385~2115 &id~1622177385~9679))) (if x x &*current-library*~1622177385~2094)))) (set! &bound-identifier=?~1622177385~2117 (lambda (&x~1622177385~9672 &y~1622177385~9673) (&check~1622177385~2242 &x~1622177385~9672 &identifier?~1622177385~2110 (quote bound-identifier=?)) (&check~1622177385~2242 &y~1622177385~9673 &identifier?~1622177385~2110 (quote bound-identifier=?)) (if (eq? (&id-name~1622177385~2111 &x~1622177385~9672) (&id-name~1622177385~2111 &y~1622177385~9673)) (equal? (&id-colors~1622177385~2112 &x~1622177385~9672) (&id-colors~1622177385~2112 &y~1622177385~9673)) #f))) (set! &free-identifier=?~1622177385~2118 (lambda (&x~1622177385~9648 &y~1622177385~9649) (&check~1622177385~2242 &x~1622177385~9648 &identifier?~1622177385~2110 (quote free-identifier=?)) (&check~1622177385~2242 &y~1622177385~9649 &identifier?~1622177385~2110 (quote free-identifier=?)) ((lambda (&bx~1622177385~9652 &by~1622177385~9653) ((lambda (&result~1622177385~9656) (if &result~1622177385~9656 (if &bx~1622177385~9652 (begin (&check-binding-level~1622177385~2135 &x~1622177385~9648 &bx~1622177385~9652) (&check-binding-level~1622177385~2135 &y~1622177385~9649 &by~1622177385~9653)) #f) #f) (if &result~1622177385~9656 (if (&register-use!~1622177385~2195 &x~1622177385~9648 &bx~1622177385~9652) (&register-use!~1622177385~2195 &y~1622177385~9649 &by~1622177385~9653) #f) #f) &result~1622177385~9656) (if &bx~1622177385~9652 (if &by~1622177385~9653 (eq? (&binding-name~1622177385~2125 &bx~1622177385~9652) (&binding-name~1622177385~2125 &by~1622177385~9653)) #f) (if (not &by~1622177385~9653) (eq? (&id-name~1622177385~2111 &x~1622177385~9648) (&id-name~1622177385~2111 &y~1622177385~9649)) #f)))) (&binding~1622177385~2131 &x~1622177385~9648) (&binding~1622177385~2131 &y~1622177385~9649)))) (set! &free=?~1622177385~2119 (lambda (&x~1622177385~9630 &symbol~1622177385~9631) (if (&identifier?~1622177385~2110 &x~1622177385~9630) ((lambda (&bx~1622177385~9636) ((lambda (&result~1622177385~9639) (if &result~1622177385~9639 (if &bx~1622177385~9636 (&check-binding-level~1622177385~2135 &x~1622177385~9630 &bx~1622177385~9636) #f) #f) (if &result~1622177385~9639 (&register-use!~1622177385~2195 &x~1622177385~9630 &bx~1622177385~9636) #f) &result~1622177385~9639) (if &bx~1622177385~9636 (eq? (&binding-name~1622177385~2125 &bx~1622177385~9636) &symbol~1622177385~9631) #f))) (&binding~1622177385~2131 &x~1622177385~9630)) #f))) (set! &generate-guid~1622177385~2120 ((lambda (&token~1622177385~9624 &ticks~1622177385~9625) (lambda (&symbol~1622177385~9627) (set! &ticks~1622177385~9625 (+ &ticks~1622177385~9625 1)) (string->symbol (string-append ex:guid-prefix (symbol->string &symbol~1622177385~9627) "~" &token~1622177385~9624 "~" (number->string &ticks~1622177385~9625))))) (ex:unique-token) 0)) (set! &make-free-name~1622177385~2121 (lambda (&symbol~1622177385~9621) (string->symbol (string-append ex:free-prefix (symbol->string &symbol~1622177385~9621))))) (set! &generate-color~1622177385~2122 (lambda () (&generate-guid~1622177385~2120 (quote c)))) (set! &make-binding~1622177385~2123 (lambda (&type~1622177385~9613 &name~1622177385~9614 &levels~1622177385~9615 &content~1622177385~9616 &library~1622177385~9617) (list &type~1622177385~9613 &name~1622177385~9614 &levels~1622177385~9615 &content~1622177385~9616 &library~1622177385~9617))) (set! &binding-type~1622177385~2124 (lambda (&b~1622177385~9611) (car &b~1622177385~9611))) (set! &binding-name~1622177385~2125 (lambda (&b~1622177385~9609) (cadr &b~1622177385~9609))) (set! &binding-levels~1622177385~2126 (lambda (&b~1622177385~9607) (caddr &b~1622177385~9607))) (set! &binding-mutable?~1622177385~2127 (lambda (&b~1622177385~9605) (cadddr &b~1622177385~9605))) (set! &binding-dimension~1622177385~2128 (lambda (&b~1622177385~9603) (cadddr &b~1622177385~9603))) (set! &binding-library~1622177385~2129 (lambda (&b~1622177385~9601) (car (cddddr &b~1622177385~9601)))) (set! &binding-mutable-set!~1622177385~2130 (lambda (&b~1622177385~9598 &x~1622177385~9599) (set-car! (cdddr &b~1622177385~9598) &x~1622177385~9599))) (set! &binding~1622177385~2131 (lambda (&id~1622177385~9573) ((lambda (&name~1622177385~9576) (((lambda (&loop~1622177385~9582) ((lambda (&temp~1622177385~9585) (set! &loop~1622177385~9582 &temp~1622177385~9585) ((lambda () &loop~1622177385~9582))) (lambda (&env~1622177385~9590 &envs~1622177385~9591 &colors~1622177385~9592) (let ((x (&env-lookup~1622177385~2140 (cons &name~1622177385~9576 &colors~1622177385~9592) &env~1622177385~9590))) (if x x (if (pair? &envs~1622177385~9591) (&loop~1622177385~9582 (&env-reify~1622177385~2143 (car &envs~1622177385~9591)) (cdr &envs~1622177385~9591) (cdr &colors~1622177385~9592)) #f)))))) ex:undefined) &*usage-env*~1622177385~2079 (&id-transformer-envs~1622177385~2113 &id~1622177385~9573) (&id-colors~1622177385~2112 &id~1622177385~9573))) (&id-name~1622177385~2111 &id~1622177385~9573)))) (set! &make-local-mapping~1622177385~2132 (lambda (&type~1622177385~9569 &id~1622177385~9570 &content~1622177385~9571) (cons (cons (&id-name~1622177385~2111 &id~1622177385~9570) (&id-colors~1622177385~2112 &id~1622177385~9570)) (&make-binding~1622177385~2123 &type~1622177385~9569 (&generate-guid~1622177385~2120 (&id-name~1622177385~2111 &id~1622177385~9570)) (list (&source-level~1622177385~2134 &id~1622177385~9570)) &content~1622177385~9571 &*current-library*~1622177385~2094)))) (set! &make-toplevel-mapping~1622177385~2133 (lambda (&type~1622177385~9563 &id~1622177385~9564 &content~1622177385~9565) (if (null? (&id-colors~1622177385~2112 &id~1622177385~9564)) (cons (cons (&id-name~1622177385~2111 &id~1622177385~9564) (&id-colors~1622177385~2112 &id~1622177385~9564)) (&make-binding~1622177385~2123 &type~1622177385~9563 (&make-free-name~1622177385~2121 (&id-name~1622177385~2111 &id~1622177385~9564)) (quote (0)) &content~1622177385~9565 &*current-library*~1622177385~2094)) (&make-local-mapping~1622177385~2132 &type~1622177385~9563 &id~1622177385~9564 &content~1622177385~9565)))) (set! &source-level~1622177385~2134 (lambda (&id~1622177385~9561) (- &*phase*~1622177385~2082 (&id-displacement~1622177385~2114 &id~1622177385~9561)))) (set! &check-binding-level~1622177385~2135 (lambda (&id~1622177385~9551 &binding~1622177385~9552) (if &binding~1622177385~9552 (let ((x (memv (&source-level~1622177385~2134 &id~1622177385~9551) (&binding-levels~1622177385~2126 &binding~1622177385~9552)))) (if x x (&syntax-violation~1622177385~2219 "invalid reference" (string-append "Attempt to use binding of " (symbol->string (&id-name~1622177385~2111 &id~1622177385~9551)) " in library (" (&list->string~1622177385~2240 (&id-library~1622177385~2116 &id~1622177385~9551) " ") ") at invalid level " (number->string (&source-level~1622177385~2134 &id~1622177385~9551)) ".  Binding is only available at levels: " (&list->string~1622177385~2240 (&binding-levels~1622177385~2126 &binding~1622177385~9552) " ")) &id~1622177385~9551))) (let ((x (if (null? (&id-library~1622177385~2116 &id~1622177385~9551)) (= &*phase*~1622177385~2082 0) #f))) (if x x (&syntax-violation~1622177385~2219 "invalid reference" (string-append "No binding available for " (symbol->string (&id-name~1622177385~2111 &id~1622177385~9551)) " in library (" (&list->string~1622177385~2240 (&id-library~1622177385~2116 &id~1622177385~9551) " ") ")") &id~1622177385~9551)))))) (set! &make-null-env~1622177385~2136 (lambda () (quote ()))) (set! &make-unit-env~1622177385~2137 (lambda () (&env-extend~1622177385~2138 (quote ()) (&make-null-env~1622177385~2136)))) (set! &env-extend~1622177385~2138 (lambda (&mappings~1622177385~9544 &env~1622177385~9545) (cons (list &mappings~1622177385~9544) &env~1622177385~9545))) (set! &env-extend!~1622177385~2139 (lambda (&mappings~1622177385~9538 &env~1622177385~9539) ((lambda (&frame~1622177385~9542) (set-car! &frame~1622177385~9542 (append &mappings~1622177385~9538 (car &frame~1622177385~9542)))) (car &env~1622177385~9539)))) (set! &env-lookup~1622177385~2140 (lambda (&key~1622177385~9524 &env~1622177385~9525) (if (pair? &env~1622177385~9525) (let ((x ((lambda (&probe~1622177385~9531) (if &probe~1622177385~9531 (let ((x (cdr &probe~1622177385~9531))) (if x x (&syntax-violation~1622177385~2219 #f "Out of context reference to identifier" (car &key~1622177385~9524)))) #f)) (assoc &key~1622177385~9524 (caar &env~1622177385~9525))))) (if x x (&env-lookup~1622177385~2140 &key~1622177385~9524 (cdr &env~1622177385~9525)))) #f))) (set! &duplicate?~1622177385~2141 (lambda (&id~1622177385~9521 &env~1622177385~9522) (assoc (cons (&id-name~1622177385~2111 &id~1622177385~9521) (&id-colors~1622177385~2112 &id~1622177385~9521)) (caar &env~1622177385~9522)))) (set! &env-reflect~1622177385~2142 (lambda (&env~1622177385~9508) (if (if (not (null? &*env-table*~1622177385~2091)) (eq? &env~1622177385~9508 (cdar &*env-table*~1622177385~2091)) #f) (begin (caar &*env-table*~1622177385~2091)) (begin ((lambda (&key~1622177385~9517) (set! &*env-table*~1622177385~2091 (cons (cons &key~1622177385~9517 &env~1622177385~9508) &*env-table*~1622177385~2091)) &key~1622177385~9517) (&generate-guid~1622177385~2120 (quote env))))))) (set! &env-reify~1622177385~2143 (lambda (&key-or-env~1622177385~9505) (if (symbol? &key-or-env~1622177385~9505) (cdr (assq &key-or-env~1622177385~9505 &*env-table*~1622177385~2091)) &key-or-env~1622177385~9505))) (set! &compress~1622177385~2144 (lambda (&env-table~1622177385~9471) ((lambda (&frame-table~1622177385~9474 &count~1622177385~9475) (for-each (lambda (&entry~1622177385~9496) (for-each (lambda (&frame~1622177385~9498) (if (not (assq &frame~1622177385~9498 &frame-table~1622177385~9474)) (begin (set! &frame-table~1622177385~9474 (cons (cons &frame~1622177385~9498 &count~1622177385~9475) &frame-table~1622177385~9474)) (set! &count~1622177385~9475 (+ 1 &count~1622177385~9475))))) (cdr &entry~1622177385~9496))) &env-table~1622177385~9471) (cons (map (lambda (&env-entry~1622177385~9477) (cons (car &env-entry~1622177385~9477) (map (lambda (&frame~1622177385~9479) (cdr (assq &frame~1622177385~9479 &frame-table~1622177385~9474))) (cdr &env-entry~1622177385~9477)))) &env-table~1622177385~9471) (map (lambda (&frame-entry~1622177385~9481) (cons (cdr &frame-entry~1622177385~9481) (list (map (lambda (&mapping~1622177385~9483) (cons (car &mapping~1622177385~9483) ((lambda (&binding~1622177385~9486) ((lambda (&t~1622177385~9490) (if (memv &t~1622177385~9490 (quote (pattern-variable))) (begin #f) (begin &binding~1622177385~9486))) (&binding-type~1622177385~2124 &binding~1622177385~9486))) (cdr &mapping~1622177385~9483)))) (caar &frame-entry~1622177385~9481))))) &frame-table~1622177385~9474))) (quote ()) 0))) (set! &uncompress~1622177385~2145 (lambda (&compressed-env-table~1622177385~9465) (map (lambda (&env-entry~1622177385~9467) (cons (car &env-entry~1622177385~9467) (map (lambda (&frame-abbrev~1622177385~9469) (cdr (assv &frame-abbrev~1622177385~9469 (cdr &compressed-env-table~1622177385~9465)))) (cdr &env-entry~1622177385~9467)))) (car &compressed-env-table~1622177385~9465)))) (set! &syntax-reflect~1622177385~2146 (lambda (&id~1622177385~9456) (set! &*syntax-reflected*~1622177385~2103 #t) (list (quote ex:syntax-rename) (list (quote quote) (&id-name~1622177385~2111 &id~1622177385~9456)) (list (quote quote) (&id-colors~1622177385~2112 &id~1622177385~9456)) (list (quote quote) (cons (&env-reflect~1622177385~2142 &*usage-env*~1622177385~2079) (&id-transformer-envs~1622177385~2113 &id~1622177385~9456))) (- (- &*phase*~1622177385~2082 (&id-displacement~1622177385~2114 &id~1622177385~9456)) 1) (list (quote quote) (&id-library~1622177385~2116 &id~1622177385~9456))))) (set! &syntax-rename~1622177385~2147 (lambda (&name~1622177385~9450 &colors~1622177385~9451 &transformer-envs~1622177385~9452 &transformer-phase~1622177385~9453 &source-library~1622177385~9454) (&make-identifier~1622177385~2109 &name~1622177385~9450 (cons &*color*~1622177385~2085 &colors~1622177385~9451) &transformer-envs~1622177385~9452 (- &*phase*~1622177385~2082 &transformer-phase~1622177385~9453) &source-library~1622177385~9454))) (set! &datum->syntax~1622177385~2148 (lambda (&tid~1622177385~9440 &datum~1622177385~9441) (&check~1622177385~2242 &tid~1622177385~9440 &identifier?~1622177385~2110 (quote datum->syntax)) (&sexp-map~1622177385~2230 (lambda (&leaf~1622177385~9443) (if (symbol? &leaf~1622177385~9443) (begin (&make-identifier~1622177385~2109 &leaf~1622177385~9443 (&id-colors~1622177385~2112 &tid~1622177385~9440) (&id-transformer-envs~1622177385~2113 &tid~1622177385~9440) (&id-displacement~1622177385~2114 &tid~1622177385~9440) (&id-maybe-library~1622177385~2115 &tid~1622177385~9440))) (begin &leaf~1622177385~9443))) &datum~1622177385~9441))) (set! &syntax->datum~1622177385~2149 (lambda (&exp~1622177385~9429) (&sexp-map~1622177385~2230 (lambda (&leaf~1622177385~9431) (if (&identifier?~1622177385~2110 &leaf~1622177385~9431) (begin (&id-name~1622177385~2111 &leaf~1622177385~9431)) (if (symbol? &leaf~1622177385~9431) (begin (assertion-violation (quote syntax->datum) "A symbol is not a valid syntax object" &leaf~1622177385~9431)) (begin &leaf~1622177385~9431)))) &exp~1622177385~9429))) (set! &generate-temporaries~1622177385~2150 (lambda (&ls~1622177385~9423) (&check~1622177385~2242 &ls~1622177385~9423 list? (quote generate-temporaries)) (map (lambda (&ignore~1622177385~9425) (&make-identifier~1622177385~2109 (quote temp) (list (&generate-color~1622177385~2122)) (list (&make-null-env~1622177385~2136)) &*phase*~1622177385~2082 #f)) &ls~1622177385~9423))) (set! &rename~1622177385~2151 (lambda (&type~1622177385~9417 &symbol~1622177385~9418) (&make-identifier~1622177385~2109 &symbol~1622177385~9418 (list &*color*~1622177385~2085) (list (&env-extend~1622177385~2138 (list (cons (cons &symbol~1622177385~9418 (quote ())) (&make-binding~1622177385~2123 &type~1622177385~9417 &symbol~1622177385~9418 (quote (0)) #f (quote ())))) (&make-null-env~1622177385~2136))) &*phase*~1622177385~2082 #f))) (set! &make-macro~1622177385~2152 (lambda (&type~1622177385~9414 &proc~1622177385~9415) (list &type~1622177385~9414 &proc~1622177385~9415))) (set! &macro-type~1622177385~2153 car) (set! &macro-proc~1622177385~2154 cadr) (set! &make-expander~1622177385~2155 (lambda (&proc~1622177385~9411) (&make-macro~1622177385~2152 (quote expander) &proc~1622177385~9411))) (set! &make-transformer~1622177385~2156 (lambda (&proc~1622177385~9408) (&make-macro~1622177385~2152 (quote transformer) &proc~1622177385~9408))) (set! &make-variable-transformer~1622177385~2157 (lambda (&proc~1622177385~9405) (&make-macro~1622177385~2152 (quote variable-transformer) &proc~1622177385~9405))) (set! &make-user-macro~1622177385~2158 (lambda (&procedure-or-macro~1622177385~9402) (if (procedure? &procedure-or-macro~1622177385~9402) (&make-transformer~1622177385~2156 &procedure-or-macro~1622177385~9402) &procedure-or-macro~1622177385~9402))) (set! &binding->macro~1622177385~2159 (lambda (&binding~1622177385~9393 &t~1622177385~9394) ((lambda (&t~1622177385~9398) (if &t~1622177385~9398 (cdr &t~1622177385~9398) (begin (&syntax-violation~1622177385~2219 #f "Reference to macro keyword out of context" &t~1622177385~9394)))) (assq (&binding-name~1622177385~2125 &binding~1622177385~9393) &*macro-table*~1622177385~2088)))) (set! &register-macro!~1622177385~2160 (lambda (&binding-name~1622177385~9389 &procedure-or-macro~1622177385~9390) (set! &*macro-table*~1622177385~2088 (cons (cons &binding-name~1622177385~9389 (&make-user-macro~1622177385~2158 &procedure-or-macro~1622177385~9390)) &*macro-table*~1622177385~2088)))) (set! &invoke-macro~1622177385~2161 (lambda (&macro~1622177385~9385 &t~1622177385~9386) (set! &*color*~1622177385~2085 (&generate-color~1622177385~2122)) ((&macro-proc~1622177385~2154 &macro~1622177385~9385) &t~1622177385~9386))) (set! &expand~1622177385~2162 (lambda (&t~1622177385~9328) ((lambda (&saved~1622177385~9332) (set! &*trace*~1622177385~2100 (cons &t~1622177385~9328 &*trace*~1622177385~2100)) (call-with-values (lambda () ((lambda (&binding~1622177385~9337) (if &binding~1622177385~9337 (begin ((lambda (&t~1622177385~9344) (if (memv &t~1622177385~9344 (quote (macro))) (begin ((lambda (&macro~1622177385~9350) ((lambda (&expanded-once~1622177385~9353) ((lambda (&t~1622177385~9357) (if (memv &t~1622177385~9357 (quote (expander))) (begin &expanded-once~1622177385~9353) (begin (&expand~1622177385~2162 &expanded-once~1622177385~9353)))) (&macro-type~1622177385~2153 &macro~1622177385~9350))) (&invoke-macro~1622177385~2161 &macro~1622177385~9350 &t~1622177385~9328))) (&binding->macro~1622177385~2159 &binding~1622177385~9337 &t~1622177385~9328))) (if (memv &t~1622177385~9344 (quote (variable))) (begin (&check-implicit-import-of-mutable~1622177385~2165 &binding~1622177385~9337 &t~1622177385~9328) (if (list? &t~1622177385~9328) (cons (&binding-name~1622177385~2125 &binding~1622177385~9337) (map &expand~1622177385~2162 (cdr &t~1622177385~9328))) (&binding-name~1622177385~2125 &binding~1622177385~9337))) (if (memv &t~1622177385~9344 (quote (pattern-variable))) (begin (&syntax-violation~1622177385~2219 #f "Pattern variable used outside syntax template" &t~1622177385~9328)))))) (&binding-type~1622177385~2124 &binding~1622177385~9337))) (if (list? &t~1622177385~9328) (begin (map &expand~1622177385~2162 &t~1622177385~9328)) (if (&identifier?~1622177385~2110 &t~1622177385~9328) (begin (&make-free-name~1622177385~2121 (&id-name~1622177385~2111 &t~1622177385~9328))) (if (pair? &t~1622177385~9328) (begin (&syntax-violation~1622177385~2219 #f "Invalid procedure call syntax" &t~1622177385~9328)) (if (symbol? &t~1622177385~9328) (begin (&syntax-violation~1622177385~2219 #f "Symbol may not appear in syntax object" &t~1622177385~9328)) (if (vector? &t~1622177385~9328) (begin (&syntax->datum~1622177385~2149 &t~1622177385~9328)) (begin &t~1622177385~9328)))))))) (&operator-binding~1622177385~2164 &t~1622177385~9328))) (lambda &results~1622177385~9381 (set! &*trace*~1622177385~2100 &saved~1622177385~9332) (apply values &results~1622177385~9381)))) &*trace*~1622177385~2100))) (set! &head-expand~1622177385~2163 (lambda (&t~1622177385~9290) ((lambda (&saved~1622177385~9294) (set! &*trace*~1622177385~2100 (cons &t~1622177385~9290 &*trace*~1622177385~2100)) (call-with-values (lambda () ((lambda (&binding~1622177385~9299) (if &binding~1622177385~9299 (begin ((lambda (&t~1622177385~9306) (if (memv &t~1622177385~9306 (quote (macro))) (begin ((lambda (&macro~1622177385~9312) ((lambda (&t~1622177385~9316) (if (memv &t~1622177385~9316 (quote (expander))) (begin (values &t~1622177385~9290 &binding~1622177385~9299)) (begin (&head-expand~1622177385~2163 (&invoke-macro~1622177385~2161 &macro~1622177385~9312 &t~1622177385~9290))))) (&macro-type~1622177385~2153 &macro~1622177385~9312))) (&binding->macro~1622177385~2159 &binding~1622177385~9299 &t~1622177385~9290))) (begin (values &t~1622177385~9290 &binding~1622177385~9299)))) (&binding-type~1622177385~2124 &binding~1622177385~9299))) (begin (values &t~1622177385~9290 &binding~1622177385~9299)))) (&operator-binding~1622177385~2164 &t~1622177385~9290))) (lambda &results~1622177385~9324 (set! &*trace*~1622177385~2100 &saved~1622177385~9294) (apply values &results~1622177385~9324)))) &*trace*~1622177385~2100))) (set! &operator-binding~1622177385~2164 (lambda (&t~1622177385~9279) ((lambda (&operator~1622177385~9282) (if (&identifier?~1622177385~2110 &operator~1622177385~9282) ((lambda (&binding~1622177385~9287) (&check-binding-level~1622177385~2135 &operator~1622177385~9282 &binding~1622177385~9287) (&register-use!~1622177385~2195 &operator~1622177385~9282 &binding~1622177385~9287) &binding~1622177385~9287) (&binding~1622177385~2131 &operator~1622177385~9282)) #f)) (if (pair? &t~1622177385~9279) (car &t~1622177385~9279) &t~1622177385~9279)))) (set! &check-implicit-import-of-mutable~1622177385~2165 (lambda (&binding~1622177385~9273 &t~1622177385~9274) (let ((x (equal? (&binding-library~1622177385~2129 &binding~1622177385~9273) &*current-library*~1622177385~2094))) (if x x (let ((x (not (&binding-mutable?~1622177385~2127 &binding~1622177385~9273)))) (if x x (&syntax-violation~1622177385~2219 #f (string-append "Attempt to implicitly import variable that is mutable in library (" (&list->string~1622177385~2240 (&binding-library~1622177385~2129 &binding~1622177385~9273) " ") ")") &t~1622177385~9274))))))) (set! &expand-quote~1622177385~2166 (lambda (&exp~1622177385~9227) ((lambda (&x~1622177385~9240 &sk~1622177385~9241 &fk~1622177385~9242) (if (pair? &x~1622177385~9240) ((lambda (&x~1622177385~9245 &sk~1622177385~9246 &fk~1622177385~9247) (&sk~1622177385~9246)) (car &x~1622177385~9240) (lambda () ((lambda (&x~1622177385~9250 &sk~1622177385~9251 &fk~1622177385~9252) (if (pair? &x~1622177385~9250) ((lambda (&x~1622177385~9255 &sk~1622177385~9256 &fk~1622177385~9257) (&sk~1622177385~9256 &x~1622177385~9255)) (car &x~1622177385~9250) (lambda (&datum~1622177385~9259) ((lambda (&x~1622177385~9261 &sk~1622177385~9262 &fk~1622177385~9263) (if (null? &x~1622177385~9261) (&sk~1622177385~9262) (&fk~1622177385~9263))) (cdr &x~1622177385~9250) (lambda () (&sk~1622177385~9251 &datum~1622177385~9259)) &fk~1622177385~9252)) &fk~1622177385~9252) (&fk~1622177385~9252))) (cdr &x~1622177385~9240) (lambda (&datum~1622177385~9267) (&sk~1622177385~9241 &datum~1622177385~9267)) &fk~1622177385~9242)) &fk~1622177385~9242) (&fk~1622177385~9242))) &exp~1622177385~9227 (lambda (&datum~1622177385~9269) (&syntax->datum~1622177385~2149 &exp~1622177385~9227)) (lambda () (ex:invalid-form &exp~1622177385~9227))))) (set! &expand-if~1622177385~2167 (lambda (&exp~1622177385~9076) ((lambda (&x~1622177385~9097 &sk~1622177385~9098 &fk~1622177385~9099) (if (pair? &x~1622177385~9097) ((lambda (&x~1622177385~9102 &sk~1622177385~9103 &fk~1622177385~9104) (&sk~1622177385~9103)) (car &x~1622177385~9097) (lambda () ((lambda (&x~1622177385~9107 &sk~1622177385~9108 &fk~1622177385~9109) (if (pair? &x~1622177385~9107) ((lambda (&x~1622177385~9112 &sk~1622177385~9113 &fk~1622177385~9114) (&sk~1622177385~9113 &x~1622177385~9112)) (car &x~1622177385~9107) (lambda (&e1~1622177385~9116) ((lambda (&x~1622177385~9118 &sk~1622177385~9119 &fk~1622177385~9120) (if (pair? &x~1622177385~9118) ((lambda (&x~1622177385~9123 &sk~1622177385~9124 &fk~1622177385~9125) (&sk~1622177385~9124 &x~1622177385~9123)) (car &x~1622177385~9118) (lambda (&e2~1622177385~9127) ((lambda (&x~1622177385~9129 &sk~1622177385~9130 &fk~1622177385~9131) (if (pair? &x~1622177385~9129) ((lambda (&x~1622177385~9134 &sk~1622177385~9135 &fk~1622177385~9136) (&sk~1622177385~9135 &x~1622177385~9134)) (car &x~1622177385~9129) (lambda (&e3~1622177385~9138) ((lambda (&x~1622177385~9140 &sk~1622177385~9141 &fk~1622177385~9142) (if (null? &x~1622177385~9140) (&sk~1622177385~9141) (&fk~1622177385~9142))) (cdr &x~1622177385~9129) (lambda () (&sk~1622177385~9130 &e3~1622177385~9138)) &fk~1622177385~9131)) &fk~1622177385~9131) (&fk~1622177385~9131))) (cdr &x~1622177385~9118) (lambda (&e3~1622177385~9146) (&sk~1622177385~9119 &e2~1622177385~9127 &e3~1622177385~9146)) &fk~1622177385~9120)) &fk~1622177385~9120) (&fk~1622177385~9120))) (cdr &x~1622177385~9107) (lambda (&e2~1622177385~9148 &e3~1622177385~9149) (&sk~1622177385~9108 &e1~1622177385~9116 &e2~1622177385~9148 &e3~1622177385~9149)) &fk~1622177385~9109)) &fk~1622177385~9109) (&fk~1622177385~9109))) (cdr &x~1622177385~9097) (lambda (&e1~1622177385~9151 &e2~1622177385~9152 &e3~1622177385~9153) (&sk~1622177385~9098 &e1~1622177385~9151 &e2~1622177385~9152 &e3~1622177385~9153)) &fk~1622177385~9099)) &fk~1622177385~9099) (&fk~1622177385~9099))) &exp~1622177385~9076 (lambda (&e1~1622177385~9155 &e2~1622177385~9156 &e3~1622177385~9157) (list (quote if) (&expand~1622177385~2162 &e1~1622177385~9155) (&expand~1622177385~2162 &e2~1622177385~9156) (&expand~1622177385~2162 &e3~1622177385~9157))) (lambda () ((lambda (&x~1622177385~9177 &sk~1622177385~9178 &fk~1622177385~9179) (if (pair? &x~1622177385~9177) ((lambda (&x~1622177385~9182 &sk~1622177385~9183 &fk~1622177385~9184) (&sk~1622177385~9183)) (car &x~1622177385~9177) (lambda () ((lambda (&x~1622177385~9187 &sk~1622177385~9188 &fk~1622177385~9189) (if (pair? &x~1622177385~9187) ((lambda (&x~1622177385~9192 &sk~1622177385~9193 &fk~1622177385~9194) (&sk~1622177385~9193 &x~1622177385~9192)) (car &x~1622177385~9187) (lambda (&e1~1622177385~9196) ((lambda (&x~1622177385~9198 &sk~1622177385~9199 &fk~1622177385~9200) (if (pair? &x~1622177385~9198) ((lambda (&x~1622177385~9203 &sk~1622177385~9204 &fk~1622177385~9205) (&sk~1622177385~9204 &x~1622177385~9203)) (car &x~1622177385~9198) (lambda (&e2~1622177385~9207) ((lambda (&x~1622177385~9209 &sk~1622177385~9210 &fk~1622177385~9211) (if (null? &x~1622177385~9209) (&sk~1622177385~9210) (&fk~1622177385~9211))) (cdr &x~1622177385~9198) (lambda () (&sk~1622177385~9199 &e2~1622177385~9207)) &fk~1622177385~9200)) &fk~1622177385~9200) (&fk~1622177385~9200))) (cdr &x~1622177385~9187) (lambda (&e2~1622177385~9215) (&sk~1622177385~9188 &e1~1622177385~9196 &e2~1622177385~9215)) &fk~1622177385~9189)) &fk~1622177385~9189) (&fk~1622177385~9189))) (cdr &x~1622177385~9177) (lambda (&e1~1622177385~9217 &e2~1622177385~9218) (&sk~1622177385~9178 &e1~1622177385~9217 &e2~1622177385~9218)) &fk~1622177385~9179)) &fk~1622177385~9179) (&fk~1622177385~9179))) &exp~1622177385~9076 (lambda (&e1~1622177385~9220 &e2~1622177385~9221) (list (quote if) (&expand~1622177385~2162 &e1~1622177385~9220) (&expand~1622177385~2162 &e2~1622177385~9221))) (lambda () (ex:invalid-form &exp~1622177385~9076))))))) (set! &expand-set!~1622177385~2168 (lambda (&exp~1622177385~8970) ((lambda (&x~1622177385~8989 &sk~1622177385~8990 &fk~1622177385~8991) (if (pair? &x~1622177385~8989) ((lambda (&x~1622177385~8994 &sk~1622177385~8995 &fk~1622177385~8996) (&sk~1622177385~8995)) (car &x~1622177385~8989) (lambda () ((lambda (&x~1622177385~8999 &sk~1622177385~9000 &fk~1622177385~9001) (if (pair? &x~1622177385~8999) ((lambda (&x~1622177385~9004 &sk~1622177385~9005 &fk~1622177385~9006) (if (&identifier?~1622177385~2110 &x~1622177385~9004) ((lambda (&x~1622177385~9009 &sk~1622177385~9010 &fk~1622177385~9011) (&sk~1622177385~9010 &x~1622177385~9009)) &x~1622177385~9004 &sk~1622177385~9005 &fk~1622177385~9006) (&fk~1622177385~9006))) (car &x~1622177385~8999) (lambda (&id~1622177385~9013) ((lambda (&x~1622177385~9015 &sk~1622177385~9016 &fk~1622177385~9017) (if (pair? &x~1622177385~9015) ((lambda (&x~1622177385~9020 &sk~1622177385~9021 &fk~1622177385~9022) (&sk~1622177385~9021 &x~1622177385~9020)) (car &x~1622177385~9015) (lambda (&e~1622177385~9024) ((lambda (&x~1622177385~9026 &sk~1622177385~9027 &fk~1622177385~9028) (if (null? &x~1622177385~9026) (&sk~1622177385~9027) (&fk~1622177385~9028))) (cdr &x~1622177385~9015) (lambda () (&sk~1622177385~9016 &e~1622177385~9024)) &fk~1622177385~9017)) &fk~1622177385~9017) (&fk~1622177385~9017))) (cdr &x~1622177385~8999) (lambda (&e~1622177385~9032) (&sk~1622177385~9000 &id~1622177385~9013 &e~1622177385~9032)) &fk~1622177385~9001)) &fk~1622177385~9001) (&fk~1622177385~9001))) (cdr &x~1622177385~8989) (lambda (&id~1622177385~9034 &e~1622177385~9035) (&sk~1622177385~8990 &id~1622177385~9034 &e~1622177385~9035)) &fk~1622177385~8991)) &fk~1622177385~8991) (&fk~1622177385~8991))) &exp~1622177385~8970 (lambda (&id~1622177385~9037 &e~1622177385~9038) ((lambda (&binding~1622177385~9041) (&check-binding-level~1622177385~2135 &id~1622177385~9037 &binding~1622177385~9041) (&register-use!~1622177385~2195 &id~1622177385~9037 &binding~1622177385~9041) ((lambda (&t~1622177385~9045) (if (memv &t~1622177385~9045 (quote (macro))) (begin ((lambda (&macro~1622177385~9051) ((lambda (&t~1622177385~9055) (if (memv &t~1622177385~9055 (quote (variable-transformer))) (begin (&expand~1622177385~2162 (&invoke-macro~1622177385~2161 &macro~1622177385~9051 &exp~1622177385~8970))) (begin (&syntax-violation~1622177385~2219 (quote set!) "Keyword being set! is not a variable transformer" &exp~1622177385~8970 &id~1622177385~9037)))) (&macro-type~1622177385~2153 &macro~1622177385~9051))) (&binding->macro~1622177385~2159 &binding~1622177385~9041 &id~1622177385~9037))) (if (memv &t~1622177385~9045 (quote (variable))) (begin (let ((x (eq? (&binding-library~1622177385~2129 &binding~1622177385~9041) &*current-library*~1622177385~2094))) (if x x (&syntax-violation~1622177385~2219 (quote set!) "Directly or indirectly imported variable cannot be assigned" &exp~1622177385~8970 &id~1622177385~9037))) (&binding-mutable-set!~1622177385~2130 &binding~1622177385~9041 #t) (list (quote set!) (&binding-name~1622177385~2125 &binding~1622177385~9041) (&expand~1622177385~2162 &e~1622177385~9038))) (if (memv &t~1622177385~9045 (quote (pattern-variable))) (begin (&syntax-violation~1622177385~2219 (quote set!) "Pattern variable used outside syntax template" &exp~1622177385~8970 &id~1622177385~9037)))))) (&binding-type~1622177385~2124 &binding~1622177385~9041))) (&binding~1622177385~2131 &id~1622177385~9037))) (lambda () (ex:invalid-form &exp~1622177385~8970))))) (set! &expand-begin~1622177385~2169 (lambda (&exp~1622177385~8877) ((lambda (&x~1622177385~8888 &sk~1622177385~8889 &fk~1622177385~8890) (if (pair? &x~1622177385~8888) ((lambda (&x~1622177385~8893 &sk~1622177385~8894 &fk~1622177385~8895) (&sk~1622177385~8894)) (car &x~1622177385~8888) (lambda () ((lambda (&x~1622177385~8898 &sk~1622177385~8899 &fk~1622177385~8900) (((lambda (&loop~1622177385~8906) ((lambda (&temp~1622177385~8909) (set! &loop~1622177385~8906 &temp~1622177385~8909) ((lambda () &loop~1622177385~8906))) (lambda (&x~1622177385~8914 &result~1622177385~8915) ((lambda (&match-tail~1622177385~8916) (set! &match-tail~1622177385~8916 (lambda () ((lambda (&x~1622177385~8934 &sk~1622177385~8935 &fk~1622177385~8936) (if (null? &x~1622177385~8934) (&sk~1622177385~8935) (&fk~1622177385~8936))) &x~1622177385~8914 (lambda () (apply &sk~1622177385~8899 (if (null? &result~1622177385~8915) (map (lambda (&ignore~1622177385~8941) (quote ())) (quote (exps))) (apply map list (reverse &result~1622177385~8915))))) (lambda () ((lambda (&x~1622177385~8949 &sk~1622177385~8950 &fk~1622177385~8951) (&sk~1622177385~8950)) &x~1622177385~8914 (lambda () (&fk~1622177385~8900)) (lambda () (ex:invalid-form &x~1622177385~8914))))))) (if (null? &x~1622177385~8914) (begin (&match-tail~1622177385~8916)) (if (pair? &x~1622177385~8914) (begin ((lambda (&x~1622177385~8923 &sk~1622177385~8924 &fk~1622177385~8925) (&sk~1622177385~8924 &x~1622177385~8923)) (car &x~1622177385~8914) (lambda &car-vars~1622177385~8927 (&loop~1622177385~8906 (cdr &x~1622177385~8914) (cons &car-vars~1622177385~8927 &result~1622177385~8915))) &match-tail~1622177385~8916)) (begin (&fk~1622177385~8900))))) ex:undefined)))) ex:undefined) &x~1622177385~8898 (quote ()))) (cdr &x~1622177385~8888) (lambda (&exps~1622177385~8957) (&sk~1622177385~8889 &exps~1622177385~8957)) &fk~1622177385~8890)) &fk~1622177385~8890) (&fk~1622177385~8890))) &exp~1622177385~8877 (lambda (&exps~1622177385~8959) (&scan-sequence~1622177385~2178 (quote expression-sequence) #f &exps~1622177385~8959 (lambda (&forms~1622177385~8962 &no-syntax-definitions~1622177385~8963 &no-bound-variables~1622177385~8964) (cons (quote begin) (map cdr &forms~1622177385~8962))))) (lambda () (ex:invalid-form &exp~1622177385~8877))))) (set! &expand-local-syntax~1622177385~2170 (lambda (&exp~1622177385~8872) (&expand-begin~1622177385~2169 (list (&rename~1622177385~2151 (quote macro) (quote begin)) &exp~1622177385~8872)))) (set! &expand-and~1622177385~2171 (lambda (&exp~1622177385~8689) ((lambda (&x~1622177385~8698 &sk~1622177385~8699 &fk~1622177385~8700) (if (pair? &x~1622177385~8698) ((lambda (&x~1622177385~8703 &sk~1622177385~8704 &fk~1622177385~8705) (&sk~1622177385~8704 &x~1622177385~8703)) (car &x~1622177385~8698) (lambda (&and~1622177385~8707) ((lambda (&x~1622177385~8709 &sk~1622177385~8710 &fk~1622177385~8711) (if (null? &x~1622177385~8709) (&sk~1622177385~8710) (&fk~1622177385~8711))) (cdr &x~1622177385~8698) (lambda () (&sk~1622177385~8699 &and~1622177385~8707)) &fk~1622177385~8700)) &fk~1622177385~8700) (&fk~1622177385~8700))) &exp~1622177385~8689 (lambda (&and~1622177385~8715) #t) (lambda () ((lambda (&x~1622177385~8729 &sk~1622177385~8730 &fk~1622177385~8731) (if (pair? &x~1622177385~8729) ((lambda (&x~1622177385~8734 &sk~1622177385~8735 &fk~1622177385~8736) (&sk~1622177385~8735 &x~1622177385~8734)) (car &x~1622177385~8729) (lambda (&and~1622177385~8738) ((lambda (&x~1622177385~8740 &sk~1622177385~8741 &fk~1622177385~8742) (if (pair? &x~1622177385~8740) ((lambda (&x~1622177385~8745 &sk~1622177385~8746 &fk~1622177385~8747) (&sk~1622177385~8746 &x~1622177385~8745)) (car &x~1622177385~8740) (lambda (&e~1622177385~8749) ((lambda (&x~1622177385~8751 &sk~1622177385~8752 &fk~1622177385~8753) (if (null? &x~1622177385~8751) (&sk~1622177385~8752) (&fk~1622177385~8753))) (cdr &x~1622177385~8740) (lambda () (&sk~1622177385~8741 &e~1622177385~8749)) &fk~1622177385~8742)) &fk~1622177385~8742) (&fk~1622177385~8742))) (cdr &x~1622177385~8729) (lambda (&e~1622177385~8757) (&sk~1622177385~8730 &and~1622177385~8738 &e~1622177385~8757)) &fk~1622177385~8731)) &fk~1622177385~8731) (&fk~1622177385~8731))) &exp~1622177385~8689 (lambda (&and~1622177385~8759 &e~1622177385~8760) (&expand~1622177385~2162 &e~1622177385~8760)) (lambda () ((lambda (&x~1622177385~8776 &sk~1622177385~8777 &fk~1622177385~8778) (if (pair? &x~1622177385~8776) ((lambda (&x~1622177385~8781 &sk~1622177385~8782 &fk~1622177385~8783) (&sk~1622177385~8782 &x~1622177385~8781)) (car &x~1622177385~8776) (lambda (&and~1622177385~8785) ((lambda (&x~1622177385~8787 &sk~1622177385~8788 &fk~1622177385~8789) (if (pair? &x~1622177385~8787) ((lambda (&x~1622177385~8792 &sk~1622177385~8793 &fk~1622177385~8794) (&sk~1622177385~8793 &x~1622177385~8792)) (car &x~1622177385~8787) (lambda (&e~1622177385~8796) ((lambda (&x~1622177385~8798 &sk~1622177385~8799 &fk~1622177385~8800) (((lambda (&loop~1622177385~8806) ((lambda (&temp~1622177385~8809) (set! &loop~1622177385~8806 &temp~1622177385~8809) ((lambda () &loop~1622177385~8806))) (lambda (&x~1622177385~8814 &result~1622177385~8815) ((lambda (&match-tail~1622177385~8816) (set! &match-tail~1622177385~8816 (lambda () ((lambda (&x~1622177385~8834 &sk~1622177385~8835 &fk~1622177385~8836) (if (null? &x~1622177385~8834) (&sk~1622177385~8835) (&fk~1622177385~8836))) &x~1622177385~8814 (lambda () (apply &sk~1622177385~8799 (if (null? &result~1622177385~8815) (map (lambda (&ignore~1622177385~8841) (quote ())) (quote (es))) (apply map list (reverse &result~1622177385~8815))))) (lambda () ((lambda (&x~1622177385~8849 &sk~1622177385~8850 &fk~1622177385~8851) (&sk~1622177385~8850)) &x~1622177385~8814 (lambda () (&fk~1622177385~8800)) (lambda () (ex:invalid-form &x~1622177385~8814))))))) (if (null? &x~1622177385~8814) (begin (&match-tail~1622177385~8816)) (if (pair? &x~1622177385~8814) (begin ((lambda (&x~1622177385~8823 &sk~1622177385~8824 &fk~1622177385~8825) (&sk~1622177385~8824 &x~1622177385~8823)) (car &x~1622177385~8814) (lambda &car-vars~1622177385~8827 (&loop~1622177385~8806 (cdr &x~1622177385~8814) (cons &car-vars~1622177385~8827 &result~1622177385~8815))) &match-tail~1622177385~8816)) (begin (&fk~1622177385~8800))))) ex:undefined)))) ex:undefined) &x~1622177385~8798 (quote ()))) (cdr &x~1622177385~8787) (lambda (&es~1622177385~8857) (&sk~1622177385~8788 &e~1622177385~8796 &es~1622177385~8857)) &fk~1622177385~8789)) &fk~1622177385~8789) (&fk~1622177385~8789))) (cdr &x~1622177385~8776) (lambda (&e~1622177385~8859 &es~1622177385~8860) (&sk~1622177385~8777 &and~1622177385~8785 &e~1622177385~8859 &es~1622177385~8860)) &fk~1622177385~8778)) &fk~1622177385~8778) (&fk~1622177385~8778))) &exp~1622177385~8689 (lambda (&and~1622177385~8862 &e~1622177385~8863 &es~1622177385~8864) (cons (quote if) (cons (&expand~1622177385~2162 &e~1622177385~8863) (cons (&expand~1622177385~2162 (cons &and~1622177385~8862 &es~1622177385~8864)) (quote (#f)))))) (lambda () (ex:invalid-form &exp~1622177385~8689))))))))) (set! &expand-or~1622177385~2172 (lambda (&exp~1622177385~8503) ((lambda (&x~1622177385~8512 &sk~1622177385~8513 &fk~1622177385~8514) (if (pair? &x~1622177385~8512) ((lambda (&x~1622177385~8517 &sk~1622177385~8518 &fk~1622177385~8519) (&sk~1622177385~8518 &x~1622177385~8517)) (car &x~1622177385~8512) (lambda (&or~1622177385~8521) ((lambda (&x~1622177385~8523 &sk~1622177385~8524 &fk~1622177385~8525) (if (null? &x~1622177385~8523) (&sk~1622177385~8524) (&fk~1622177385~8525))) (cdr &x~1622177385~8512) (lambda () (&sk~1622177385~8513 &or~1622177385~8521)) &fk~1622177385~8514)) &fk~1622177385~8514) (&fk~1622177385~8514))) &exp~1622177385~8503 (lambda (&or~1622177385~8529) #t) (lambda () ((lambda (&x~1622177385~8543 &sk~1622177385~8544 &fk~1622177385~8545) (if (pair? &x~1622177385~8543) ((lambda (&x~1622177385~8548 &sk~1622177385~8549 &fk~1622177385~8550) (&sk~1622177385~8549 &x~1622177385~8548)) (car &x~1622177385~8543) (lambda (&or~1622177385~8552) ((lambda (&x~1622177385~8554 &sk~1622177385~8555 &fk~1622177385~8556) (if (pair? &x~1622177385~8554) ((lambda (&x~1622177385~8559 &sk~1622177385~8560 &fk~1622177385~8561) (&sk~1622177385~8560 &x~1622177385~8559)) (car &x~1622177385~8554) (lambda (&e~1622177385~8563) ((lambda (&x~1622177385~8565 &sk~1622177385~8566 &fk~1622177385~8567) (if (null? &x~1622177385~8565) (&sk~1622177385~8566) (&fk~1622177385~8567))) (cdr &x~1622177385~8554) (lambda () (&sk~1622177385~8555 &e~1622177385~8563)) &fk~1622177385~8556)) &fk~1622177385~8556) (&fk~1622177385~8556))) (cdr &x~1622177385~8543) (lambda (&e~1622177385~8571) (&sk~1622177385~8544 &or~1622177385~8552 &e~1622177385~8571)) &fk~1622177385~8545)) &fk~1622177385~8545) (&fk~1622177385~8545))) &exp~1622177385~8503 (lambda (&or~1622177385~8573 &e~1622177385~8574) (&expand~1622177385~2162 &e~1622177385~8574)) (lambda () ((lambda (&x~1622177385~8590 &sk~1622177385~8591 &fk~1622177385~8592) (if (pair? &x~1622177385~8590) ((lambda (&x~1622177385~8595 &sk~1622177385~8596 &fk~1622177385~8597) (&sk~1622177385~8596 &x~1622177385~8595)) (car &x~1622177385~8590) (lambda (&or~1622177385~8599) ((lambda (&x~1622177385~8601 &sk~1622177385~8602 &fk~1622177385~8603) (if (pair? &x~1622177385~8601) ((lambda (&x~1622177385~8606 &sk~1622177385~8607 &fk~1622177385~8608) (&sk~1622177385~8607 &x~1622177385~8606)) (car &x~1622177385~8601) (lambda (&e~1622177385~8610) ((lambda (&x~1622177385~8612 &sk~1622177385~8613 &fk~1622177385~8614) (((lambda (&loop~1622177385~8620) ((lambda (&temp~1622177385~8623) (set! &loop~1622177385~8620 &temp~1622177385~8623) ((lambda () &loop~1622177385~8620))) (lambda (&x~1622177385~8628 &result~1622177385~8629) ((lambda (&match-tail~1622177385~8630) (set! &match-tail~1622177385~8630 (lambda () ((lambda (&x~1622177385~8648 &sk~1622177385~8649 &fk~1622177385~8650) (if (null? &x~1622177385~8648) (&sk~1622177385~8649) (&fk~1622177385~8650))) &x~1622177385~8628 (lambda () (apply &sk~1622177385~8613 (if (null? &result~1622177385~8629) (map (lambda (&ignore~1622177385~8655) (quote ())) (quote (es))) (apply map list (reverse &result~1622177385~8629))))) (lambda () ((lambda (&x~1622177385~8663 &sk~1622177385~8664 &fk~1622177385~8665) (&sk~1622177385~8664)) &x~1622177385~8628 (lambda () (&fk~1622177385~8614)) (lambda () (ex:invalid-form &x~1622177385~8628))))))) (if (null? &x~1622177385~8628) (begin (&match-tail~1622177385~8630)) (if (pair? &x~1622177385~8628) (begin ((lambda (&x~1622177385~8637 &sk~1622177385~8638 &fk~1622177385~8639) (&sk~1622177385~8638 &x~1622177385~8637)) (car &x~1622177385~8628) (lambda &car-vars~1622177385~8641 (&loop~1622177385~8620 (cdr &x~1622177385~8628) (cons &car-vars~1622177385~8641 &result~1622177385~8629))) &match-tail~1622177385~8630)) (begin (&fk~1622177385~8614))))) ex:undefined)))) ex:undefined) &x~1622177385~8612 (quote ()))) (cdr &x~1622177385~8601) (lambda (&es~1622177385~8671) (&sk~1622177385~8602 &e~1622177385~8610 &es~1622177385~8671)) &fk~1622177385~8603)) &fk~1622177385~8603) (&fk~1622177385~8603))) (cdr &x~1622177385~8590) (lambda (&e~1622177385~8673 &es~1622177385~8674) (&sk~1622177385~8591 &or~1622177385~8599 &e~1622177385~8673 &es~1622177385~8674)) &fk~1622177385~8592)) &fk~1622177385~8592) (&fk~1622177385~8592))) &exp~1622177385~8503 (lambda (&or~1622177385~8676 &e~1622177385~8677 &es~1622177385~8678) (list (quote let) (list (list (quote x) (&expand~1622177385~2162 &e~1622177385~8677))) (list (quote if) (quote x) (quote x) (&expand~1622177385~2162 (cons &or~1622177385~8676 &es~1622177385~8678))))) (lambda () (ex:invalid-form &exp~1622177385~8503))))))))) (set! &expand-lambda~1622177385~2173 (lambda (&exp~1622177385~8348) ((lambda (&x~1622177385~8365 &sk~1622177385~8366 &fk~1622177385~8367) (if (pair? &x~1622177385~8365) ((lambda (&x~1622177385~8370 &sk~1622177385~8371 &fk~1622177385~8372) (&sk~1622177385~8371)) (car &x~1622177385~8365) (lambda () ((lambda (&x~1622177385~8375 &sk~1622177385~8376 &fk~1622177385~8377) (if (pair? &x~1622177385~8375) ((lambda (&x~1622177385~8380 &sk~1622177385~8381 &fk~1622177385~8382) (if (&formals?~1622177385~2174 &x~1622177385~8380) ((lambda (&x~1622177385~8385 &sk~1622177385~8386 &fk~1622177385~8387) (&sk~1622177385~8386 &x~1622177385~8385)) &x~1622177385~8380 &sk~1622177385~8381 &fk~1622177385~8382) (&fk~1622177385~8382))) (car &x~1622177385~8375) (lambda (&formals~1622177385~8389) ((lambda (&x~1622177385~8391 &sk~1622177385~8392 &fk~1622177385~8393) (((lambda (&loop~1622177385~8399) ((lambda (&temp~1622177385~8402) (set! &loop~1622177385~8399 &temp~1622177385~8402) ((lambda () &loop~1622177385~8399))) (lambda (&x~1622177385~8407 &result~1622177385~8408) ((lambda (&match-tail~1622177385~8409) (set! &match-tail~1622177385~8409 (lambda () ((lambda (&x~1622177385~8427 &sk~1622177385~8428 &fk~1622177385~8429) (if (null? &x~1622177385~8427) (&sk~1622177385~8428) (&fk~1622177385~8429))) &x~1622177385~8407 (lambda () (apply &sk~1622177385~8392 (if (null? &result~1622177385~8408) (map (lambda (&ignore~1622177385~8434) (quote ())) (quote (body))) (apply map list (reverse &result~1622177385~8408))))) (lambda () ((lambda (&x~1622177385~8442 &sk~1622177385~8443 &fk~1622177385~8444) (&sk~1622177385~8443)) &x~1622177385~8407 (lambda () (&fk~1622177385~8393)) (lambda () (ex:invalid-form &x~1622177385~8407))))))) (if (null? &x~1622177385~8407) (begin (&match-tail~1622177385~8409)) (if (pair? &x~1622177385~8407) (begin ((lambda (&x~1622177385~8416 &sk~1622177385~8417 &fk~1622177385~8418) (&sk~1622177385~8417 &x~1622177385~8416)) (car &x~1622177385~8407) (lambda &car-vars~1622177385~8420 (&loop~1622177385~8399 (cdr &x~1622177385~8407) (cons &car-vars~1622177385~8420 &result~1622177385~8408))) &match-tail~1622177385~8409)) (begin (&fk~1622177385~8393))))) ex:undefined)))) ex:undefined) &x~1622177385~8391 (quote ()))) (cdr &x~1622177385~8375) (lambda (&body~1622177385~8450) (&sk~1622177385~8376 &formals~1622177385~8389 &body~1622177385~8450)) &fk~1622177385~8377)) &fk~1622177385~8377) (&fk~1622177385~8377))) (cdr &x~1622177385~8365) (lambda (&formals~1622177385~8452 &body~1622177385~8453) (&sk~1622177385~8366 &formals~1622177385~8452 &body~1622177385~8453)) &fk~1622177385~8367)) &fk~1622177385~8367) (&fk~1622177385~8367))) &exp~1622177385~8348 (lambda (&formals~1622177385~8455 &body~1622177385~8456) ((lambda (&saved~1622177385~8460) (set! &*usage-env*~1622177385~2079 (&env-extend~1622177385~2138 (map (lambda (&formal~1622177385~8498) (&make-local-mapping~1622177385~2132 (quote variable) &formal~1622177385~8498 #f)) (&flatten~1622177385~2229 &formals~1622177385~8455)) &*usage-env*~1622177385~2079)) (call-with-values (lambda () ((lambda (&formals~1622177385~8465) ((lambda (&saved~1622177385~8469) (set! &*usage-env*~1622177385~2079 (&env-extend~1622177385~2138 (quote ()) &*usage-env*~1622177385~2079)) (call-with-values (lambda () (&scan-sequence~1622177385~2178 (quote lambda) &make-local-mapping~1622177385~2132 &body~1622177385~8456 (lambda (&forms~1622177385~8474 &syntax-definitions~1622177385~8475 &bound-variables~1622177385~8476) (cons (quote lambda) (cons &formals~1622177385~8465 (if (null? &bound-variables~1622177385~8476) (&emit-body~1622177385~2179 &forms~1622177385~8474 ex:undefined-set!) (list (cons (cons (quote lambda) (cons &bound-variables~1622177385~8476 (&emit-body~1622177385~2179 &forms~1622177385~8474 ex:undefined-set!))) (map (lambda (&ignore~1622177385~8483) (quote ex:undefined)) &bound-variables~1622177385~8476))))))))) (lambda &results~1622177385~8487 (set! &*usage-env*~1622177385~2079 &saved~1622177385~8469) (apply values &results~1622177385~8487)))) &*usage-env*~1622177385~2079)) (&dotted-map~1622177385~2232 (lambda (&formal~1622177385~8492) (&binding-name~1622177385~2125 (&binding~1622177385~2131 &formal~1622177385~8492))) &formals~1622177385~8455))) (lambda &results~1622177385~8494 (set! &*usage-env*~1622177385~2079 &saved~1622177385~8460) (apply values &results~1622177385~8494)))) &*usage-env*~1622177385~2079)) (lambda () (ex:invalid-form &exp~1622177385~8348))))) (set! &formals?~1622177385~2174 (lambda (&s~1622177385~8337) (let ((x (null? &s~1622177385~8337))) (if x x (let ((x (&identifier?~1622177385~2110 &s~1622177385~8337))) (if x x (if (pair? &s~1622177385~8337) (if (&identifier?~1622177385~2110 (car &s~1622177385~8337)) (if (&formals?~1622177385~2174 (cdr &s~1622177385~8337)) (not (&dotted-memp~1622177385~2231 (lambda (&x~1622177385~8346) (&bound-identifier=?~1622177385~2117 &x~1622177385~8346 (car &s~1622177385~8337))) (cdr &s~1622177385~8337))) #f) #f) #f))))))) (set! &make-wrap~1622177385~2175 (lambda (&env~1622177385~8334 &exp~1622177385~8335) (cons &env~1622177385~8334 &exp~1622177385~8335))) (set! &wrap-env~1622177385~2176 car) (set! &wrap-exp~1622177385~2177 cdr) (set! &scan-sequence~1622177385~2178 (lambda (&body-type~1622177385~8052 &make-map~1622177385~8053 &body-forms~1622177385~8054 &k~1622177385~8055) ((lambda (&expand-deferred~1622177385~8056) (set! &expand-deferred~1622177385~8056 (lambda (&forms~1622177385~8315) (map (lambda (&form~1622177385~8317) (cons (car &form~1622177385~8317) ((lambda (&deferred?~1622177385~8320 &exp~1622177385~8321) (if &deferred?~1622177385~8320 ((lambda (&saved~1622177385~8326) (set! &*usage-env*~1622177385~2079 (&wrap-env~1622177385~2176 &exp~1622177385~8321)) (call-with-values (lambda () (&expand~1622177385~2162 (&wrap-exp~1622177385~2177 &exp~1622177385~8321))) (lambda &results~1622177385~8330 (set! &*usage-env*~1622177385~2079 &saved~1622177385~8326) (apply values &results~1622177385~8330)))) &*usage-env*~1622177385~2079) &exp~1622177385~8321)) (cadr &form~1622177385~8317) (caddr &form~1622177385~8317)))) &forms~1622177385~8315))) ((lambda (&common-env~1622177385~8059) (&add-fresh-used-frame!~1622177385~2194) (((lambda (&loop~1622177385~8065) ((lambda (&temp~1622177385~8068) (set! &loop~1622177385~8065 &temp~1622177385~8068) ((lambda () &loop~1622177385~8065))) (lambda (&ws~1622177385~8073 &forms~1622177385~8074 &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076) (if (null? &ws~1622177385~8073) (begin (&check-expression-body~1622177385~2185 &body-type~1622177385~8052 &forms~1622177385~8074 &body-forms~1622177385~8054) (&merge-used-with-parent-frame!~1622177385~2196) (&k~1622177385~8055 (reverse (&expand-deferred~1622177385~8056 &forms~1622177385~8074)) (reverse &syntax-defs~1622177385~8075) &bound-variables~1622177385~8076)) (begin ((lambda (&saved~1622177385~8084) (set! &*usage-env*~1622177385~2079 (&wrap-env~1622177385~2176 (car &ws~1622177385~8073))) (call-with-values (lambda () (call-with-values (lambda () (&head-expand~1622177385~2163 (&wrap-exp~1622177385~2177 (car &ws~1622177385~8073)))) (lambda (&form~1622177385~8089 &operator-binding~1622177385~8090) ((lambda (&type~1622177385~8093) (&check-expression-sequence~1622177385~2182 &body-type~1622177385~8052 &type~1622177385~8093 &form~1622177385~8089) (&check-toplevel~1622177385~2183 &body-type~1622177385~8052 &type~1622177385~8093 &form~1622177385~8089) ((lambda (&t~1622177385~8097) (if (memv &t~1622177385~8097 (quote (import))) (begin ((lambda (&x~1622177385~8111 &sk~1622177385~8112 &fk~1622177385~8113) (if (pair? &x~1622177385~8111) ((lambda (&x~1622177385~8116 &sk~1622177385~8117 &fk~1622177385~8118) (&sk~1622177385~8117)) (car &x~1622177385~8111) (lambda () ((lambda (&x~1622177385~8121 &sk~1622177385~8122 &fk~1622177385~8123) (((lambda (&loop~1622177385~8129) ((lambda (&temp~1622177385~8132) (set! &loop~1622177385~8129 &temp~1622177385~8132) ((lambda () &loop~1622177385~8129))) (lambda (&x~1622177385~8137 &result~1622177385~8138) ((lambda (&match-tail~1622177385~8139) (set! &match-tail~1622177385~8139 (lambda () ((lambda (&x~1622177385~8157 &sk~1622177385~8158 &fk~1622177385~8159) (if (null? &x~1622177385~8157) (&sk~1622177385~8158) (&fk~1622177385~8159))) &x~1622177385~8137 (lambda () (apply &sk~1622177385~8122 (if (null? &result~1622177385~8138) (map (lambda (&ignore~1622177385~8164) (quote ())) (quote (specs))) (apply map list (reverse &result~1622177385~8138))))) (lambda () ((lambda (&x~1622177385~8172 &sk~1622177385~8173 &fk~1622177385~8174) (&sk~1622177385~8173)) &x~1622177385~8137 (lambda () (&fk~1622177385~8123)) (lambda () (ex:invalid-form &x~1622177385~8137))))))) (if (null? &x~1622177385~8137) (begin (&match-tail~1622177385~8139)) (if (pair? &x~1622177385~8137) (begin ((lambda (&x~1622177385~8146 &sk~1622177385~8147 &fk~1622177385~8148) (&sk~1622177385~8147 &x~1622177385~8146)) (car &x~1622177385~8137) (lambda &car-vars~1622177385~8150 (&loop~1622177385~8129 (cdr &x~1622177385~8137) (cons &car-vars~1622177385~8150 &result~1622177385~8138))) &match-tail~1622177385~8139)) (begin (&fk~1622177385~8123))))) ex:undefined)))) ex:undefined) &x~1622177385~8121 (quote ()))) (cdr &x~1622177385~8111) (lambda (&specs~1622177385~8180) (&sk~1622177385~8112 &specs~1622177385~8180)) &fk~1622177385~8113)) &fk~1622177385~8113) (&fk~1622177385~8113))) &form~1622177385~8089 (lambda (&specs~1622177385~8182) (call-with-values (lambda () (&scan-imports~1622177385~2206 &specs~1622177385~8182)) (lambda (&imported-libraries~1622177385~8185 &imports~1622177385~8186) (&import-libraries-for-expand~1622177385~2203 &imported-libraries~1622177385~8185 (map not &imported-libraries~1622177385~8185) 0) (&env-import!~1622177385~2201 (car &form~1622177385~8089) &imports~1622177385~8186 &common-env~1622177385~8059) (&loop~1622177385~8065 (cdr &ws~1622177385~8073) (cons (list #f #f (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) &imported-libraries~1622177385~8185) (cons (list (quote quote) (&current-builds~1622177385~2202 &imported-libraries~1622177385~8185)) (quote (0)))))) &forms~1622177385~8074) &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)))) (lambda () (ex:invalid-form &form~1622177385~8089)))) (if (memv &t~1622177385~8097 (quote (program))) (begin (&loop~1622177385~8065 (cdr &ws~1622177385~8073) (cons (list #f #f (&expand-program~1622177385~2198 &form~1622177385~8089)) &forms~1622177385~8074) &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)) (if (memv &t~1622177385~8097 (quote (library))) (begin (&loop~1622177385~8065 (cdr &ws~1622177385~8073) (cons (list #f #f (&expand-library~1622177385~2199 &form~1622177385~8089)) &forms~1622177385~8074) &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)) (if (memv &t~1622177385~8097 (quote (define))) (begin (call-with-values (lambda () (&parse-definition~1622177385~2180 &form~1622177385~8089 #f)) (lambda (&id~1622177385~8205 &rhs~1622177385~8206) (&check-valid-definition~1622177385~2184 &id~1622177385~8205 &common-env~1622177385~8059 &body-type~1622177385~8052 &form~1622177385~8089 &forms~1622177385~8074 &type~1622177385~8093) (&env-extend!~1622177385~2139 (list (&make-map~1622177385~8053 (quote variable) &id~1622177385~8205 #f)) &common-env~1622177385~8059) (&loop~1622177385~8065 (cdr &ws~1622177385~8073) (cons (list (&binding-name~1622177385~2125 (&binding~1622177385~2131 &id~1622177385~8205)) #t (&make-wrap~1622177385~2175 &*usage-env*~1622177385~2079 &rhs~1622177385~8206)) &forms~1622177385~8074) &syntax-defs~1622177385~8075 (cons (&binding-name~1622177385~2125 (&binding~1622177385~2131 &id~1622177385~8205)) &bound-variables~1622177385~8076))))) (if (memv &t~1622177385~8097 (quote (define-syntax))) (begin (call-with-values (lambda () (&parse-definition~1622177385~2180 &form~1622177385~8089 #t)) (lambda (&id~1622177385~8213 &rhs~1622177385~8214) (&check-valid-definition~1622177385~2184 &id~1622177385~8213 &common-env~1622177385~8059 &body-type~1622177385~8052 &form~1622177385~8089 &forms~1622177385~8074 &type~1622177385~8093) ((lambda (&mapping~1622177385~8217) (&env-extend!~1622177385~2139 (list &mapping~1622177385~8217) &common-env~1622177385~8059) ((lambda (&rhs~1622177385~8220) (&register-macro!~1622177385~2160 (&binding-name~1622177385~2125 (cdr &mapping~1622177385~8217)) (&make-user-macro~1622177385~2158 (eval &rhs~1622177385~8220 (interaction-environment)))) (&loop~1622177385~8065 (cdr &ws~1622177385~8073) &forms~1622177385~8074 (cons (cons (&binding-name~1622177385~2125 (&binding~1622177385~2131 &id~1622177385~8213)) &rhs~1622177385~8220) &syntax-defs~1622177385~8075) &bound-variables~1622177385~8076)) ((lambda (&saved~1622177385~8224) (set! &*phase*~1622177385~2082 (+ 1 &*phase*~1622177385~2082)) (call-with-values (lambda () (&expand~1622177385~2162 &rhs~1622177385~8214)) (lambda &results~1622177385~8228 (set! &*phase*~1622177385~2082 &saved~1622177385~8224) (apply values &results~1622177385~8228)))) &*phase*~1622177385~2082))) (&make-map~1622177385~8053 (quote macro) &id~1622177385~8213 #f))))) (if (memv &t~1622177385~8097 (quote (begin))) (begin (let ((x (list? &form~1622177385~8089))) (if x x (&invalid-form~1622177385~2243 &form~1622177385~8089))) (&loop~1622177385~8065 (append (map (lambda (&exp~1622177385~8236) (&make-wrap~1622177385~2175 &*usage-env*~1622177385~2079 &exp~1622177385~8236)) (cdr &form~1622177385~8089)) (cdr &ws~1622177385~8073)) &forms~1622177385~8074 &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)) (if (memv &t~1622177385~8097 (quote (let-syntax letrec-syntax))) (begin (call-with-values (lambda () (&parse-local-syntax~1622177385~2181 &form~1622177385~8089)) (lambda (&formals~1622177385~8244 &rhs~1622177385~8245 &body~1622177385~8246) ((lambda (&original-env~1622177385~8250) ((lambda (&usage-diff~1622177385~8253) ((lambda (&extended-env~1622177385~8256) ((lambda (&rhs-expanded~1622177385~8259) ((lambda (&macros~1622177385~8262) (for-each (lambda (&mapping~1622177385~8266 &macro~1622177385~8267) (&register-macro!~1622177385~2160 (&binding-name~1622177385~2125 (cdr &mapping~1622177385~8266)) (&make-user-macro~1622177385~2158 &macro~1622177385~8267))) &usage-diff~1622177385~8253 &macros~1622177385~8262) (&loop~1622177385~8065 (append (map (lambda (&form~1622177385~8264) (&make-wrap~1622177385~2175 &extended-env~1622177385~8256 &form~1622177385~8264)) &body~1622177385~8246) (cdr &ws~1622177385~8073)) &forms~1622177385~8074 &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)) (map (lambda (&e~1622177385~8269) (eval &e~1622177385~8269 (interaction-environment))) &rhs-expanded~1622177385~8259))) ((lambda (&saved~1622177385~8273) (set! &*phase*~1622177385~2082 (+ 1 &*phase*~1622177385~2082)) (call-with-values (lambda () ((lambda (&saved~1622177385~8278) (set! &*usage-env*~1622177385~2079 ((lambda (&t~1622177385~8288) (if (memv &t~1622177385~8288 (quote (let-syntax))) (begin &original-env~1622177385~8250) (if (memv &t~1622177385~8288 (quote (letrec-syntax))) (begin &extended-env~1622177385~8256)))) &type~1622177385~8093)) (call-with-values (lambda () (map &expand~1622177385~2162 &rhs~1622177385~8245)) (lambda &results~1622177385~8282 (set! &*usage-env*~1622177385~2079 &saved~1622177385~8278) (apply values &results~1622177385~8282)))) &*usage-env*~1622177385~2079)) (lambda &results~1622177385~8296 (set! &*phase*~1622177385~2082 &saved~1622177385~8273) (apply values &results~1622177385~8296)))) &*phase*~1622177385~2082))) (&env-extend~1622177385~2138 &usage-diff~1622177385~8253 &original-env~1622177385~8250))) (map (lambda (&formal~1622177385~8300) (&make-local-mapping~1622177385~2132 (quote macro) &formal~1622177385~8300 #f)) &formals~1622177385~8244))) &*usage-env*~1622177385~2079)))) (begin (&loop~1622177385~8065 (cdr &ws~1622177385~8073) (cons (list #f #t (&make-wrap~1622177385~2175 &*usage-env*~1622177385~2079 &form~1622177385~8089)) &forms~1622177385~8074) &syntax-defs~1622177385~8075 &bound-variables~1622177385~8076)))))))))) &type~1622177385~8093)) (if &operator-binding~1622177385~8090 (&binding-name~1622177385~2125 &operator-binding~1622177385~8090) #f))))) (lambda &results~1622177385~8306 (set! &*usage-env*~1622177385~2079 &saved~1622177385~8084) (apply values &results~1622177385~8306)))) &*usage-env*~1622177385~2079)))))) ex:undefined) (map (lambda (&e~1622177385~8310) (&make-wrap~1622177385~2175 &common-env~1622177385~8059 &e~1622177385~8310)) &body-forms~1622177385~8054) (quote ()) (quote ()) (quote ()))) &*usage-env*~1622177385~2079)) ex:undefined))) (set! &emit-body~1622177385~2179 (lambda (&body-forms~1622177385~8045 &define-or-set~1622177385~8046) (map (lambda (&body-form~1622177385~8048) (if (symbol? (car &body-form~1622177385~8048)) (list &define-or-set~1622177385~8046 (car &body-form~1622177385~8048) (cdr &body-form~1622177385~8048)) (cdr &body-form~1622177385~8048))) &body-forms~1622177385~8045))) (set! &parse-definition~1622177385~2180 (lambda (&exp~1622177385~7779 &syntax-def?~1622177385~7780) ((lambda (&x~1622177385~7795 &sk~1622177385~7796 &fk~1622177385~7797) (if (pair? &x~1622177385~7795) ((lambda (&x~1622177385~7800 &sk~1622177385~7801 &fk~1622177385~7802) (&sk~1622177385~7801)) (car &x~1622177385~7795) (lambda () ((lambda (&x~1622177385~7805 &sk~1622177385~7806 &fk~1622177385~7807) (if (pair? &x~1622177385~7805) ((lambda (&x~1622177385~7810 &sk~1622177385~7811 &fk~1622177385~7812) (if (&identifier?~1622177385~2110 &x~1622177385~7810) ((lambda (&x~1622177385~7815 &sk~1622177385~7816 &fk~1622177385~7817) (&sk~1622177385~7816 &x~1622177385~7815)) &x~1622177385~7810 &sk~1622177385~7811 &fk~1622177385~7812) (&fk~1622177385~7812))) (car &x~1622177385~7805) (lambda (&id~1622177385~7819) ((lambda (&x~1622177385~7821 &sk~1622177385~7822 &fk~1622177385~7823) (if (null? &x~1622177385~7821) (&sk~1622177385~7822) (&fk~1622177385~7823))) (cdr &x~1622177385~7805) (lambda () (&sk~1622177385~7806 &id~1622177385~7819)) &fk~1622177385~7807)) &fk~1622177385~7807) (&fk~1622177385~7807))) (cdr &x~1622177385~7795) (lambda (&id~1622177385~7827) (&sk~1622177385~7796 &id~1622177385~7827)) &fk~1622177385~7797)) &fk~1622177385~7797) (&fk~1622177385~7797))) &exp~1622177385~7779 (lambda (&id~1622177385~7829) (values &id~1622177385~7829 (&rename~1622177385~2151 (quote variable) (quote ex:unspecified)))) (lambda () ((lambda (&x~1622177385~7851 &sk~1622177385~7852 &fk~1622177385~7853) (if (pair? &x~1622177385~7851) ((lambda (&x~1622177385~7856 &sk~1622177385~7857 &fk~1622177385~7858) (&sk~1622177385~7857)) (car &x~1622177385~7851) (lambda () ((lambda (&x~1622177385~7861 &sk~1622177385~7862 &fk~1622177385~7863) (if (pair? &x~1622177385~7861) ((lambda (&x~1622177385~7866 &sk~1622177385~7867 &fk~1622177385~7868) (if (&identifier?~1622177385~2110 &x~1622177385~7866) ((lambda (&x~1622177385~7871 &sk~1622177385~7872 &fk~1622177385~7873) (&sk~1622177385~7872 &x~1622177385~7871)) &x~1622177385~7866 &sk~1622177385~7867 &fk~1622177385~7868) (&fk~1622177385~7868))) (car &x~1622177385~7861) (lambda (&id~1622177385~7875) ((lambda (&x~1622177385~7877 &sk~1622177385~7878 &fk~1622177385~7879) (if (pair? &x~1622177385~7877) ((lambda (&x~1622177385~7882 &sk~1622177385~7883 &fk~1622177385~7884) (&sk~1622177385~7883 &x~1622177385~7882)) (car &x~1622177385~7877) (lambda (&e~1622177385~7886) ((lambda (&x~1622177385~7888 &sk~1622177385~7889 &fk~1622177385~7890) (if (null? &x~1622177385~7888) (&sk~1622177385~7889) (&fk~1622177385~7890))) (cdr &x~1622177385~7877) (lambda () (&sk~1622177385~7878 &e~1622177385~7886)) &fk~1622177385~7879)) &fk~1622177385~7879) (&fk~1622177385~7879))) (cdr &x~1622177385~7861) (lambda (&e~1622177385~7894) (&sk~1622177385~7862 &id~1622177385~7875 &e~1622177385~7894)) &fk~1622177385~7863)) &fk~1622177385~7863) (&fk~1622177385~7863))) (cdr &x~1622177385~7851) (lambda (&id~1622177385~7896 &e~1622177385~7897) (&sk~1622177385~7852 &id~1622177385~7896 &e~1622177385~7897)) &fk~1622177385~7853)) &fk~1622177385~7853) (&fk~1622177385~7853))) &exp~1622177385~7779 (lambda (&id~1622177385~7899 &e~1622177385~7900) (values &id~1622177385~7899 &e~1622177385~7900)) (lambda () ((lambda (&x~1622177385~7924 &sk~1622177385~7925 &fk~1622177385~7926) (if (pair? &x~1622177385~7924) ((lambda (&x~1622177385~7929 &sk~1622177385~7930 &fk~1622177385~7931) (&sk~1622177385~7930)) (car &x~1622177385~7924) (lambda () ((lambda (&x~1622177385~7934 &sk~1622177385~7935 &fk~1622177385~7936) (if (pair? &x~1622177385~7934) ((lambda (&x~1622177385~7939 &sk~1622177385~7940 &fk~1622177385~7941) (if (pair? &x~1622177385~7939) ((lambda (&x~1622177385~7944 &sk~1622177385~7945 &fk~1622177385~7946) (if (&identifier?~1622177385~2110 &x~1622177385~7944) ((lambda (&x~1622177385~7949 &sk~1622177385~7950 &fk~1622177385~7951) (&sk~1622177385~7950 &x~1622177385~7949)) &x~1622177385~7944 &sk~1622177385~7945 &fk~1622177385~7946) (&fk~1622177385~7946))) (car &x~1622177385~7939) (lambda (&id~1622177385~7953) ((lambda (&x~1622177385~7955 &sk~1622177385~7956 &fk~1622177385~7957) (if (&formals?~1622177385~2174 &x~1622177385~7955) ((lambda (&x~1622177385~7960 &sk~1622177385~7961 &fk~1622177385~7962) (&sk~1622177385~7961 &x~1622177385~7960)) &x~1622177385~7955 &sk~1622177385~7956 &fk~1622177385~7957) (&fk~1622177385~7957))) (cdr &x~1622177385~7939) (lambda (&formals~1622177385~7964) (&sk~1622177385~7940 &id~1622177385~7953 &formals~1622177385~7964)) &fk~1622177385~7941)) &fk~1622177385~7941) (&fk~1622177385~7941))) (car &x~1622177385~7934) (lambda (&id~1622177385~7966 &formals~1622177385~7967) ((lambda (&x~1622177385~7969 &sk~1622177385~7970 &fk~1622177385~7971) (((lambda (&loop~1622177385~7977) ((lambda (&temp~1622177385~7980) (set! &loop~1622177385~7977 &temp~1622177385~7980) ((lambda () &loop~1622177385~7977))) (lambda (&x~1622177385~7985 &result~1622177385~7986) ((lambda (&match-tail~1622177385~7987) (set! &match-tail~1622177385~7987 (lambda () ((lambda (&x~1622177385~8005 &sk~1622177385~8006 &fk~1622177385~8007) (if (null? &x~1622177385~8005) (&sk~1622177385~8006) (&fk~1622177385~8007))) &x~1622177385~7985 (lambda () (apply &sk~1622177385~7970 (if (null? &result~1622177385~7986) (map (lambda (&ignore~1622177385~8012) (quote ())) (quote (body))) (apply map list (reverse &result~1622177385~7986))))) (lambda () ((lambda (&x~1622177385~8020 &sk~1622177385~8021 &fk~1622177385~8022) (&sk~1622177385~8021)) &x~1622177385~7985 (lambda () (&fk~1622177385~7971)) (lambda () (ex:invalid-form &x~1622177385~7985))))))) (if (null? &x~1622177385~7985) (begin (&match-tail~1622177385~7987)) (if (pair? &x~1622177385~7985) (begin ((lambda (&x~1622177385~7994 &sk~1622177385~7995 &fk~1622177385~7996) (&sk~1622177385~7995 &x~1622177385~7994)) (car &x~1622177385~7985) (lambda &car-vars~1622177385~7998 (&loop~1622177385~7977 (cdr &x~1622177385~7985) (cons &car-vars~1622177385~7998 &result~1622177385~7986))) &match-tail~1622177385~7987)) (begin (&fk~1622177385~7971))))) ex:undefined)))) ex:undefined) &x~1622177385~7969 (quote ()))) (cdr &x~1622177385~7934) (lambda (&body~1622177385~8028) (&sk~1622177385~7935 &id~1622177385~7966 &formals~1622177385~7967 &body~1622177385~8028)) &fk~1622177385~7936)) &fk~1622177385~7936) (&fk~1622177385~7936))) (cdr &x~1622177385~7924) (lambda (&id~1622177385~8030 &formals~1622177385~8031 &body~1622177385~8032) (&sk~1622177385~7925 &id~1622177385~8030 &formals~1622177385~8031 &body~1622177385~8032)) &fk~1622177385~7926)) &fk~1622177385~7926) (&fk~1622177385~7926))) &exp~1622177385~7779 (lambda (&id~1622177385~8034 &formals~1622177385~8035 &body~1622177385~8036) (if &syntax-def?~1622177385~7780 (&invalid-form~1622177385~2243 &exp~1622177385~7779) #f) (values &id~1622177385~8034 (cons (&rename~1622177385~2151 (quote macro) (quote lambda)) (cons &formals~1622177385~8035 &body~1622177385~8036)))) (lambda () (ex:invalid-form &exp~1622177385~7779))))))))) (set! &parse-local-syntax~1622177385~2181 (lambda (&t~1622177385~7578) ((lambda (&x~1622177385~7603 &sk~1622177385~7604 &fk~1622177385~7605) (if (pair? &x~1622177385~7603) ((lambda (&x~1622177385~7608 &sk~1622177385~7609 &fk~1622177385~7610) (&sk~1622177385~7609)) (car &x~1622177385~7603) (lambda () ((lambda (&x~1622177385~7613 &sk~1622177385~7614 &fk~1622177385~7615) (if (pair? &x~1622177385~7613) ((lambda (&x~1622177385~7618 &sk~1622177385~7619 &fk~1622177385~7620) (((lambda (&loop~1622177385~7626) ((lambda (&temp~1622177385~7629) (set! &loop~1622177385~7626 &temp~1622177385~7629) ((lambda () &loop~1622177385~7626))) (lambda (&x~1622177385~7634 &result~1622177385~7635) ((lambda (&match-tail~1622177385~7636) (set! &match-tail~1622177385~7636 (lambda () ((lambda (&x~1622177385~7680 &sk~1622177385~7681 &fk~1622177385~7682) (if (null? &x~1622177385~7680) (&sk~1622177385~7681) (&fk~1622177385~7682))) &x~1622177385~7634 (lambda () (apply &sk~1622177385~7619 (if (null? &result~1622177385~7635) (map (lambda (&ignore~1622177385~7687) (quote ())) (quote (x e))) (apply map list (reverse &result~1622177385~7635))))) (lambda () ((lambda (&x~1622177385~7695 &sk~1622177385~7696 &fk~1622177385~7697) (&sk~1622177385~7696)) &x~1622177385~7634 (lambda () (&fk~1622177385~7620)) (lambda () (ex:invalid-form &x~1622177385~7634))))))) (if (null? &x~1622177385~7634) (begin (&match-tail~1622177385~7636)) (if (pair? &x~1622177385~7634) (begin ((lambda (&x~1622177385~7643 &sk~1622177385~7644 &fk~1622177385~7645) (if (pair? &x~1622177385~7643) ((lambda (&x~1622177385~7648 &sk~1622177385~7649 &fk~1622177385~7650) (&sk~1622177385~7649 &x~1622177385~7648)) (car &x~1622177385~7643) (lambda (&x~1622177385~7652) ((lambda (&x~1622177385~7654 &sk~1622177385~7655 &fk~1622177385~7656) (if (pair? &x~1622177385~7654) ((lambda (&x~1622177385~7659 &sk~1622177385~7660 &fk~1622177385~7661) (&sk~1622177385~7660 &x~1622177385~7659)) (car &x~1622177385~7654) (lambda (&e~1622177385~7663) ((lambda (&x~1622177385~7665 &sk~1622177385~7666 &fk~1622177385~7667) (if (null? &x~1622177385~7665) (&sk~1622177385~7666) (&fk~1622177385~7667))) (cdr &x~1622177385~7654) (lambda () (&sk~1622177385~7655 &e~1622177385~7663)) &fk~1622177385~7656)) &fk~1622177385~7656) (&fk~1622177385~7656))) (cdr &x~1622177385~7643) (lambda (&e~1622177385~7671) (&sk~1622177385~7644 &x~1622177385~7652 &e~1622177385~7671)) &fk~1622177385~7645)) &fk~1622177385~7645) (&fk~1622177385~7645))) (car &x~1622177385~7634) (lambda &car-vars~1622177385~7673 (&loop~1622177385~7626 (cdr &x~1622177385~7634) (cons &car-vars~1622177385~7673 &result~1622177385~7635))) &match-tail~1622177385~7636)) (begin (&fk~1622177385~7620))))) ex:undefined)))) ex:undefined) &x~1622177385~7618 (quote ()))) (car &x~1622177385~7613) (lambda (&x~1622177385~7703 &e~1622177385~7704) ((lambda (&x~1622177385~7706 &sk~1622177385~7707 &fk~1622177385~7708) (((lambda (&loop~1622177385~7714) ((lambda (&temp~1622177385~7717) (set! &loop~1622177385~7714 &temp~1622177385~7717) ((lambda () &loop~1622177385~7714))) (lambda (&x~1622177385~7722 &result~1622177385~7723) ((lambda (&match-tail~1622177385~7724) (set! &match-tail~1622177385~7724 (lambda () ((lambda (&x~1622177385~7742 &sk~1622177385~7743 &fk~1622177385~7744) (if (null? &x~1622177385~7742) (&sk~1622177385~7743) (&fk~1622177385~7744))) &x~1622177385~7722 (lambda () (apply &sk~1622177385~7707 (if (null? &result~1622177385~7723) (map (lambda (&ignore~1622177385~7749) (quote ())) (quote (body))) (apply map list (reverse &result~1622177385~7723))))) (lambda () ((lambda (&x~1622177385~7757 &sk~1622177385~7758 &fk~1622177385~7759) (&sk~1622177385~7758)) &x~1622177385~7722 (lambda () (&fk~1622177385~7708)) (lambda () (ex:invalid-form &x~1622177385~7722))))))) (if (null? &x~1622177385~7722) (begin (&match-tail~1622177385~7724)) (if (pair? &x~1622177385~7722) (begin ((lambda (&x~1622177385~7731 &sk~1622177385~7732 &fk~1622177385~7733) (&sk~1622177385~7732 &x~1622177385~7731)) (car &x~1622177385~7722) (lambda &car-vars~1622177385~7735 (&loop~1622177385~7714 (cdr &x~1622177385~7722) (cons &car-vars~1622177385~7735 &result~1622177385~7723))) &match-tail~1622177385~7724)) (begin (&fk~1622177385~7708))))) ex:undefined)))) ex:undefined) &x~1622177385~7706 (quote ()))) (cdr &x~1622177385~7613) (lambda (&body~1622177385~7765) (&sk~1622177385~7614 &x~1622177385~7703 &e~1622177385~7704 &body~1622177385~7765)) &fk~1622177385~7615)) &fk~1622177385~7615) (&fk~1622177385~7615))) (cdr &x~1622177385~7603) (lambda (&x~1622177385~7767 &e~1622177385~7768 &body~1622177385~7769) (&sk~1622177385~7604 &x~1622177385~7767 &e~1622177385~7768 &body~1622177385~7769)) &fk~1622177385~7605)) &fk~1622177385~7605) (&fk~1622177385~7605))) &t~1622177385~7578 (lambda (&x~1622177385~7771 &e~1622177385~7772 &body~1622177385~7773) (let ((x (&formals?~1622177385~2174 &x~1622177385~7771))) (if x x (&invalid-form~1622177385~2243 &t~1622177385~7578))) (values &x~1622177385~7771 &e~1622177385~7772 &body~1622177385~7773)) (lambda () (ex:invalid-form &t~1622177385~7578))))) (set! &check-expression-sequence~1622177385~2182 (lambda (&body-type~1622177385~7569 &type~1622177385~7570 &form~1622177385~7571) (if (eq? &body-type~1622177385~7569 (quote expression-sequence)) (if (memq &type~1622177385~7570 (quote (import program library define define-syntax))) (&syntax-violation~1622177385~2219 &type~1622177385~7570 "Invalid form in expression sequence" &form~1622177385~7571) #f) #f))) (set! &check-toplevel~1622177385~2183 (lambda (&body-type~1622177385~7560 &type~1622177385~7561 &form~1622177385~7562) (if (not (eq? &body-type~1622177385~7560 (quote toplevel))) (if (memq &type~1622177385~7561 (quote (import program library))) (&syntax-violation~1622177385~2219 &type~1622177385~7561 "Expression may only occur at toplevel" &form~1622177385~7562) #f) #f))) (set! &check-valid-definition~1622177385~2184 (lambda (&id~1622177385~7543 &common-env~1622177385~7544 &body-type~1622177385~7545 &form~1622177385~7546 &forms~1622177385~7547 &type~1622177385~7548) (if (not (eq? &body-type~1622177385~7545 (quote toplevel))) (if (&duplicate?~1622177385~2141 &id~1622177385~7543 &common-env~1622177385~7544) (&syntax-violation~1622177385~2219 &type~1622177385~7548 "Redefinition of identifier in body" &form~1622177385~7546 &id~1622177385~7543) #f) #f) (&check-used~1622177385~2197 &id~1622177385~7543 &body-type~1622177385~7545 &form~1622177385~7546) (if (not (memq &body-type~1622177385~7545 (quote (toplevel program)))) (if (not (null? &forms~1622177385~7547)) (if (not (symbol? (car (car &forms~1622177385~7547)))) (&syntax-violation~1622177385~2219 &type~1622177385~7548 "Definitions may not follow expressions in a body" &form~1622177385~7546) #f) #f) #f))) (set! &check-expression-body~1622177385~2185 (lambda (&body-type~1622177385~7533 &forms~1622177385~7534 &body-forms~1622177385~7535) (if (eq? &body-type~1622177385~7533 (quote lambda)) (if (let ((x (null? &forms~1622177385~7534))) (if x x (symbol? (caar &forms~1622177385~7534)))) (&syntax-violation~1622177385~2219 &body-type~1622177385~7533 "Body must be nonempty and end with an expression" &body-forms~1622177385~7535) #f) #f))) (set! &expand-syntax-case~1622177385~2186 (lambda (&exp~1622177385~7329) ((lambda (&literal?~1622177385~7330) (set! &literal?~1622177385~7330 (lambda (&x~1622177385~7525) (if (&identifier?~1622177385~2110 &x~1622177385~7525) (not (let ((x (&free=?~1622177385~2119 &x~1622177385~7525 (quote _)))) (if x x (&free=?~1622177385~2119 &x~1622177385~7525 (quote ...))))) #f))) ((lambda (&x~1622177385~7353 &sk~1622177385~7354 &fk~1622177385~7355) (if (pair? &x~1622177385~7353) ((lambda (&x~1622177385~7358 &sk~1622177385~7359 &fk~1622177385~7360) (&sk~1622177385~7359)) (car &x~1622177385~7353) (lambda () ((lambda (&x~1622177385~7363 &sk~1622177385~7364 &fk~1622177385~7365) (if (pair? &x~1622177385~7363) ((lambda (&x~1622177385~7368 &sk~1622177385~7369 &fk~1622177385~7370) (&sk~1622177385~7369 &x~1622177385~7368)) (car &x~1622177385~7363) (lambda (&e~1622177385~7372) ((lambda (&x~1622177385~7374 &sk~1622177385~7375 &fk~1622177385~7376) (if (pair? &x~1622177385~7374) ((lambda (&x~1622177385~7379 &sk~1622177385~7380 &fk~1622177385~7381) (((lambda (&loop~1622177385~7387) ((lambda (&temp~1622177385~7390) (set! &loop~1622177385~7387 &temp~1622177385~7390) ((lambda () &loop~1622177385~7387))) (lambda (&x~1622177385~7395 &result~1622177385~7396) ((lambda (&match-tail~1622177385~7397) (set! &match-tail~1622177385~7397 (lambda () ((lambda (&x~1622177385~7420 &sk~1622177385~7421 &fk~1622177385~7422) (if (null? &x~1622177385~7420) (&sk~1622177385~7421) (&fk~1622177385~7422))) &x~1622177385~7395 (lambda () (apply &sk~1622177385~7380 (if (null? &result~1622177385~7396) (map (lambda (&ignore~1622177385~7427) (quote ())) (quote (literals))) (apply map list (reverse &result~1622177385~7396))))) (lambda () ((lambda (&x~1622177385~7435 &sk~1622177385~7436 &fk~1622177385~7437) (&sk~1622177385~7436)) &x~1622177385~7395 (lambda () (&fk~1622177385~7381)) (lambda () (ex:invalid-form &x~1622177385~7395))))))) (if (null? &x~1622177385~7395) (begin (&match-tail~1622177385~7397)) (if (pair? &x~1622177385~7395) (begin ((lambda (&x~1622177385~7404 &sk~1622177385~7405 &fk~1622177385~7406) (if (&literal?~1622177385~7330 &x~1622177385~7404) ((lambda (&x~1622177385~7409 &sk~1622177385~7410 &fk~1622177385~7411) (&sk~1622177385~7410 &x~1622177385~7409)) &x~1622177385~7404 &sk~1622177385~7405 &fk~1622177385~7406) (&fk~1622177385~7406))) (car &x~1622177385~7395) (lambda &car-vars~1622177385~7413 (&loop~1622177385~7387 (cdr &x~1622177385~7395) (cons &car-vars~1622177385~7413 &result~1622177385~7396))) &match-tail~1622177385~7397)) (begin (&fk~1622177385~7381))))) ex:undefined)))) ex:undefined) &x~1622177385~7379 (quote ()))) (car &x~1622177385~7374) (lambda (&literals~1622177385~7443) ((lambda (&x~1622177385~7445 &sk~1622177385~7446 &fk~1622177385~7447) (((lambda (&loop~1622177385~7453) ((lambda (&temp~1622177385~7456) (set! &loop~1622177385~7453 &temp~1622177385~7456) ((lambda () &loop~1622177385~7453))) (lambda (&x~1622177385~7461 &result~1622177385~7462) ((lambda (&match-tail~1622177385~7463) (set! &match-tail~1622177385~7463 (lambda () ((lambda (&x~1622177385~7481 &sk~1622177385~7482 &fk~1622177385~7483) (if (null? &x~1622177385~7481) (&sk~1622177385~7482) (&fk~1622177385~7483))) &x~1622177385~7461 (lambda () (apply &sk~1622177385~7446 (if (null? &result~1622177385~7462) (map (lambda (&ignore~1622177385~7488) (quote ())) (quote (clauses))) (apply map list (reverse &result~1622177385~7462))))) (lambda () ((lambda (&x~1622177385~7496 &sk~1622177385~7497 &fk~1622177385~7498) (&sk~1622177385~7497)) &x~1622177385~7461 (lambda () (&fk~1622177385~7447)) (lambda () (ex:invalid-form &x~1622177385~7461))))))) (if (null? &x~1622177385~7461) (begin (&match-tail~1622177385~7463)) (if (pair? &x~1622177385~7461) (begin ((lambda (&x~1622177385~7470 &sk~1622177385~7471 &fk~1622177385~7472) (&sk~1622177385~7471 &x~1622177385~7470)) (car &x~1622177385~7461) (lambda &car-vars~1622177385~7474 (&loop~1622177385~7453 (cdr &x~1622177385~7461) (cons &car-vars~1622177385~7474 &result~1622177385~7462))) &match-tail~1622177385~7463)) (begin (&fk~1622177385~7447))))) ex:undefined)))) ex:undefined) &x~1622177385~7445 (quote ()))) (cdr &x~1622177385~7374) (lambda (&clauses~1622177385~7504) (&sk~1622177385~7375 &literals~1622177385~7443 &clauses~1622177385~7504)) &fk~1622177385~7376)) &fk~1622177385~7376) (&fk~1622177385~7376))) (cdr &x~1622177385~7363) (lambda (&literals~1622177385~7506 &clauses~1622177385~7507) (&sk~1622177385~7364 &e~1622177385~7372 &literals~1622177385~7506 &clauses~1622177385~7507)) &fk~1622177385~7365)) &fk~1622177385~7365) (&fk~1622177385~7365))) (cdr &x~1622177385~7353) (lambda (&e~1622177385~7509 &literals~1622177385~7510 &clauses~1622177385~7511) (&sk~1622177385~7354 &e~1622177385~7509 &literals~1622177385~7510 &clauses~1622177385~7511)) &fk~1622177385~7355)) &fk~1622177385~7355) (&fk~1622177385~7355))) &exp~1622177385~7329 (lambda (&e~1622177385~7513 &literals~1622177385~7514 &clauses~1622177385~7515) ((lambda (&input~1622177385~7518) (list (quote let) (list (list &input~1622177385~7518 (&expand~1622177385~2162 &e~1622177385~7513))) (&process-clauses~1622177385~2187 &clauses~1622177385~7515 &input~1622177385~7518 &literals~1622177385~7514))) (&generate-guid~1622177385~2120 (quote input)))) (lambda () (ex:invalid-form &exp~1622177385~7329)))) ex:undefined))) (set! &process-clauses~1622177385~2187 (lambda (&clauses~1622177385~6474 &input~1622177385~6475 &literals~1622177385~6476) ((lambda (&process-clause~1622177385~6480 &pattern-vars~1622177385~6479 &process-match~1622177385~6478 &literal?~1622177385~6477) (set! &literal?~1622177385~6477 (lambda (&pattern~1622177385~7323) (if (&identifier?~1622177385~2110 &pattern~1622177385~7323) (memp (lambda (&x~1622177385~7327) (&bound-identifier=?~1622177385~2117 &x~1622177385~7327 &pattern~1622177385~7323)) &literals~1622177385~6476) #f))) (set! &process-match~1622177385~6478 (lambda (&input~1622177385~6949 &pattern~1622177385~6950 &sk~1622177385~6951 &fk~1622177385~6952) (if (not (symbol? &input~1622177385~6949)) ((lambda (&temp~1622177385~6956) (list (quote let) (list (list &temp~1622177385~6956 &input~1622177385~6949)) (&process-match~1622177385~6478 &temp~1622177385~6956 &pattern~1622177385~6950 &sk~1622177385~6951 &fk~1622177385~6952))) (&generate-guid~1622177385~2120 (quote temp))) ((lambda (&x~1622177385~6964 &sk~1622177385~6965 &fk~1622177385~6966) (if (ex:free=? &x~1622177385~6964 (quote _)) (&sk~1622177385~6965) (&fk~1622177385~6966))) &pattern~1622177385~6950 (lambda () &sk~1622177385~6951) (lambda () ((lambda (&x~1622177385~6975 &sk~1622177385~6976 &fk~1622177385~6977) (if (ex:free=? &x~1622177385~6975 (quote ...)) (&sk~1622177385~6976) (&fk~1622177385~6977))) &pattern~1622177385~6950 (lambda () (&syntax-violation~1622177385~2219 (quote syntax-case) "Invalid use of ellipses" &pattern~1622177385~6950)) (lambda () ((lambda (&x~1622177385~6987 &sk~1622177385~6988 &fk~1622177385~6989) (if (null? &x~1622177385~6987) (&sk~1622177385~6988) (&fk~1622177385~6989))) &pattern~1622177385~6950 (lambda () (list (quote if) (list (quote null?) &input~1622177385~6949) &sk~1622177385~6951 &fk~1622177385~6952)) (lambda () ((lambda (&x~1622177385~7002 &sk~1622177385~7003 &fk~1622177385~7004) (if (&literal?~1622177385~6477 &x~1622177385~7002) ((lambda (&x~1622177385~7007 &sk~1622177385~7008 &fk~1622177385~7009) (&sk~1622177385~7008 &x~1622177385~7007)) &x~1622177385~7002 &sk~1622177385~7003 &fk~1622177385~7004) (&fk~1622177385~7004))) &pattern~1622177385~6950 (lambda (&id~1622177385~7011) (list (quote if) (list (quote and) (list (quote ex:identifier?) &input~1622177385~6949) (list (quote ex:free-identifier=?) &input~1622177385~6949 (&syntax-reflect~1622177385~2146 &id~1622177385~7011))) &sk~1622177385~6951 &fk~1622177385~6952)) (lambda () ((lambda (&x~1622177385~7024 &sk~1622177385~7025 &fk~1622177385~7026) (if (&identifier?~1622177385~2110 &x~1622177385~7024) ((lambda (&x~1622177385~7029 &sk~1622177385~7030 &fk~1622177385~7031) (&sk~1622177385~7030 &x~1622177385~7029)) &x~1622177385~7024 &sk~1622177385~7025 &fk~1622177385~7026) (&fk~1622177385~7026))) &pattern~1622177385~6950 (lambda (&id~1622177385~7033) (list (quote let) (list (list (&binding-name~1622177385~2125 (&binding~1622177385~2131 &id~1622177385~7033)) &input~1622177385~6949)) &sk~1622177385~6951)) (lambda () ((lambda (&x~1622177385~7049 &sk~1622177385~7050 &fk~1622177385~7051) (if (pair? &x~1622177385~7049) ((lambda (&x~1622177385~7054 &sk~1622177385~7055 &fk~1622177385~7056) (&sk~1622177385~7055 &x~1622177385~7054)) (car &x~1622177385~7049) (lambda (&p~1622177385~7058) ((lambda (&x~1622177385~7060 &sk~1622177385~7061 &fk~1622177385~7062) (if (pair? &x~1622177385~7060) ((lambda (&x~1622177385~7065 &sk~1622177385~7066 &fk~1622177385~7067) (if (ex:free=? &x~1622177385~7065 (quote ...)) (&sk~1622177385~7066) (&fk~1622177385~7067))) (car &x~1622177385~7060) (lambda () ((lambda (&x~1622177385~7072 &sk~1622177385~7073 &fk~1622177385~7074) (if (null? &x~1622177385~7072) (&sk~1622177385~7073) (&fk~1622177385~7074))) (cdr &x~1622177385~7060) (lambda () (&sk~1622177385~7061)) &fk~1622177385~7062)) &fk~1622177385~7062) (&fk~1622177385~7062))) (cdr &x~1622177385~7049) (lambda () (&sk~1622177385~7050 &p~1622177385~7058)) &fk~1622177385~7051)) &fk~1622177385~7051) (&fk~1622177385~7051))) &pattern~1622177385~6950 (lambda (&p~1622177385~7079) ((lambda (&mapped-pvars~1622177385~7082) (if (if (&identifier?~1622177385~2110 &p~1622177385~7079) (= (length &mapped-pvars~1622177385~7082) 1) #f) (list (quote if) (list (quote list?) &input~1622177385~6949) (list (quote let) (list (list (car &mapped-pvars~1622177385~7082) &input~1622177385~6949)) &sk~1622177385~6951) &fk~1622177385~6952) ((lambda (&columns~1622177385~7092 &rest~1622177385~7093) (list (quote ex:map-while) (list (quote lambda) (list &input~1622177385~6949) (&process-match~1622177385~6478 &input~1622177385~6949 &p~1622177385~7079 (cons (quote list) &mapped-pvars~1622177385~7082) #f)) &input~1622177385~6949 (list (quote lambda) (list &columns~1622177385~7092 &rest~1622177385~7093) (list (quote if) (list (quote null?) &rest~1622177385~7093) (list (quote apply) (list (quote lambda) &mapped-pvars~1622177385~7082 &sk~1622177385~6951) (list (quote if) (list (quote null?) &columns~1622177385~7092) (list (quote quote) (map (lambda (&ignore~1622177385~7108) (quote ())) &mapped-pvars~1622177385~7082)) (list (quote apply) (quote map) (quote list) &columns~1622177385~7092))) &fk~1622177385~6952)))) (&generate-guid~1622177385~2120 (quote cols)) (&generate-guid~1622177385~2120 (quote rest))))) (map (lambda (&pvar~1622177385~7116) (&binding-name~1622177385~2125 (&binding~1622177385~2131 &pvar~1622177385~7116))) (map car (&pattern-vars~1622177385~6479 &p~1622177385~7079 0))))) (lambda () ((lambda (&x~1622177385~7130 &sk~1622177385~7131 &fk~1622177385~7132) (if (pair? &x~1622177385~7130) ((lambda (&x~1622177385~7135 &sk~1622177385~7136 &fk~1622177385~7137) (&sk~1622177385~7136 &x~1622177385~7135)) (car &x~1622177385~7130) (lambda (&p~1622177385~7139) ((lambda (&x~1622177385~7141 &sk~1622177385~7142 &fk~1622177385~7143) (if (pair? &x~1622177385~7141) ((lambda (&x~1622177385~7146 &sk~1622177385~7147 &fk~1622177385~7148) (if (ex:free=? &x~1622177385~7146 (quote ...)) (&sk~1622177385~7147) (&fk~1622177385~7148))) (car &x~1622177385~7141) (lambda () ((lambda (&x~1622177385~7153 &sk~1622177385~7154 &fk~1622177385~7155) (&sk~1622177385~7154 &x~1622177385~7153)) (cdr &x~1622177385~7141) (lambda (&tail~1622177385~7157) (&sk~1622177385~7142 &tail~1622177385~7157)) &fk~1622177385~7143)) &fk~1622177385~7143) (&fk~1622177385~7143))) (cdr &x~1622177385~7130) (lambda (&tail~1622177385~7159) (&sk~1622177385~7131 &p~1622177385~7139 &tail~1622177385~7159)) &fk~1622177385~7132)) &fk~1622177385~7132) (&fk~1622177385~7132))) &pattern~1622177385~6950 (lambda (&p~1622177385~7161 &tail~1622177385~7162) ((lambda (&tail-length~1622177385~7165) (list (quote if) (list (quote >=) (list (quote ex:dotted-length) &input~1622177385~6949) &tail-length~1622177385~7165) (&process-match~1622177385~6478 (list (quote ex:dotted-butlast) &input~1622177385~6949 &tail-length~1622177385~7165) (list &p~1622177385~7161 (cadr &pattern~1622177385~6950)) (&process-match~1622177385~6478 (list (quote ex:dotted-last) &input~1622177385~6949 &tail-length~1622177385~7165) &tail~1622177385~7162 &sk~1622177385~6951 &fk~1622177385~6952) &fk~1622177385~6952) &fk~1622177385~6952)) (&dotted-length~1622177385~2233 &tail~1622177385~7162))) (lambda () ((lambda (&x~1622177385~7184 &sk~1622177385~7185 &fk~1622177385~7186) (if (pair? &x~1622177385~7184) ((lambda (&x~1622177385~7189 &sk~1622177385~7190 &fk~1622177385~7191) (&sk~1622177385~7190 &x~1622177385~7189)) (car &x~1622177385~7184) (lambda (&p1~1622177385~7193) ((lambda (&x~1622177385~7195 &sk~1622177385~7196 &fk~1622177385~7197) (&sk~1622177385~7196 &x~1622177385~7195)) (cdr &x~1622177385~7184) (lambda (&p2~1622177385~7199) (&sk~1622177385~7185 &p1~1622177385~7193 &p2~1622177385~7199)) &fk~1622177385~7186)) &fk~1622177385~7186) (&fk~1622177385~7186))) &pattern~1622177385~6950 (lambda (&p1~1622177385~7201 &p2~1622177385~7202) (list (quote if) (list (quote pair?) &input~1622177385~6949) (&process-match~1622177385~6478 (list (quote car) &input~1622177385~6949) &p1~1622177385~7201 (&process-match~1622177385~6478 (list (quote cdr) &input~1622177385~6949) &p2~1622177385~7202 &sk~1622177385~6951 &fk~1622177385~6952) &fk~1622177385~6952) &fk~1622177385~6952)) (lambda () ((lambda (&x~1622177385~7219 &sk~1622177385~7220 &fk~1622177385~7221) (if (vector? &x~1622177385~7219) ((lambda (&x~1622177385~7224 &sk~1622177385~7225 &fk~1622177385~7226) (((lambda (&loop~1622177385~7232) ((lambda (&temp~1622177385~7235) (set! &loop~1622177385~7232 &temp~1622177385~7235) ((lambda () &loop~1622177385~7232))) (lambda (&x~1622177385~7240 &result~1622177385~7241) ((lambda (&match-tail~1622177385~7242) (set! &match-tail~1622177385~7242 (lambda () ((lambda (&x~1622177385~7260 &sk~1622177385~7261 &fk~1622177385~7262) (if (null? &x~1622177385~7260) (&sk~1622177385~7261) (&fk~1622177385~7262))) &x~1622177385~7240 (lambda () (apply &sk~1622177385~7225 (if (null? &result~1622177385~7241) (map (lambda (&ignore~1622177385~7267) (quote ())) (quote (ps))) (apply map list (reverse &result~1622177385~7241))))) (lambda () ((lambda (&x~1622177385~7275 &sk~1622177385~7276 &fk~1622177385~7277) (&sk~1622177385~7276)) &x~1622177385~7240 (lambda () (&fk~1622177385~7226)) (lambda () (ex:invalid-form &x~1622177385~7240))))))) (if (null? &x~1622177385~7240) (begin (&match-tail~1622177385~7242)) (if (pair? &x~1622177385~7240) (begin ((lambda (&x~1622177385~7249 &sk~1622177385~7250 &fk~1622177385~7251) (&sk~1622177385~7250 &x~1622177385~7249)) (car &x~1622177385~7240) (lambda &car-vars~1622177385~7253 (&loop~1622177385~7232 (cdr &x~1622177385~7240) (cons &car-vars~1622177385~7253 &result~1622177385~7241))) &match-tail~1622177385~7242)) (begin (&fk~1622177385~7226))))) ex:undefined)))) ex:undefined) &x~1622177385~7224 (quote ()))) (vector->list &x~1622177385~7219) &sk~1622177385~7220 &fk~1622177385~7221) (&fk~1622177385~7221))) &pattern~1622177385~6950 (lambda (&ps~1622177385~7283) (list (quote if) (list (quote vector?) &input~1622177385~6949) (&process-match~1622177385~6478 (list (quote vector->list) &input~1622177385~6949) &ps~1622177385~7283 &sk~1622177385~6951 &fk~1622177385~6952) &fk~1622177385~6952)) (lambda () ((lambda (&x~1622177385~7296 &sk~1622177385~7297 &fk~1622177385~7298) (if (symbol? &x~1622177385~7296) ((lambda (&x~1622177385~7301 &sk~1622177385~7302 &fk~1622177385~7303) (&sk~1622177385~7302)) &x~1622177385~7296 &sk~1622177385~7297 &fk~1622177385~7298) (&fk~1622177385~7298))) &pattern~1622177385~6950 (lambda () (&syntax-violation~1622177385~2219 (quote syntax-case) "Symbol object may not appear in pattern" &pattern~1622177385~6950)) (lambda () ((lambda (&x~1622177385~7311 &sk~1622177385~7312 &fk~1622177385~7313) (&sk~1622177385~7312 &x~1622177385~7311)) &pattern~1622177385~6950 (lambda (&other~1622177385~7315) (list (quote if) (list (quote equal?) &input~1622177385~6949 (list (quote quote) &other~1622177385~7315)) &sk~1622177385~6951 &fk~1622177385~6952)) (lambda () (ex:invalid-form &pattern~1622177385~6950)))))))))))))))))))))))))) (set! &pattern-vars~1622177385~6479 (lambda (&pattern~1622177385~6729 &level~1622177385~6730) ((lambda (&x~1622177385~6743 &sk~1622177385~6744 &fk~1622177385~6745) (if (pair? &x~1622177385~6743) ((lambda (&x~1622177385~6748 &sk~1622177385~6749 &fk~1622177385~6750) (&sk~1622177385~6749 &x~1622177385~6748)) (car &x~1622177385~6743) (lambda (&p~1622177385~6752) ((lambda (&x~1622177385~6754 &sk~1622177385~6755 &fk~1622177385~6756) (if (pair? &x~1622177385~6754) ((lambda (&x~1622177385~6759 &sk~1622177385~6760 &fk~1622177385~6761) (if (ex:free=? &x~1622177385~6759 (quote ...)) (&sk~1622177385~6760) (&fk~1622177385~6761))) (car &x~1622177385~6754) (lambda () ((lambda (&x~1622177385~6766 &sk~1622177385~6767 &fk~1622177385~6768) (&sk~1622177385~6767 &x~1622177385~6766)) (cdr &x~1622177385~6754) (lambda (&tail~1622177385~6770) (&sk~1622177385~6755 &tail~1622177385~6770)) &fk~1622177385~6756)) &fk~1622177385~6756) (&fk~1622177385~6756))) (cdr &x~1622177385~6743) (lambda (&tail~1622177385~6772) (&sk~1622177385~6744 &p~1622177385~6752 &tail~1622177385~6772)) &fk~1622177385~6745)) &fk~1622177385~6745) (&fk~1622177385~6745))) &pattern~1622177385~6729 (lambda (&p~1622177385~6774 &tail~1622177385~6775) (append (&pattern-vars~1622177385~6479 &p~1622177385~6774 (+ &level~1622177385~6730 1)) (&pattern-vars~1622177385~6479 &tail~1622177385~6775 &level~1622177385~6730))) (lambda () ((lambda (&x~1622177385~6785 &sk~1622177385~6786 &fk~1622177385~6787) (if (pair? &x~1622177385~6785) ((lambda (&x~1622177385~6790 &sk~1622177385~6791 &fk~1622177385~6792) (&sk~1622177385~6791 &x~1622177385~6790)) (car &x~1622177385~6785) (lambda (&p1~1622177385~6794) ((lambda (&x~1622177385~6796 &sk~1622177385~6797 &fk~1622177385~6798) (&sk~1622177385~6797 &x~1622177385~6796)) (cdr &x~1622177385~6785) (lambda (&p2~1622177385~6800) (&sk~1622177385~6786 &p1~1622177385~6794 &p2~1622177385~6800)) &fk~1622177385~6787)) &fk~1622177385~6787) (&fk~1622177385~6787))) &pattern~1622177385~6729 (lambda (&p1~1622177385~6802 &p2~1622177385~6803) (append (&pattern-vars~1622177385~6479 &p1~1622177385~6802 &level~1622177385~6730) (&pattern-vars~1622177385~6479 &p2~1622177385~6803 &level~1622177385~6730))) (lambda () ((lambda (&x~1622177385~6813 &sk~1622177385~6814 &fk~1622177385~6815) (if (vector? &x~1622177385~6813) ((lambda (&x~1622177385~6818 &sk~1622177385~6819 &fk~1622177385~6820) (((lambda (&loop~1622177385~6826) ((lambda (&temp~1622177385~6829) (set! &loop~1622177385~6826 &temp~1622177385~6829) ((lambda () &loop~1622177385~6826))) (lambda (&x~1622177385~6834 &result~1622177385~6835) ((lambda (&match-tail~1622177385~6836) (set! &match-tail~1622177385~6836 (lambda () ((lambda (&x~1622177385~6854 &sk~1622177385~6855 &fk~1622177385~6856) (if (null? &x~1622177385~6854) (&sk~1622177385~6855) (&fk~1622177385~6856))) &x~1622177385~6834 (lambda () (apply &sk~1622177385~6819 (if (null? &result~1622177385~6835) (map (lambda (&ignore~1622177385~6861) (quote ())) (quote (ps))) (apply map list (reverse &result~1622177385~6835))))) (lambda () ((lambda (&x~1622177385~6869 &sk~1622177385~6870 &fk~1622177385~6871) (&sk~1622177385~6870)) &x~1622177385~6834 (lambda () (&fk~1622177385~6820)) (lambda () (ex:invalid-form &x~1622177385~6834))))))) (if (null? &x~1622177385~6834) (begin (&match-tail~1622177385~6836)) (if (pair? &x~1622177385~6834) (begin ((lambda (&x~1622177385~6843 &sk~1622177385~6844 &fk~1622177385~6845) (&sk~1622177385~6844 &x~1622177385~6843)) (car &x~1622177385~6834) (lambda &car-vars~1622177385~6847 (&loop~1622177385~6826 (cdr &x~1622177385~6834) (cons &car-vars~1622177385~6847 &result~1622177385~6835))) &match-tail~1622177385~6836)) (begin (&fk~1622177385~6820))))) ex:undefined)))) ex:undefined) &x~1622177385~6818 (quote ()))) (vector->list &x~1622177385~6813) &sk~1622177385~6814 &fk~1622177385~6815) (&fk~1622177385~6815))) &pattern~1622177385~6729 (lambda (&ps~1622177385~6877) (&pattern-vars~1622177385~6479 &ps~1622177385~6877 &level~1622177385~6730)) (lambda () ((lambda (&x~1622177385~6883 &sk~1622177385~6884 &fk~1622177385~6885) (if (ex:free=? &x~1622177385~6883 (quote ...)) (&sk~1622177385~6884) (&fk~1622177385~6885))) &pattern~1622177385~6729 (lambda () (quote ())) (lambda () ((lambda (&x~1622177385~6895 &sk~1622177385~6896 &fk~1622177385~6897) (if (ex:free=? &x~1622177385~6895 (quote _)) (&sk~1622177385~6896) (&fk~1622177385~6897))) &pattern~1622177385~6729 (lambda () (quote ())) (lambda () ((lambda (&x~1622177385~6909 &sk~1622177385~6910 &fk~1622177385~6911) (if (&literal?~1622177385~6477 &x~1622177385~6909) ((lambda (&x~1622177385~6914 &sk~1622177385~6915 &fk~1622177385~6916) (&sk~1622177385~6915)) &x~1622177385~6909 &sk~1622177385~6910 &fk~1622177385~6911) (&fk~1622177385~6911))) &pattern~1622177385~6729 (lambda () (quote ())) (lambda () ((lambda (&x~1622177385~6926 &sk~1622177385~6927 &fk~1622177385~6928) (if (&identifier?~1622177385~2110 &x~1622177385~6926) ((lambda (&x~1622177385~6931 &sk~1622177385~6932 &fk~1622177385~6933) (&sk~1622177385~6932 &x~1622177385~6931)) &x~1622177385~6926 &sk~1622177385~6927 &fk~1622177385~6928) (&fk~1622177385~6928))) &pattern~1622177385~6729 (lambda (&id~1622177385~6935) (list (cons &id~1622177385~6935 &level~1622177385~6730))) (lambda () ((lambda (&x~1622177385~6941 &sk~1622177385~6942 &fk~1622177385~6943) (&sk~1622177385~6942)) &pattern~1622177385~6729 (lambda () (quote ())) (lambda () (ex:invalid-form &pattern~1622177385~6729))))))))))))))))))) (set! &process-clause~1622177385~6480 (lambda (&clause~1622177385~6589 &input~1622177385~6590 &fk~1622177385~6591) ((lambda (&x~1622177385~6600 &sk~1622177385~6601 &fk~1622177385~6602) (if (pair? &x~1622177385~6600) ((lambda (&x~1622177385~6605 &sk~1622177385~6606 &fk~1622177385~6607) (&sk~1622177385~6606 &x~1622177385~6605)) (car &x~1622177385~6600) (lambda (&pattern~1622177385~6609) ((lambda (&x~1622177385~6611 &sk~1622177385~6612 &fk~1622177385~6613) (&sk~1622177385~6612 &x~1622177385~6611)) (cdr &x~1622177385~6600) (lambda (&rest~1622177385~6615) (&sk~1622177385~6601 &pattern~1622177385~6609 &rest~1622177385~6615)) &fk~1622177385~6602)) &fk~1622177385~6602) (&fk~1622177385~6602))) &clause~1622177385~6589 (lambda (&pattern~1622177385~6617 &rest~1622177385~6618) ((lambda (&pvars~1622177385~6621) (&check-set?~1622177385~2237 (map car &pvars~1622177385~6621) &bound-identifier=?~1622177385~2117 (lambda (&dup~1622177385~6724) (&syntax-violation~1622177385~2219 (quote syntax-case) "Repeated pattern variable" &clause~1622177385~6589 &dup~1622177385~6724))) ((lambda (&mappings~1622177385~6624) ((lambda (&saved~1622177385~6628) (set! &*usage-env*~1622177385~2079 (&env-extend~1622177385~2138 &mappings~1622177385~6624 &*usage-env*~1622177385~2079)) (call-with-values (lambda () (&process-match~1622177385~6478 &input~1622177385~6590 &pattern~1622177385~6617 ((lambda (&x~1622177385~6639 &sk~1622177385~6640 &fk~1622177385~6641) (if (pair? &x~1622177385~6639) ((lambda (&x~1622177385~6644 &sk~1622177385~6645 &fk~1622177385~6646) (&sk~1622177385~6645 &x~1622177385~6644)) (car &x~1622177385~6639) (lambda (&template~1622177385~6648) ((lambda (&x~1622177385~6650 &sk~1622177385~6651 &fk~1622177385~6652) (if (null? &x~1622177385~6650) (&sk~1622177385~6651) (&fk~1622177385~6652))) (cdr &x~1622177385~6639) (lambda () (&sk~1622177385~6640 &template~1622177385~6648)) &fk~1622177385~6641)) &fk~1622177385~6641) (&fk~1622177385~6641))) &rest~1622177385~6618 (lambda (&template~1622177385~6656) (&expand~1622177385~2162 &template~1622177385~6656)) (lambda () ((lambda (&x~1622177385~6670 &sk~1622177385~6671 &fk~1622177385~6672) (if (pair? &x~1622177385~6670) ((lambda (&x~1622177385~6675 &sk~1622177385~6676 &fk~1622177385~6677) (&sk~1622177385~6676 &x~1622177385~6675)) (car &x~1622177385~6670) (lambda (&fender~1622177385~6679) ((lambda (&x~1622177385~6681 &sk~1622177385~6682 &fk~1622177385~6683) (if (pair? &x~1622177385~6681) ((lambda (&x~1622177385~6686 &sk~1622177385~6687 &fk~1622177385~6688) (&sk~1622177385~6687 &x~1622177385~6686)) (car &x~1622177385~6681) (lambda (&template~1622177385~6690) ((lambda (&x~1622177385~6692 &sk~1622177385~6693 &fk~1622177385~6694) (if (null? &x~1622177385~6692) (&sk~1622177385~6693) (&fk~1622177385~6694))) (cdr &x~1622177385~6681) (lambda () (&sk~1622177385~6682 &template~1622177385~6690)) &fk~1622177385~6683)) &fk~1622177385~6683) (&fk~1622177385~6683))) (cdr &x~1622177385~6670) (lambda (&template~1622177385~6698) (&sk~1622177385~6671 &fender~1622177385~6679 &template~1622177385~6698)) &fk~1622177385~6672)) &fk~1622177385~6672) (&fk~1622177385~6672))) &rest~1622177385~6618 (lambda (&fender~1622177385~6700 &template~1622177385~6701) (list (quote if) (&expand~1622177385~2162 &fender~1622177385~6700) (&expand~1622177385~2162 &template~1622177385~6701) &fk~1622177385~6591)) (lambda () ((lambda (&x~1622177385~6709 &sk~1622177385~6710 &fk~1622177385~6711) (&sk~1622177385~6710)) &rest~1622177385~6618 (lambda () (&syntax-violation~1622177385~2219 (quote syntax-case) "Invalid clause" &clause~1622177385~6589)) (lambda () (ex:invalid-form &rest~1622177385~6618))))))) &fk~1622177385~6591)) (lambda &results~1622177385~6717 (set! &*usage-env*~1622177385~2079 &saved~1622177385~6628) (apply values &results~1622177385~6717)))) &*usage-env*~1622177385~2079)) (map (lambda (&pvar~1622177385~6721) (&make-local-mapping~1622177385~2132 (quote pattern-variable) (car &pvar~1622177385~6721) (cdr &pvar~1622177385~6721))) &pvars~1622177385~6621))) (&pattern-vars~1622177385~6479 &pattern~1622177385~6617 0))) (lambda () (ex:invalid-form &clause~1622177385~6589))))) ((lambda (&x~1622177385~6485 &sk~1622177385~6486 &fk~1622177385~6487) (if (null? &x~1622177385~6485) (&sk~1622177385~6486) (&fk~1622177385~6487))) &clauses~1622177385~6474 (lambda () (list (quote ex:invalid-form) &input~1622177385~6475)) (lambda () ((lambda (&x~1622177385~6503 &sk~1622177385~6504 &fk~1622177385~6505) (if (pair? &x~1622177385~6503) ((lambda (&x~1622177385~6508 &sk~1622177385~6509 &fk~1622177385~6510) (&sk~1622177385~6509 &x~1622177385~6508)) (car &x~1622177385~6503) (lambda (&clause~1622177385~6512) ((lambda (&x~1622177385~6514 &sk~1622177385~6515 &fk~1622177385~6516) (((lambda (&loop~1622177385~6522) ((lambda (&temp~1622177385~6525) (set! &loop~1622177385~6522 &temp~1622177385~6525) ((lambda () &loop~1622177385~6522))) (lambda (&x~1622177385~6530 &result~1622177385~6531) ((lambda (&match-tail~1622177385~6532) (set! &match-tail~1622177385~6532 (lambda () ((lambda (&x~1622177385~6550 &sk~1622177385~6551 &fk~1622177385~6552) (if (null? &x~1622177385~6550) (&sk~1622177385~6551) (&fk~1622177385~6552))) &x~1622177385~6530 (lambda () (apply &sk~1622177385~6515 (if (null? &result~1622177385~6531) (map (lambda (&ignore~1622177385~6557) (quote ())) (quote (clauses))) (apply map list (reverse &result~1622177385~6531))))) (lambda () ((lambda (&x~1622177385~6565 &sk~1622177385~6566 &fk~1622177385~6567) (&sk~1622177385~6566)) &x~1622177385~6530 (lambda () (&fk~1622177385~6516)) (lambda () (ex:invalid-form &x~1622177385~6530))))))) (if (null? &x~1622177385~6530) (begin (&match-tail~1622177385~6532)) (if (pair? &x~1622177385~6530) (begin ((lambda (&x~1622177385~6539 &sk~1622177385~6540 &fk~1622177385~6541) (&sk~1622177385~6540 &x~1622177385~6539)) (car &x~1622177385~6530) (lambda &car-vars~1622177385~6543 (&loop~1622177385~6522 (cdr &x~1622177385~6530) (cons &car-vars~1622177385~6543 &result~1622177385~6531))) &match-tail~1622177385~6532)) (begin (&fk~1622177385~6516))))) ex:undefined)))) ex:undefined) &x~1622177385~6514 (quote ()))) (cdr &x~1622177385~6503) (lambda (&clauses~1622177385~6573) (&sk~1622177385~6504 &clause~1622177385~6512 &clauses~1622177385~6573)) &fk~1622177385~6505)) &fk~1622177385~6505) (&fk~1622177385~6505))) &clauses~1622177385~6474 (lambda (&clause~1622177385~6575 &clauses~1622177385~6576) ((lambda (&fail~1622177385~6579) (list (quote let) (list (list &fail~1622177385~6579 (list (quote lambda) (quote ()) (&process-clauses~1622177385~2187 &clauses~1622177385~6576 &input~1622177385~6475 &literals~1622177385~6476)))) (&process-clause~1622177385~6480 &clause~1622177385~6575 &input~1622177385~6475 (list &fail~1622177385~6579)))) (&generate-guid~1622177385~2120 (quote fail)))) (lambda () (ex:invalid-form &clauses~1622177385~6474)))))) ex:undefined ex:undefined ex:undefined ex:undefined))) (set! &expand-syntax~1622177385~2188 (lambda (&form~1622177385~6428) ((lambda (&x~1622177385~6441 &sk~1622177385~6442 &fk~1622177385~6443) (if (pair? &x~1622177385~6441) ((lambda (&x~1622177385~6446 &sk~1622177385~6447 &fk~1622177385~6448) (&sk~1622177385~6447)) (car &x~1622177385~6441) (lambda () ((lambda (&x~1622177385~6451 &sk~1622177385~6452 &fk~1622177385~6453) (if (pair? &x~1622177385~6451) ((lambda (&x~1622177385~6456 &sk~1622177385~6457 &fk~1622177385~6458) (&sk~1622177385~6457 &x~1622177385~6456)) (car &x~1622177385~6451) (lambda (&template~1622177385~6460) ((lambda (&x~1622177385~6462 &sk~1622177385~6463 &fk~1622177385~6464) (if (null? &x~1622177385~6462) (&sk~1622177385~6463) (&fk~1622177385~6464))) (cdr &x~1622177385~6451) (lambda () (&sk~1622177385~6452 &template~1622177385~6460)) &fk~1622177385~6453)) &fk~1622177385~6453) (&fk~1622177385~6453))) (cdr &x~1622177385~6441) (lambda (&template~1622177385~6468) (&sk~1622177385~6442 &template~1622177385~6468)) &fk~1622177385~6443)) &fk~1622177385~6443) (&fk~1622177385~6443))) &form~1622177385~6428 (lambda (&template~1622177385~6470) (&process-template~1622177385~2189 &template~1622177385~6470 0 #f)) (lambda () (ex:invalid-form &form~1622177385~6428))))) (set! &process-template~1622177385~2189 (lambda (&template~1622177385~6105 &dim~1622177385~6106 &ellipses-quoted?~1622177385~6107) ((lambda (&x~1622177385~6112 &sk~1622177385~6113 &fk~1622177385~6114) (if (ex:free=? &x~1622177385~6112 (quote ...)) (&sk~1622177385~6113) (&fk~1622177385~6114))) &template~1622177385~6105 (lambda () (if (not &ellipses-quoted?~1622177385~6107) (&syntax-violation~1622177385~2219 (quote syntax) "Invalid occurrence of ellipses in syntax template" &template~1622177385~6105)) (&syntax-reflect~1622177385~2146 &template~1622177385~6105)) (lambda () ((lambda (&x~1622177385~6127 &sk~1622177385~6128 &fk~1622177385~6129) (if (&identifier?~1622177385~2110 &x~1622177385~6127) ((lambda (&x~1622177385~6132 &sk~1622177385~6133 &fk~1622177385~6134) (&sk~1622177385~6133 &x~1622177385~6132)) &x~1622177385~6127 &sk~1622177385~6128 &fk~1622177385~6129) (&fk~1622177385~6129))) &template~1622177385~6105 (lambda (&id~1622177385~6136) ((lambda (&binding~1622177385~6139) ((lambda (&t~1622177385~6143) (if &t~1622177385~6143 ((lambda (&pdim~1622177385~6146) (if (<= &pdim~1622177385~6146 &dim~1622177385~6106) (begin (&check-binding-level~1622177385~2135 &id~1622177385~6136 &binding~1622177385~6139) (&register-use!~1622177385~2195 &id~1622177385~6136 &binding~1622177385~6139) (&binding-name~1622177385~2125 &binding~1622177385~6139)) (&syntax-violation~1622177385~2219 (quote syntax) "Template dimension error (too few ...'s?)" &id~1622177385~6136))) &t~1622177385~6143) (begin (&syntax-reflect~1622177385~2146 &id~1622177385~6136)))) (if &binding~1622177385~6139 (if (eq? (&binding-type~1622177385~2124 &binding~1622177385~6139) (quote pattern-variable)) (&binding-dimension~1622177385~2128 &binding~1622177385~6139) #f) #f))) (&binding~1622177385~2131 &id~1622177385~6136))) (lambda () ((lambda (&x~1622177385~6168 &sk~1622177385~6169 &fk~1622177385~6170) (if (pair? &x~1622177385~6168) ((lambda (&x~1622177385~6173 &sk~1622177385~6174 &fk~1622177385~6175) (if (ex:free=? &x~1622177385~6173 (quote ...)) (&sk~1622177385~6174) (&fk~1622177385~6175))) (car &x~1622177385~6168) (lambda () ((lambda (&x~1622177385~6180 &sk~1622177385~6181 &fk~1622177385~6182) (if (pair? &x~1622177385~6180) ((lambda (&x~1622177385~6185 &sk~1622177385~6186 &fk~1622177385~6187) (&sk~1622177385~6186 &x~1622177385~6185)) (car &x~1622177385~6180) (lambda (&p~1622177385~6189) ((lambda (&x~1622177385~6191 &sk~1622177385~6192 &fk~1622177385~6193) (if (null? &x~1622177385~6191) (&sk~1622177385~6192) (&fk~1622177385~6193))) (cdr &x~1622177385~6180) (lambda () (&sk~1622177385~6181 &p~1622177385~6189)) &fk~1622177385~6182)) &fk~1622177385~6182) (&fk~1622177385~6182))) (cdr &x~1622177385~6168) (lambda (&p~1622177385~6197) (&sk~1622177385~6169 &p~1622177385~6197)) &fk~1622177385~6170)) &fk~1622177385~6170) (&fk~1622177385~6170))) &template~1622177385~6105 (lambda (&p~1622177385~6199) (&process-template~1622177385~2189 &p~1622177385~6199 &dim~1622177385~6106 #t)) (lambda () ((lambda (&x~1622177385~6215 &sk~1622177385~6216 &fk~1622177385~6217) (if ((lambda (&_~1622177385~6220) (not &ellipses-quoted?~1622177385~6107)) &x~1622177385~6215) ((lambda (&x~1622177385~6222 &sk~1622177385~6223 &fk~1622177385~6224) (if (pair? &x~1622177385~6222) ((lambda (&x~1622177385~6227 &sk~1622177385~6228 &fk~1622177385~6229) (&sk~1622177385~6228 &x~1622177385~6227)) (car &x~1622177385~6222) (lambda (&t~1622177385~6231) ((lambda (&x~1622177385~6233 &sk~1622177385~6234 &fk~1622177385~6235) (if (pair? &x~1622177385~6233) ((lambda (&x~1622177385~6238 &sk~1622177385~6239 &fk~1622177385~6240) (if (ex:free=? &x~1622177385~6238 (quote ...)) (&sk~1622177385~6239) (&fk~1622177385~6240))) (car &x~1622177385~6233) (lambda () ((lambda (&x~1622177385~6245 &sk~1622177385~6246 &fk~1622177385~6247) (&sk~1622177385~6246 &x~1622177385~6245)) (cdr &x~1622177385~6233) (lambda (&tail~1622177385~6249) (&sk~1622177385~6234 &tail~1622177385~6249)) &fk~1622177385~6235)) &fk~1622177385~6235) (&fk~1622177385~6235))) (cdr &x~1622177385~6222) (lambda (&tail~1622177385~6251) (&sk~1622177385~6223 &t~1622177385~6231 &tail~1622177385~6251)) &fk~1622177385~6224)) &fk~1622177385~6224) (&fk~1622177385~6224))) &x~1622177385~6215 &sk~1622177385~6216 &fk~1622177385~6217) (&fk~1622177385~6217))) &template~1622177385~6105 (lambda (&t~1622177385~6253 &tail~1622177385~6254) ((lambda (&head~1622177385~6258) ((lambda (&vars~1622177385~6261) (if (null? &vars~1622177385~6261) (&syntax-violation~1622177385~2219 (quote syntax) "Too many ...'s" &template~1622177385~6105) ((lambda (&x~1622177385~6267) ((lambda (&gen~1622177385~6270) ((lambda (&gen~1622177385~6273) (if (null? (&segment-tail~1622177385~2193 &template~1622177385~6105)) &gen~1622177385~6273 (list (quote append) &gen~1622177385~6273 (&process-template~1622177385~2189 (&segment-tail~1622177385~2193 &template~1622177385~6105) &dim~1622177385~6106 &ellipses-quoted?~1622177385~6107)))) (if (> (&segment-depth~1622177385~2191 &template~1622177385~6105) 1) (list (quote apply) (quote append) &gen~1622177385~6270) &gen~1622177385~6270))) (if (equal? (list &x~1622177385~6267) &vars~1622177385~6261) &x~1622177385~6267 (if (= (length &vars~1622177385~6261) 1) (cons (quote map) (cons (list (quote lambda) &vars~1622177385~6261 &x~1622177385~6267) &vars~1622177385~6261)) (list (quote if) (cons (quote =) (map (lambda (&var~1622177385~6290) (list (quote length) &var~1622177385~6290)) &vars~1622177385~6261)) (cons (quote map) (cons (list (quote lambda) &vars~1622177385~6261 &x~1622177385~6267) &vars~1622177385~6261)) (list (quote ex:syntax-violation) (quote (quote syntax)) (quote "Pattern variables denoting lists of unequal length preceding ellipses") (list (quote quote) (&syntax->datum~1622177385~2149 &template~1622177385~6105)) (cons (quote list) &vars~1622177385~6261))))))) (&process-template~1622177385~2189 &head~1622177385~6258 (+ &dim~1622177385~6106 1) &ellipses-quoted?~1622177385~6107)))) (map (lambda (&mapping~1622177385~6301) ((lambda (&id~1622177385~6304 &binding~1622177385~6305) (&check-binding-level~1622177385~2135 &id~1622177385~6304 &binding~1622177385~6305) (&register-use!~1622177385~2195 &id~1622177385~6304 &binding~1622177385~6305) (&binding-name~1622177385~2125 &binding~1622177385~6305)) (car &mapping~1622177385~6301) (cdr &mapping~1622177385~6301))) (&free-meta-variables~1622177385~2190 &head~1622177385~6258 (+ &dim~1622177385~6106 1) (quote ()) 0)))) (&segment-head~1622177385~2192 &template~1622177385~6105))) (lambda () ((lambda (&x~1622177385~6316 &sk~1622177385~6317 &fk~1622177385~6318) (if (pair? &x~1622177385~6316) ((lambda (&x~1622177385~6321 &sk~1622177385~6322 &fk~1622177385~6323) (&sk~1622177385~6322 &x~1622177385~6321)) (car &x~1622177385~6316) (lambda (&t1~1622177385~6325) ((lambda (&x~1622177385~6327 &sk~1622177385~6328 &fk~1622177385~6329) (&sk~1622177385~6328 &x~1622177385~6327)) (cdr &x~1622177385~6316) (lambda (&t2~1622177385~6331) (&sk~1622177385~6317 &t1~1622177385~6325 &t2~1622177385~6331)) &fk~1622177385~6318)) &fk~1622177385~6318) (&fk~1622177385~6318))) &template~1622177385~6105 (lambda (&t1~1622177385~6333 &t2~1622177385~6334) (list (quote cons) (&process-template~1622177385~2189 &t1~1622177385~6333 &dim~1622177385~6106 &ellipses-quoted?~1622177385~6107) (&process-template~1622177385~2189 &t2~1622177385~6334 &dim~1622177385~6106 &ellipses-quoted?~1622177385~6107))) (lambda () ((lambda (&x~1622177385~6346 &sk~1622177385~6347 &fk~1622177385~6348) (if (vector? &x~1622177385~6346) ((lambda (&x~1622177385~6351 &sk~1622177385~6352 &fk~1622177385~6353) (((lambda (&loop~1622177385~6359) ((lambda (&temp~1622177385~6362) (set! &loop~1622177385~6359 &temp~1622177385~6362) ((lambda () &loop~1622177385~6359))) (lambda (&x~1622177385~6367 &result~1622177385~6368) ((lambda (&match-tail~1622177385~6369) (set! &match-tail~1622177385~6369 (lambda () ((lambda (&x~1622177385~6387 &sk~1622177385~6388 &fk~1622177385~6389) (if (null? &x~1622177385~6387) (&sk~1622177385~6388) (&fk~1622177385~6389))) &x~1622177385~6367 (lambda () (apply &sk~1622177385~6352 (if (null? &result~1622177385~6368) (map (lambda (&ignore~1622177385~6394) (quote ())) (quote (ts))) (apply map list (reverse &result~1622177385~6368))))) (lambda () ((lambda (&x~1622177385~6402 &sk~1622177385~6403 &fk~1622177385~6404) (&sk~1622177385~6403)) &x~1622177385~6367 (lambda () (&fk~1622177385~6353)) (lambda () (ex:invalid-form &x~1622177385~6367))))))) (if (null? &x~1622177385~6367) (begin (&match-tail~1622177385~6369)) (if (pair? &x~1622177385~6367) (begin ((lambda (&x~1622177385~6376 &sk~1622177385~6377 &fk~1622177385~6378) (&sk~1622177385~6377 &x~1622177385~6376)) (car &x~1622177385~6367) (lambda &car-vars~1622177385~6380 (&loop~1622177385~6359 (cdr &x~1622177385~6367) (cons &car-vars~1622177385~6380 &result~1622177385~6368))) &match-tail~1622177385~6369)) (begin (&fk~1622177385~6353))))) ex:undefined)))) ex:undefined) &x~1622177385~6351 (quote ()))) (vector->list &x~1622177385~6346) &sk~1622177385~6347 &fk~1622177385~6348) (&fk~1622177385~6348))) &template~1622177385~6105 (lambda (&ts~1622177385~6410) (list (quote list->vector) (&process-template~1622177385~2189 &ts~1622177385~6410 &dim~1622177385~6106 &ellipses-quoted?~1622177385~6107))) (lambda () ((lambda (&x~1622177385~6418 &sk~1622177385~6419 &fk~1622177385~6420) (&sk~1622177385~6419 &x~1622177385~6418)) &template~1622177385~6105 (lambda (&other~1622177385~6422) (list (quote quote) (&expand~1622177385~2162 &other~1622177385~6422))) (lambda () (ex:invalid-form &template~1622177385~6105))))))))))))))))) (set! &free-meta-variables~1622177385~2190 (lambda (&template~1622177385~5908 &dim~1622177385~5909 &free~1622177385~5910 &deeper~1622177385~5911) ((lambda (&x~1622177385~5918 &sk~1622177385~5919 &fk~1622177385~5920) (if (&identifier?~1622177385~2110 &x~1622177385~5918) ((lambda (&x~1622177385~5923 &sk~1622177385~5924 &fk~1622177385~5925) (&sk~1622177385~5924 &x~1622177385~5923)) &x~1622177385~5918 &sk~1622177385~5919 &fk~1622177385~5920) (&fk~1622177385~5920))) &template~1622177385~5908 (lambda (&id~1622177385~5927) (if (memp (lambda (&x~1622177385~5930) (&bound-identifier=?~1622177385~2117 (car &x~1622177385~5930) &id~1622177385~5927)) &free~1622177385~5910) &free~1622177385~5910 ((lambda (&binding~1622177385~5933) (if (if &binding~1622177385~5933 (if (eq? (&binding-type~1622177385~2124 &binding~1622177385~5933) (quote pattern-variable)) ((lambda (&pdim~1622177385~5941) (if (> &pdim~1622177385~5941 0) (if (not (>= &deeper~1622177385~5911 &pdim~1622177385~5941)) (<= (- &pdim~1622177385~5941 &deeper~1622177385~5911) &dim~1622177385~5909) #f) #f)) (&binding-dimension~1622177385~2128 &binding~1622177385~5933)) #f) #f) (cons (cons &id~1622177385~5927 &binding~1622177385~5933) &free~1622177385~5910) &free~1622177385~5910)) (&binding~1622177385~2131 &id~1622177385~5927)))) (lambda () ((lambda (&x~1622177385~5958 &sk~1622177385~5959 &fk~1622177385~5960) (if (pair? &x~1622177385~5958) ((lambda (&x~1622177385~5963 &sk~1622177385~5964 &fk~1622177385~5965) (&sk~1622177385~5964 &x~1622177385~5963)) (car &x~1622177385~5958) (lambda (&t~1622177385~5967) ((lambda (&x~1622177385~5969 &sk~1622177385~5970 &fk~1622177385~5971) (if (pair? &x~1622177385~5969) ((lambda (&x~1622177385~5974 &sk~1622177385~5975 &fk~1622177385~5976) (if (ex:free=? &x~1622177385~5974 (quote ...)) (&sk~1622177385~5975) (&fk~1622177385~5976))) (car &x~1622177385~5969) (lambda () ((lambda (&x~1622177385~5981 &sk~1622177385~5982 &fk~1622177385~5983) (&sk~1622177385~5982 &x~1622177385~5981)) (cdr &x~1622177385~5969) (lambda (&rest~1622177385~5985) (&sk~1622177385~5970 &rest~1622177385~5985)) &fk~1622177385~5971)) &fk~1622177385~5971) (&fk~1622177385~5971))) (cdr &x~1622177385~5958) (lambda (&rest~1622177385~5987) (&sk~1622177385~5959 &t~1622177385~5967 &rest~1622177385~5987)) &fk~1622177385~5960)) &fk~1622177385~5960) (&fk~1622177385~5960))) &template~1622177385~5908 (lambda (&t~1622177385~5989 &rest~1622177385~5990) (&free-meta-variables~1622177385~2190 &t~1622177385~5989 &dim~1622177385~5909 (&free-meta-variables~1622177385~2190 (&segment-tail~1622177385~2193 &template~1622177385~5908) &dim~1622177385~5909 &free~1622177385~5910 &deeper~1622177385~5911) (+ &deeper~1622177385~5911 (&segment-depth~1622177385~2191 &template~1622177385~5908)))) (lambda () ((lambda (&x~1622177385~6000 &sk~1622177385~6001 &fk~1622177385~6002) (if (pair? &x~1622177385~6000) ((lambda (&x~1622177385~6005 &sk~1622177385~6006 &fk~1622177385~6007) (&sk~1622177385~6006 &x~1622177385~6005)) (car &x~1622177385~6000) (lambda (&t1~1622177385~6009) ((lambda (&x~1622177385~6011 &sk~1622177385~6012 &fk~1622177385~6013) (&sk~1622177385~6012 &x~1622177385~6011)) (cdr &x~1622177385~6000) (lambda (&t2~1622177385~6015) (&sk~1622177385~6001 &t1~1622177385~6009 &t2~1622177385~6015)) &fk~1622177385~6002)) &fk~1622177385~6002) (&fk~1622177385~6002))) &template~1622177385~5908 (lambda (&t1~1622177385~6017 &t2~1622177385~6018) (&free-meta-variables~1622177385~2190 &t1~1622177385~6017 &dim~1622177385~5909 (&free-meta-variables~1622177385~2190 &t2~1622177385~6018 &dim~1622177385~5909 &free~1622177385~5910 &deeper~1622177385~5911) &deeper~1622177385~5911)) (lambda () ((lambda (&x~1622177385~6028 &sk~1622177385~6029 &fk~1622177385~6030) (if (vector? &x~1622177385~6028) ((lambda (&x~1622177385~6033 &sk~1622177385~6034 &fk~1622177385~6035) (((lambda (&loop~1622177385~6041) ((lambda (&temp~1622177385~6044) (set! &loop~1622177385~6041 &temp~1622177385~6044) ((lambda () &loop~1622177385~6041))) (lambda (&x~1622177385~6049 &result~1622177385~6050) ((lambda (&match-tail~1622177385~6051) (set! &match-tail~1622177385~6051 (lambda () ((lambda (&x~1622177385~6069 &sk~1622177385~6070 &fk~1622177385~6071) (if (null? &x~1622177385~6069) (&sk~1622177385~6070) (&fk~1622177385~6071))) &x~1622177385~6049 (lambda () (apply &sk~1622177385~6034 (if (null? &result~1622177385~6050) (map (lambda (&ignore~1622177385~6076) (quote ())) (quote (ts))) (apply map list (reverse &result~1622177385~6050))))) (lambda () ((lambda (&x~1622177385~6084 &sk~1622177385~6085 &fk~1622177385~6086) (&sk~1622177385~6085)) &x~1622177385~6049 (lambda () (&fk~1622177385~6035)) (lambda () (ex:invalid-form &x~1622177385~6049))))))) (if (null? &x~1622177385~6049) (begin (&match-tail~1622177385~6051)) (if (pair? &x~1622177385~6049) (begin ((lambda (&x~1622177385~6058 &sk~1622177385~6059 &fk~1622177385~6060) (&sk~1622177385~6059 &x~1622177385~6058)) (car &x~1622177385~6049) (lambda &car-vars~1622177385~6062 (&loop~1622177385~6041 (cdr &x~1622177385~6049) (cons &car-vars~1622177385~6062 &result~1622177385~6050))) &match-tail~1622177385~6051)) (begin (&fk~1622177385~6035))))) ex:undefined)))) ex:undefined) &x~1622177385~6033 (quote ()))) (vector->list &x~1622177385~6028) &sk~1622177385~6029 &fk~1622177385~6030) (&fk~1622177385~6030))) &template~1622177385~5908 (lambda (&ts~1622177385~6092) (&free-meta-variables~1622177385~2190 &ts~1622177385~6092 &dim~1622177385~5909 &free~1622177385~5910 &deeper~1622177385~5911)) (lambda () ((lambda (&x~1622177385~6098 &sk~1622177385~6099 &fk~1622177385~6100) (&sk~1622177385~6099)) &template~1622177385~5908 (lambda () &free~1622177385~5910) (lambda () (ex:invalid-form &template~1622177385~5908))))))))))))) (set! &segment-depth~1622177385~2191 (lambda (&pattern~1622177385~5850) ((lambda (&x~1622177385~5863 &sk~1622177385~5864 &fk~1622177385~5865) (if (pair? &x~1622177385~5863) ((lambda (&x~1622177385~5868 &sk~1622177385~5869 &fk~1622177385~5870) (&sk~1622177385~5869 &x~1622177385~5868)) (car &x~1622177385~5863) (lambda (&p~1622177385~5872) ((lambda (&x~1622177385~5874 &sk~1622177385~5875 &fk~1622177385~5876) (if (pair? &x~1622177385~5874) ((lambda (&x~1622177385~5879 &sk~1622177385~5880 &fk~1622177385~5881) (if (ex:free=? &x~1622177385~5879 (quote ...)) (&sk~1622177385~5880) (&fk~1622177385~5881))) (car &x~1622177385~5874) (lambda () ((lambda (&x~1622177385~5886 &sk~1622177385~5887 &fk~1622177385~5888) (&sk~1622177385~5887 &x~1622177385~5886)) (cdr &x~1622177385~5874) (lambda (&rest~1622177385~5890) (&sk~1622177385~5875 &rest~1622177385~5890)) &fk~1622177385~5876)) &fk~1622177385~5876) (&fk~1622177385~5876))) (cdr &x~1622177385~5863) (lambda (&rest~1622177385~5892) (&sk~1622177385~5864 &p~1622177385~5872 &rest~1622177385~5892)) &fk~1622177385~5865)) &fk~1622177385~5865) (&fk~1622177385~5865))) &pattern~1622177385~5850 (lambda (&p~1622177385~5894 &rest~1622177385~5895) (+ 1 (&segment-depth~1622177385~2191 (cdr &pattern~1622177385~5850)))) (lambda () ((lambda (&x~1622177385~5901 &sk~1622177385~5902 &fk~1622177385~5903) (&sk~1622177385~5902)) &pattern~1622177385~5850 (lambda () 0) (lambda () (ex:invalid-form &pattern~1622177385~5850))))))) (set! &segment-head~1622177385~2192 (lambda (&pattern~1622177385~5664) ((lambda (&head~1622177385~5667) ((lambda (&x~1622177385~5680 &sk~1622177385~5681 &fk~1622177385~5682) (if (pair? &x~1622177385~5680) ((lambda (&x~1622177385~5685 &sk~1622177385~5686 &fk~1622177385~5687) (&sk~1622177385~5686 &x~1622177385~5685)) (car &x~1622177385~5680) (lambda (&h~1622177385~5689) ((lambda (&x~1622177385~5691 &sk~1622177385~5692 &fk~1622177385~5693) (if (pair? &x~1622177385~5691) ((lambda (&x~1622177385~5696 &sk~1622177385~5697 &fk~1622177385~5698) (if (ex:free=? &x~1622177385~5696 (quote ...)) (&sk~1622177385~5697) (&fk~1622177385~5698))) (car &x~1622177385~5691) (lambda () ((lambda (&x~1622177385~5703 &sk~1622177385~5704 &fk~1622177385~5705) (&sk~1622177385~5704 &x~1622177385~5703)) (cdr &x~1622177385~5691) (lambda (&rest~1622177385~5707) (&sk~1622177385~5692 &rest~1622177385~5707)) &fk~1622177385~5693)) &fk~1622177385~5693) (&fk~1622177385~5693))) (cdr &x~1622177385~5680) (lambda (&rest~1622177385~5709) (&sk~1622177385~5681 &h~1622177385~5689 &rest~1622177385~5709)) &fk~1622177385~5682)) &fk~1622177385~5682) (&fk~1622177385~5682))) &head~1622177385~5667 (lambda (&h~1622177385~5711 &rest~1622177385~5712) &head~1622177385~5667) (lambda () ((lambda (&x~1622177385~5718 &sk~1622177385~5719 &fk~1622177385~5720) (&sk~1622177385~5719)) &head~1622177385~5667 (lambda () (car &head~1622177385~5667)) (lambda () (ex:invalid-form &head~1622177385~5667)))))) (((lambda (&recur~1622177385~5729) ((lambda (&temp~1622177385~5732) (set! &recur~1622177385~5729 &temp~1622177385~5732) ((lambda () &recur~1622177385~5729))) (lambda (&pattern~1622177385~5737) ((lambda (&x~1622177385~5754 &sk~1622177385~5755 &fk~1622177385~5756) (if (pair? &x~1622177385~5754) ((lambda (&x~1622177385~5759 &sk~1622177385~5760 &fk~1622177385~5761) (&sk~1622177385~5760 &x~1622177385~5759)) (car &x~1622177385~5754) (lambda (&h~1622177385~5763) ((lambda (&x~1622177385~5765 &sk~1622177385~5766 &fk~1622177385~5767) (if (pair? &x~1622177385~5765) ((lambda (&x~1622177385~5770 &sk~1622177385~5771 &fk~1622177385~5772) (if (ex:free=? &x~1622177385~5770 (quote ...)) (&sk~1622177385~5771) (&fk~1622177385~5772))) (car &x~1622177385~5765) (lambda () ((lambda (&x~1622177385~5777 &sk~1622177385~5778 &fk~1622177385~5779) (if (pair? &x~1622177385~5777) ((lambda (&x~1622177385~5782 &sk~1622177385~5783 &fk~1622177385~5784) (if (ex:free=? &x~1622177385~5782 (quote ...)) (&sk~1622177385~5783) (&fk~1622177385~5784))) (car &x~1622177385~5777) (lambda () ((lambda (&x~1622177385~5789 &sk~1622177385~5790 &fk~1622177385~5791) (&sk~1622177385~5790 &x~1622177385~5789)) (cdr &x~1622177385~5777) (lambda (&rest~1622177385~5793) (&sk~1622177385~5778 &rest~1622177385~5793)) &fk~1622177385~5779)) &fk~1622177385~5779) (&fk~1622177385~5779))) (cdr &x~1622177385~5765) (lambda (&rest~1622177385~5795) (&sk~1622177385~5766 &rest~1622177385~5795)) &fk~1622177385~5767)) &fk~1622177385~5767) (&fk~1622177385~5767))) (cdr &x~1622177385~5754) (lambda (&rest~1622177385~5797) (&sk~1622177385~5755 &h~1622177385~5763 &rest~1622177385~5797)) &fk~1622177385~5756)) &fk~1622177385~5756) (&fk~1622177385~5756))) &pattern~1622177385~5737 (lambda (&h~1622177385~5799 &rest~1622177385~5800) (cons &h~1622177385~5799 (&recur~1622177385~5729 (cdr &pattern~1622177385~5737)))) (lambda () ((lambda (&x~1622177385~5814 &sk~1622177385~5815 &fk~1622177385~5816) (if (pair? &x~1622177385~5814) ((lambda (&x~1622177385~5819 &sk~1622177385~5820 &fk~1622177385~5821) (&sk~1622177385~5820 &x~1622177385~5819)) (car &x~1622177385~5814) (lambda (&h~1622177385~5823) ((lambda (&x~1622177385~5825 &sk~1622177385~5826 &fk~1622177385~5827) (if (pair? &x~1622177385~5825) ((lambda (&x~1622177385~5830 &sk~1622177385~5831 &fk~1622177385~5832) (if (ex:free=? &x~1622177385~5830 (quote ...)) (&sk~1622177385~5831) (&fk~1622177385~5832))) (car &x~1622177385~5825) (lambda () ((lambda (&x~1622177385~5837 &sk~1622177385~5838 &fk~1622177385~5839) (&sk~1622177385~5838 &x~1622177385~5837)) (cdr &x~1622177385~5825) (lambda (&rest~1622177385~5841) (&sk~1622177385~5826 &rest~1622177385~5841)) &fk~1622177385~5827)) &fk~1622177385~5827) (&fk~1622177385~5827))) (cdr &x~1622177385~5814) (lambda (&rest~1622177385~5843) (&sk~1622177385~5815 &h~1622177385~5823 &rest~1622177385~5843)) &fk~1622177385~5816)) &fk~1622177385~5816) (&fk~1622177385~5816))) &pattern~1622177385~5737 (lambda (&h~1622177385~5845 &rest~1622177385~5846) (list &h~1622177385~5845)) (lambda () (ex:invalid-form &pattern~1622177385~5737)))))))) ex:undefined) &pattern~1622177385~5664)))) (set! &segment-tail~1622177385~2193 (lambda (&pattern~1622177385~5610) (((lambda (&loop~1622177385~5616) ((lambda (&temp~1622177385~5619) (set! &loop~1622177385~5616 &temp~1622177385~5619) ((lambda () &loop~1622177385~5616))) (lambda (&pattern~1622177385~5624) ((lambda (&x~1622177385~5633 &sk~1622177385~5634 &fk~1622177385~5635) (if (pair? &x~1622177385~5633) ((lambda (&x~1622177385~5638 &sk~1622177385~5639 &fk~1622177385~5640) (if (ex:free=? &x~1622177385~5638 (quote ...)) (&sk~1622177385~5639) (&fk~1622177385~5640))) (car &x~1622177385~5633) (lambda () ((lambda (&x~1622177385~5645 &sk~1622177385~5646 &fk~1622177385~5647) (&sk~1622177385~5646 &x~1622177385~5645)) (cdr &x~1622177385~5633) (lambda (&tail~1622177385~5649) (&sk~1622177385~5634 &tail~1622177385~5649)) &fk~1622177385~5635)) &fk~1622177385~5635) (&fk~1622177385~5635))) &pattern~1622177385~5624 (lambda (&tail~1622177385~5651) (&loop~1622177385~5616 &tail~1622177385~5651)) (lambda () ((lambda (&x~1622177385~5657 &sk~1622177385~5658 &fk~1622177385~5659) (&sk~1622177385~5658)) &pattern~1622177385~5624 (lambda () &pattern~1622177385~5624) (lambda () (ex:invalid-form &pattern~1622177385~5624)))))))) ex:undefined) (cdr &pattern~1622177385~5610)))) (set! &add-fresh-used-frame!~1622177385~2194 (lambda () (set! &*used*~1622177385~2097 (cons (quote ()) &*used*~1622177385~2097)))) (set! &register-use!~1622177385~2195 (lambda (&id~1622177385~5603 &binding~1622177385~5604) (set! &*used*~1622177385~2097 (cons (cons (cons &id~1622177385~5603 &binding~1622177385~5604) (car &*used*~1622177385~2097)) (cdr &*used*~1622177385~2097))))) (set! &merge-used-with-parent-frame!~1622177385~2196 (lambda () (set! &*used*~1622177385~2097 (cons (append (car &*used*~1622177385~2097) (cadr &*used*~1622177385~2097)) (cddr &*used*~1622177385~2097))))) (set! &check-used~1622177385~2197 (lambda (&id~1622177385~5581 &body-type~1622177385~5582 &form~1622177385~5583) (if (not (eq? &body-type~1622177385~5582 (quote toplevel))) ((lambda (&already-used~1622177385~5590) ((lambda (&binding~1622177385~5593) (if (memp (lambda (&mapping~1622177385~5596) (if (eq? &binding~1622177385~5593 (cdr &mapping~1622177385~5596)) (&bound-identifier=?~1622177385~2117 &id~1622177385~5581 (car &mapping~1622177385~5596)) #f)) &already-used~1622177385~5590) (&syntax-violation~1622177385~2219 (quote definition) "Definition of identifier that may have already affected meaning of undeferred portions of body" &form~1622177385~5583 &id~1622177385~5581))) (&binding~1622177385~2131 &id~1622177385~5581))) (car &*used*~1622177385~2097)) #f))) (set! &expand-program~1622177385~2198 (lambda (&t~1622177385~5470) ((lambda (&x~1622177385~5485 &sk~1622177385~5486 &fk~1622177385~5487) (if (pair? &x~1622177385~5485) ((lambda (&x~1622177385~5490 &sk~1622177385~5491 &fk~1622177385~5492) (&sk~1622177385~5491 &x~1622177385~5490)) (car &x~1622177385~5485) (lambda (&program~1622177385~5494) ((lambda (&x~1622177385~5496 &sk~1622177385~5497 &fk~1622177385~5498) (if (pair? &x~1622177385~5496) ((lambda (&x~1622177385~5501 &sk~1622177385~5502 &fk~1622177385~5503) (&sk~1622177385~5502 &x~1622177385~5501)) (car &x~1622177385~5496) (lambda (&import-clause~1622177385~5505) ((lambda (&x~1622177385~5507 &sk~1622177385~5508 &fk~1622177385~5509) (((lambda (&loop~1622177385~5515) ((lambda (&temp~1622177385~5518) (set! &loop~1622177385~5515 &temp~1622177385~5518) ((lambda () &loop~1622177385~5515))) (lambda (&x~1622177385~5523 &result~1622177385~5524) ((lambda (&match-tail~1622177385~5525) (set! &match-tail~1622177385~5525 (lambda () ((lambda (&x~1622177385~5543 &sk~1622177385~5544 &fk~1622177385~5545) (if (null? &x~1622177385~5543) (&sk~1622177385~5544) (&fk~1622177385~5545))) &x~1622177385~5523 (lambda () (apply &sk~1622177385~5508 (if (null? &result~1622177385~5524) (map (lambda (&ignore~1622177385~5550) (quote ())) (quote (forms))) (apply map list (reverse &result~1622177385~5524))))) (lambda () ((lambda (&x~1622177385~5558 &sk~1622177385~5559 &fk~1622177385~5560) (&sk~1622177385~5559)) &x~1622177385~5523 (lambda () (&fk~1622177385~5509)) (lambda () (ex:invalid-form &x~1622177385~5523))))))) (if (null? &x~1622177385~5523) (begin (&match-tail~1622177385~5525)) (if (pair? &x~1622177385~5523) (begin ((lambda (&x~1622177385~5532 &sk~1622177385~5533 &fk~1622177385~5534) (&sk~1622177385~5533 &x~1622177385~5532)) (car &x~1622177385~5523) (lambda &car-vars~1622177385~5536 (&loop~1622177385~5515 (cdr &x~1622177385~5523) (cons &car-vars~1622177385~5536 &result~1622177385~5524))) &match-tail~1622177385~5525)) (begin (&fk~1622177385~5509))))) ex:undefined)))) ex:undefined) &x~1622177385~5507 (quote ()))) (cdr &x~1622177385~5496) (lambda (&forms~1622177385~5566) (&sk~1622177385~5497 &import-clause~1622177385~5505 &forms~1622177385~5566)) &fk~1622177385~5498)) &fk~1622177385~5498) (&fk~1622177385~5498))) (cdr &x~1622177385~5485) (lambda (&import-clause~1622177385~5568 &forms~1622177385~5569) (&sk~1622177385~5486 &program~1622177385~5494 &import-clause~1622177385~5568 &forms~1622177385~5569)) &fk~1622177385~5487)) &fk~1622177385~5487) (&fk~1622177385~5487))) &t~1622177385~5470 (lambda (&program~1622177385~5571 &import-clause~1622177385~5572 &forms~1622177385~5573) (&expand-library-or-program~1622177385~2200 (cons &program~1622177385~5571 (cons (list (&datum->syntax~1622177385~2148 &program~1622177385~5571 (&generate-guid~1622177385~2120 (quote program)))) (cons (list (&datum->syntax~1622177385~2148 &program~1622177385~5571 (quote export))) (cons &import-clause~1622177385~5572 &forms~1622177385~5573)))) (quote program))) (lambda () (ex:invalid-form &t~1622177385~5470))))) (set! &expand-library~1622177385~2199 (lambda (&t~1622177385~5467) (&expand-library-or-program~1622177385~2200 &t~1622177385~5467 (quote library)))) (set! &expand-library-or-program~1622177385~2200 (lambda (&t~1622177385~5047 &library-type~1622177385~5048) ((lambda (&x~1622177385~5083 &sk~1622177385~5084 &fk~1622177385~5085) (if (pair? &x~1622177385~5083) ((lambda (&x~1622177385~5088 &sk~1622177385~5089 &fk~1622177385~5090) (&sk~1622177385~5089 &x~1622177385~5088)) (car &x~1622177385~5083) (lambda (&keyword~1622177385~5092) ((lambda (&x~1622177385~5094 &sk~1622177385~5095 &fk~1622177385~5096) (if (pair? &x~1622177385~5094) ((lambda (&x~1622177385~5099 &sk~1622177385~5100 &fk~1622177385~5101) (&sk~1622177385~5100 &x~1622177385~5099)) (car &x~1622177385~5094) (lambda (&name~1622177385~5103) ((lambda (&x~1622177385~5105 &sk~1622177385~5106 &fk~1622177385~5107) (if (pair? &x~1622177385~5105) ((lambda (&x~1622177385~5110 &sk~1622177385~5111 &fk~1622177385~5112) (if (pair? &x~1622177385~5110) ((lambda (&x~1622177385~5115 &sk~1622177385~5116 &fk~1622177385~5117) (if (ex:free=? &x~1622177385~5115 (quote export)) (&sk~1622177385~5116) (&fk~1622177385~5117))) (car &x~1622177385~5110) (lambda () ((lambda (&x~1622177385~5122 &sk~1622177385~5123 &fk~1622177385~5124) (((lambda (&loop~1622177385~5130) ((lambda (&temp~1622177385~5133) (set! &loop~1622177385~5130 &temp~1622177385~5133) ((lambda () &loop~1622177385~5130))) (lambda (&x~1622177385~5138 &result~1622177385~5139) ((lambda (&match-tail~1622177385~5140) (set! &match-tail~1622177385~5140 (lambda () ((lambda (&x~1622177385~5158 &sk~1622177385~5159 &fk~1622177385~5160) (if (null? &x~1622177385~5158) (&sk~1622177385~5159) (&fk~1622177385~5160))) &x~1622177385~5138 (lambda () (apply &sk~1622177385~5123 (if (null? &result~1622177385~5139) (map (lambda (&ignore~1622177385~5165) (quote ())) (quote (sets))) (apply map list (reverse &result~1622177385~5139))))) (lambda () ((lambda (&x~1622177385~5173 &sk~1622177385~5174 &fk~1622177385~5175) (&sk~1622177385~5174)) &x~1622177385~5138 (lambda () (&fk~1622177385~5124)) (lambda () (ex:invalid-form &x~1622177385~5138))))))) (if (null? &x~1622177385~5138) (begin (&match-tail~1622177385~5140)) (if (pair? &x~1622177385~5138) (begin ((lambda (&x~1622177385~5147 &sk~1622177385~5148 &fk~1622177385~5149) (&sk~1622177385~5148 &x~1622177385~5147)) (car &x~1622177385~5138) (lambda &car-vars~1622177385~5151 (&loop~1622177385~5130 (cdr &x~1622177385~5138) (cons &car-vars~1622177385~5151 &result~1622177385~5139))) &match-tail~1622177385~5140)) (begin (&fk~1622177385~5124))))) ex:undefined)))) ex:undefined) &x~1622177385~5122 (quote ()))) (cdr &x~1622177385~5110) (lambda (&sets~1622177385~5181) (&sk~1622177385~5111 &sets~1622177385~5181)) &fk~1622177385~5112)) &fk~1622177385~5112) (&fk~1622177385~5112))) (car &x~1622177385~5105) (lambda (&sets~1622177385~5183) ((lambda (&x~1622177385~5185 &sk~1622177385~5186 &fk~1622177385~5187) (if (pair? &x~1622177385~5185) ((lambda (&x~1622177385~5190 &sk~1622177385~5191 &fk~1622177385~5192) (if (pair? &x~1622177385~5190) ((lambda (&x~1622177385~5195 &sk~1622177385~5196 &fk~1622177385~5197) (if (ex:free=? &x~1622177385~5195 (quote import)) (&sk~1622177385~5196) (&fk~1622177385~5197))) (car &x~1622177385~5190) (lambda () ((lambda (&x~1622177385~5202 &sk~1622177385~5203 &fk~1622177385~5204) (((lambda (&loop~1622177385~5210) ((lambda (&temp~1622177385~5213) (set! &loop~1622177385~5210 &temp~1622177385~5213) ((lambda () &loop~1622177385~5210))) (lambda (&x~1622177385~5218 &result~1622177385~5219) ((lambda (&match-tail~1622177385~5220) (set! &match-tail~1622177385~5220 (lambda () ((lambda (&x~1622177385~5238 &sk~1622177385~5239 &fk~1622177385~5240) (if (null? &x~1622177385~5238) (&sk~1622177385~5239) (&fk~1622177385~5240))) &x~1622177385~5218 (lambda () (apply &sk~1622177385~5203 (if (null? &result~1622177385~5219) (map (lambda (&ignore~1622177385~5245) (quote ())) (quote (specs))) (apply map list (reverse &result~1622177385~5219))))) (lambda () ((lambda (&x~1622177385~5253 &sk~1622177385~5254 &fk~1622177385~5255) (&sk~1622177385~5254)) &x~1622177385~5218 (lambda () (&fk~1622177385~5204)) (lambda () (ex:invalid-form &x~1622177385~5218))))))) (if (null? &x~1622177385~5218) (begin (&match-tail~1622177385~5220)) (if (pair? &x~1622177385~5218) (begin ((lambda (&x~1622177385~5227 &sk~1622177385~5228 &fk~1622177385~5229) (&sk~1622177385~5228 &x~1622177385~5227)) (car &x~1622177385~5218) (lambda &car-vars~1622177385~5231 (&loop~1622177385~5210 (cdr &x~1622177385~5218) (cons &car-vars~1622177385~5231 &result~1622177385~5219))) &match-tail~1622177385~5220)) (begin (&fk~1622177385~5204))))) ex:undefined)))) ex:undefined) &x~1622177385~5202 (quote ()))) (cdr &x~1622177385~5190) (lambda (&specs~1622177385~5261) (&sk~1622177385~5191 &specs~1622177385~5261)) &fk~1622177385~5192)) &fk~1622177385~5192) (&fk~1622177385~5192))) (car &x~1622177385~5185) (lambda (&specs~1622177385~5263) ((lambda (&x~1622177385~5265 &sk~1622177385~5266 &fk~1622177385~5267) (((lambda (&loop~1622177385~5273) ((lambda (&temp~1622177385~5276) (set! &loop~1622177385~5273 &temp~1622177385~5276) ((lambda () &loop~1622177385~5273))) (lambda (&x~1622177385~5281 &result~1622177385~5282) ((lambda (&match-tail~1622177385~5283) (set! &match-tail~1622177385~5283 (lambda () ((lambda (&x~1622177385~5301 &sk~1622177385~5302 &fk~1622177385~5303) (if (null? &x~1622177385~5301) (&sk~1622177385~5302) (&fk~1622177385~5303))) &x~1622177385~5281 (lambda () (apply &sk~1622177385~5266 (if (null? &result~1622177385~5282) (map (lambda (&ignore~1622177385~5308) (quote ())) (quote (body-forms))) (apply map list (reverse &result~1622177385~5282))))) (lambda () ((lambda (&x~1622177385~5316 &sk~1622177385~5317 &fk~1622177385~5318) (&sk~1622177385~5317)) &x~1622177385~5281 (lambda () (&fk~1622177385~5267)) (lambda () (ex:invalid-form &x~1622177385~5281))))))) (if (null? &x~1622177385~5281) (begin (&match-tail~1622177385~5283)) (if (pair? &x~1622177385~5281) (begin ((lambda (&x~1622177385~5290 &sk~1622177385~5291 &fk~1622177385~5292) (&sk~1622177385~5291 &x~1622177385~5290)) (car &x~1622177385~5281) (lambda &car-vars~1622177385~5294 (&loop~1622177385~5273 (cdr &x~1622177385~5281) (cons &car-vars~1622177385~5294 &result~1622177385~5282))) &match-tail~1622177385~5283)) (begin (&fk~1622177385~5267))))) ex:undefined)))) ex:undefined) &x~1622177385~5265 (quote ()))) (cdr &x~1622177385~5185) (lambda (&body-forms~1622177385~5324) (&sk~1622177385~5186 &specs~1622177385~5263 &body-forms~1622177385~5324)) &fk~1622177385~5187)) &fk~1622177385~5187) (&fk~1622177385~5187))) (cdr &x~1622177385~5105) (lambda (&specs~1622177385~5326 &body-forms~1622177385~5327) (&sk~1622177385~5106 &sets~1622177385~5183 &specs~1622177385~5326 &body-forms~1622177385~5327)) &fk~1622177385~5107)) &fk~1622177385~5107) (&fk~1622177385~5107))) (cdr &x~1622177385~5094) (lambda (&sets~1622177385~5329 &specs~1622177385~5330 &body-forms~1622177385~5331) (&sk~1622177385~5095 &name~1622177385~5103 &sets~1622177385~5329 &specs~1622177385~5330 &body-forms~1622177385~5331)) &fk~1622177385~5096)) &fk~1622177385~5096) (&fk~1622177385~5096))) (cdr &x~1622177385~5083) (lambda (&name~1622177385~5333 &sets~1622177385~5334 &specs~1622177385~5335 &body-forms~1622177385~5336) (&sk~1622177385~5084 &keyword~1622177385~5092 &name~1622177385~5333 &sets~1622177385~5334 &specs~1622177385~5335 &body-forms~1622177385~5336)) &fk~1622177385~5085)) &fk~1622177385~5085) (&fk~1622177385~5085))) &t~1622177385~5047 (lambda (&keyword~1622177385~5338 &name~1622177385~5339 &sets~1622177385~5340 &specs~1622177385~5341 &body-forms~1622177385~5342) ((lambda (&name~1622177385~5345) ((lambda (&exports~1622177385~5348) (call-with-values (lambda () (&scan-imports~1622177385~2206 &specs~1622177385~5341)) (lambda (&imported-libraries~1622177385~5351 &imports~1622177385~5352) ((lambda (&saved~1622177385~5356) (set! &*usage-env*~1622177385~2079 (&make-unit-env~1622177385~2137)) (call-with-values (lambda () ((lambda (&saved~1622177385~5361) (set! &*current-library*~1622177385~2094 &name~1622177385~5345) (call-with-values (lambda () ((lambda (&saved~1622177385~5366) (set! &*syntax-reflected*~1622177385~2103 #f) (call-with-values (lambda () (&import-libraries-for-expand~1622177385~2203 &imported-libraries~1622177385~5351 (map not &imported-libraries~1622177385~5351) 0) (&env-import!~1622177385~2201 &keyword~1622177385~5338 &imports~1622177385~5352 &*usage-env*~1622177385~2079) ((lambda (&initial-env-table~1622177385~5371) (&scan-sequence~1622177385~2178 &library-type~1622177385~5048 &make-local-mapping~1622177385~2132 &body-forms~1622177385~5342 (lambda (&forms~1622177385~5373 &syntax-definitions~1622177385~5374 &bound-variables~1622177385~5375) ((lambda (&exports~1622177385~5379) ((lambda (&expanded-library~1622177385~5382) (if (eq? &library-type~1622177385~5048 (quote library)) (eval &expanded-library~1622177385~5382 (interaction-environment))) &expanded-library~1622177385~5382) ((lambda (&t~1622177385~5388) (if (memv &t~1622177385~5388 (quote (program))) (begin (cons (quote begin) (cons (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) &imported-libraries~1622177385~5351) (cons (list (quote quote) (&current-builds~1622177385~2202 &imported-libraries~1622177385~5351)) (quote (0))))) (&emit-body~1622177385~2179 &forms~1622177385~5373 (quote define))))) (if (memv &t~1622177385~5388 (quote (library))) (begin (cons (quote begin) (append (map (lambda (&var~1622177385~5405) (cons (quote define) (cons &var~1622177385~5405 (quote (ex:unspecified))))) &bound-variables~1622177385~5375) (cons (list (quote ex:register-library!) (list (quote ex:make-library) (list (quote quote) &name~1622177385~5345) (list (quote lambda) (quote ()) (if &*syntax-reflected*~1622177385~2103 (list (quote ex:uncompress) (list (quote quote) (&compress~1622177385~2144 (&drop-tail~1622177385~2239 &*env-table*~1622177385~2091 &initial-env-table~1622177385~5371)))) (quote (quote ())))) (list (quote quote) &exports~1622177385~5379) (list (quote quote) &imported-libraries~1622177385~5351) (list (quote quote) (&current-builds~1622177385~2202 &imported-libraries~1622177385~5351)) (cons (quote lambda) (cons (quote ()) (append (map (lambda (&def~1622177385~5426) (list (quote ex:register-macro!) (list (quote quote) (car &def~1622177385~5426)) (cdr &def~1622177385~5426))) &syntax-definitions~1622177385~5374) (quote ((values)))))) (cons (quote lambda) (cons (quote ()) (append (map (lambda (&var~1622177385~5434) (cons (quote set!) (cons &var~1622177385~5434 (quote (ex:undefined))))) &bound-variables~1622177385~5375) (append (&emit-body~1622177385~2179 &forms~1622177385~5373 ex:undefined-set!) (quote ((values))))))) (list (quote quote) (&generate-guid~1622177385~2120 (quote build))))) (quote ((values)))))))))) &library-type~1622177385~5048))) (map (lambda (&mapping~1622177385~5443) (cons (&id-name~1622177385~2111 (car &mapping~1622177385~5443)) ((lambda (&binding~1622177385~5446) (let ((x &binding~1622177385~5446)) (if x x (&syntax-violation~1622177385~2219 (quote library) "Unbound export" &t~1622177385~5047 (cadr &mapping~1622177385~5443)))) (if (&binding-mutable?~1622177385~2127 &binding~1622177385~5446) (&syntax-violation~1622177385~2219 (quote library) "Attempt to export mutable variable" &t~1622177385~5047 (cadr &mapping~1622177385~5443))) &binding~1622177385~5446) (&binding~1622177385~2131 (cadr &mapping~1622177385~5443))))) &exports~1622177385~5348))))) &*env-table*~1622177385~2091)) (lambda &results~1622177385~5453 (set! &*syntax-reflected*~1622177385~2103 &saved~1622177385~5366) (apply values &results~1622177385~5453)))) &*syntax-reflected*~1622177385~2103)) (lambda &results~1622177385~5457 (set! &*current-library*~1622177385~2094 &saved~1622177385~5361) (apply values &results~1622177385~5457)))) &*current-library*~1622177385~2094)) (lambda &results~1622177385~5461 (set! &*usage-env*~1622177385~2079 &saved~1622177385~5356) (apply values &results~1622177385~5461)))) &*usage-env*~1622177385~2079)))) (&scan-exports~1622177385~2204 &sets~1622177385~5340))) (&syntax->datum~1622177385~2149 (&scan-library-name~1622177385~2211 &name~1622177385~5339)))) (lambda () (ex:invalid-form &t~1622177385~5047))))) (set! &env-import!~1622177385~2201 (lambda (&keyword~1622177385~5041 &imports~1622177385~5042 &env~1622177385~5043) (&env-extend!~1622177385~2139 (map (lambda (&import~1622177385~5045) (cons (cons (car &import~1622177385~5045) (&id-colors~1622177385~2112 &keyword~1622177385~5041)) (cdr &import~1622177385~5045))) &imports~1622177385~5042) &env~1622177385~5043))) (set! &current-builds~1622177385~2202 (lambda (&imported-libraries~1622177385~5037) (map (lambda (&lib-entry~1622177385~5039) (ex:library-build (ex:lookup-library (car &lib-entry~1622177385~5039)))) &imported-libraries~1622177385~5037))) (set! &import-libraries-for-expand~1622177385~2203 (lambda (&imports~1622177385~5019 &builds~1622177385~5020 &phase~1622177385~5021) (ex:import-libraries-for &imports~1622177385~5019 &builds~1622177385~5020 &phase~1622177385~5021 (lambda (&library~1622177385~5023 &phase~1622177385~5024 &imported~1622177385~5025) (if (if (>= &phase~1622177385~5024 0) (not (ex:library-visited? &library~1622177385~5023)) #f) (begin (set! &*env-table*~1622177385~2091 (append ((ex:library-envs &library~1622177385~5023)) &*env-table*~1622177385~2091)) ((ex:library-visiter &library~1622177385~5023)) (ex:library-visited?-set! &library~1622177385~5023 #t))) (if (if (>= &phase~1622177385~5024 1) (not (ex:library-invoked? &library~1622177385~5023)) #f) (begin ((ex:library-invoker &library~1622177385~5023)) (ex:library-invoked?-set! &library~1622177385~5023 #t)))) (quote expand)))) (set! &scan-exports~1622177385~2204 (lambda (&sets~1622177385~5008) ((lambda (&exports~1622177385~5011) (&check-set?~1622177385~2237 &exports~1622177385~5011 (lambda (&x~1622177385~5013 &y~1622177385~5014) (eq? (&id-name~1622177385~2111 (car &x~1622177385~5013)) (&id-name~1622177385~2111 (car &y~1622177385~5014)))) (lambda (&dup~1622177385~5016) (&syntax-violation~1622177385~2219 (quote export) "Duplicate export" &sets~1622177385~5008 &dup~1622177385~5016))) &exports~1622177385~5011) (apply append (map &scan-export-set~1622177385~2205 &sets~1622177385~5008))))) (set! &scan-export-set~1622177385~2205 (lambda (&set~1622177385~4836) ((lambda (&x~1622177385~4843 &sk~1622177385~4844 &fk~1622177385~4845) (if (&identifier?~1622177385~2110 &x~1622177385~4843) ((lambda (&x~1622177385~4848 &sk~1622177385~4849 &fk~1622177385~4850) (&sk~1622177385~4849 &x~1622177385~4848)) &x~1622177385~4843 &sk~1622177385~4844 &fk~1622177385~4845) (&fk~1622177385~4845))) &set~1622177385~4836 (lambda (&x~1622177385~4852) (list (cons &x~1622177385~4852 (cons &x~1622177385~4852 (quote (0)))))) (lambda () ((lambda (&x~1622177385~4878 &sk~1622177385~4879 &fk~1622177385~4880) (if (pair? &x~1622177385~4878) ((lambda (&x~1622177385~4883 &sk~1622177385~4884 &fk~1622177385~4885) (if (ex:free=? &x~1622177385~4883 (quote rename)) (&sk~1622177385~4884) (&fk~1622177385~4885))) (car &x~1622177385~4878) (lambda () ((lambda (&x~1622177385~4890 &sk~1622177385~4891 &fk~1622177385~4892) (((lambda (&loop~1622177385~4898) ((lambda (&temp~1622177385~4901) (set! &loop~1622177385~4898 &temp~1622177385~4901) ((lambda () &loop~1622177385~4898))) (lambda (&x~1622177385~4906 &result~1622177385~4907) ((lambda (&match-tail~1622177385~4908) (set! &match-tail~1622177385~4908 (lambda () ((lambda (&x~1622177385~4962 &sk~1622177385~4963 &fk~1622177385~4964) (if (null? &x~1622177385~4962) (&sk~1622177385~4963) (&fk~1622177385~4964))) &x~1622177385~4906 (lambda () (apply &sk~1622177385~4891 (if (null? &result~1622177385~4907) (map (lambda (&ignore~1622177385~4969) (quote ())) (quote (xs ys))) (apply map list (reverse &result~1622177385~4907))))) (lambda () ((lambda (&x~1622177385~4977 &sk~1622177385~4978 &fk~1622177385~4979) (&sk~1622177385~4978)) &x~1622177385~4906 (lambda () (&fk~1622177385~4892)) (lambda () (ex:invalid-form &x~1622177385~4906))))))) (if (null? &x~1622177385~4906) (begin (&match-tail~1622177385~4908)) (if (pair? &x~1622177385~4906) (begin ((lambda (&x~1622177385~4915 &sk~1622177385~4916 &fk~1622177385~4917) (if (pair? &x~1622177385~4915) ((lambda (&x~1622177385~4920 &sk~1622177385~4921 &fk~1622177385~4922) (if (&identifier?~1622177385~2110 &x~1622177385~4920) ((lambda (&x~1622177385~4925 &sk~1622177385~4926 &fk~1622177385~4927) (&sk~1622177385~4926 &x~1622177385~4925)) &x~1622177385~4920 &sk~1622177385~4921 &fk~1622177385~4922) (&fk~1622177385~4922))) (car &x~1622177385~4915) (lambda (&xs~1622177385~4929) ((lambda (&x~1622177385~4931 &sk~1622177385~4932 &fk~1622177385~4933) (if (pair? &x~1622177385~4931) ((lambda (&x~1622177385~4936 &sk~1622177385~4937 &fk~1622177385~4938) (if (&identifier?~1622177385~2110 &x~1622177385~4936) ((lambda (&x~1622177385~4941 &sk~1622177385~4942 &fk~1622177385~4943) (&sk~1622177385~4942 &x~1622177385~4941)) &x~1622177385~4936 &sk~1622177385~4937 &fk~1622177385~4938) (&fk~1622177385~4938))) (car &x~1622177385~4931) (lambda (&ys~1622177385~4945) ((lambda (&x~1622177385~4947 &sk~1622177385~4948 &fk~1622177385~4949) (if (null? &x~1622177385~4947) (&sk~1622177385~4948) (&fk~1622177385~4949))) (cdr &x~1622177385~4931) (lambda () (&sk~1622177385~4932 &ys~1622177385~4945)) &fk~1622177385~4933)) &fk~1622177385~4933) (&fk~1622177385~4933))) (cdr &x~1622177385~4915) (lambda (&ys~1622177385~4953) (&sk~1622177385~4916 &xs~1622177385~4929 &ys~1622177385~4953)) &fk~1622177385~4917)) &fk~1622177385~4917) (&fk~1622177385~4917))) (car &x~1622177385~4906) (lambda &car-vars~1622177385~4955 (&loop~1622177385~4898 (cdr &x~1622177385~4906) (cons &car-vars~1622177385~4955 &result~1622177385~4907))) &match-tail~1622177385~4908)) (begin (&fk~1622177385~4892))))) ex:undefined)))) ex:undefined) &x~1622177385~4890 (quote ()))) (cdr &x~1622177385~4878) (lambda (&xs~1622177385~4985 &ys~1622177385~4986) (&sk~1622177385~4879 &xs~1622177385~4985 &ys~1622177385~4986)) &fk~1622177385~4880)) &fk~1622177385~4880) (&fk~1622177385~4880))) &set~1622177385~4836 (lambda (&xs~1622177385~4988 &ys~1622177385~4989) (map (lambda (&x~1622177385~4991 &y~1622177385~4992) (cons &y~1622177385~4992 (cons &x~1622177385~4991 (quote (0))))) &xs~1622177385~4988 &ys~1622177385~4989)) (lambda () ((lambda (&x~1622177385~5000 &sk~1622177385~5001 &fk~1622177385~5002) (&sk~1622177385~5001)) &set~1622177385~4836 (lambda () (&syntax-violation~1622177385~2219 (quote export) "Invalid export set" &set~1622177385~4836)) (lambda () (ex:invalid-form &set~1622177385~4836))))))))) (set! &scan-imports~1622177385~2206 (lambda (&specs~1622177385~4809) (((lambda (&loop~1622177385~4815) ((lambda (&temp~1622177385~4818) (set! &loop~1622177385~4815 &temp~1622177385~4818) ((lambda () &loop~1622177385~4815))) (lambda (&specs~1622177385~4823 &imported-libraries~1622177385~4824 &imports~1622177385~4825) (if (null? &specs~1622177385~4823) (values &imported-libraries~1622177385~4824 (&unify-imports~1622177385~2210 &imports~1622177385~4825)) (call-with-values (lambda () (&scan-import-spec~1622177385~2207 (car &specs~1622177385~4823))) (lambda (&library-ref~1622177385~4829 &levels~1622177385~4830 &more-imports~1622177385~4831) (&loop~1622177385~4815 (cdr &specs~1622177385~4823) (if &library-ref~1622177385~4829 (cons (cons &library-ref~1622177385~4829 &levels~1622177385~4830) &imported-libraries~1622177385~4824) &imported-libraries~1622177385~4824) (append &more-imports~1622177385~4831 &imports~1622177385~4825)))))))) ex:undefined) &specs~1622177385~4809 (quote ()) (quote ())))) (set! &scan-import-spec~1622177385~2207 (lambda (&spec~1622177385~4035) (call-with-values (lambda () (&scan-levels~1622177385~2208 &spec~1622177385~4035)) (lambda (&levels~1622177385~4038 &import-set~1622177385~4039) (((lambda (&loop~1622177385~4045) ((lambda (&temp~1622177385~4048) (set! &loop~1622177385~4045 &temp~1622177385~4048) ((lambda () &loop~1622177385~4045))) (lambda (&import-set~1622177385~4053 &adjuster~1622177385~4054) ((lambda (&check-presence~1622177385~4055) (set! &check-presence~1622177385~4055 (lambda (&names~1622177385~4799 &mappings~1622177385~4800 &from~1622177385~4801) (for-each (lambda (&name~1622177385~4803) (let ((x (assq &name~1622177385~4803 &mappings~1622177385~4800))) (if x x (&syntax-violation~1622177385~2219 &from~1622177385~4801 (string-append "Identifier not in set: " (&list->string~1622177385~2240 (map car &mappings~1622177385~4800) " ")) &import-set~1622177385~4053 &name~1622177385~4803)))) &names~1622177385~4799))) ((lambda (&x~1622177385~4068 &sk~1622177385~4069 &fk~1622177385~4070) (if (pair? &x~1622177385~4068) ((lambda (&x~1622177385~4073 &sk~1622177385~4074 &fk~1622177385~4075) (if (ex:free=? &x~1622177385~4073 (quote primitives)) (&sk~1622177385~4074) (&fk~1622177385~4075))) (car &x~1622177385~4068) (lambda () ((lambda (&x~1622177385~4080 &sk~1622177385~4081 &fk~1622177385~4082) (((lambda (&loop~1622177385~4088) ((lambda (&temp~1622177385~4091) (set! &loop~1622177385~4088 &temp~1622177385~4091) ((lambda () &loop~1622177385~4088))) (lambda (&x~1622177385~4096 &result~1622177385~4097) ((lambda (&match-tail~1622177385~4098) (set! &match-tail~1622177385~4098 (lambda () ((lambda (&x~1622177385~4121 &sk~1622177385~4122 &fk~1622177385~4123) (if (null? &x~1622177385~4121) (&sk~1622177385~4122) (&fk~1622177385~4123))) &x~1622177385~4096 (lambda () (apply &sk~1622177385~4081 (if (null? &result~1622177385~4097) (map (lambda (&ignore~1622177385~4128) (quote ())) (quote (xs))) (apply map list (reverse &result~1622177385~4097))))) (lambda () ((lambda (&x~1622177385~4136 &sk~1622177385~4137 &fk~1622177385~4138) (&sk~1622177385~4137)) &x~1622177385~4096 (lambda () (&fk~1622177385~4082)) (lambda () (ex:invalid-form &x~1622177385~4096))))))) (if (null? &x~1622177385~4096) (begin (&match-tail~1622177385~4098)) (if (pair? &x~1622177385~4096) (begin ((lambda (&x~1622177385~4105 &sk~1622177385~4106 &fk~1622177385~4107) (if (&identifier?~1622177385~2110 &x~1622177385~4105) ((lambda (&x~1622177385~4110 &sk~1622177385~4111 &fk~1622177385~4112) (&sk~1622177385~4111 &x~1622177385~4110)) &x~1622177385~4105 &sk~1622177385~4106 &fk~1622177385~4107) (&fk~1622177385~4107))) (car &x~1622177385~4096) (lambda &car-vars~1622177385~4114 (&loop~1622177385~4088 (cdr &x~1622177385~4096) (cons &car-vars~1622177385~4114 &result~1622177385~4097))) &match-tail~1622177385~4098)) (begin (&fk~1622177385~4082))))) ex:undefined)))) ex:undefined) &x~1622177385~4080 (quote ()))) (cdr &x~1622177385~4068) (lambda (&xs~1622177385~4144) (&sk~1622177385~4069 &xs~1622177385~4144)) &fk~1622177385~4070)) &fk~1622177385~4070) (&fk~1622177385~4070))) &import-set~1622177385~4053 (lambda (&xs~1622177385~4146) (values #f &levels~1622177385~4038 (map (lambda (&mapping~1622177385~4148) (cons (car &mapping~1622177385~4148) (&make-binding~1622177385~2123 (quote variable) (cdr &mapping~1622177385~4148) &levels~1622177385~4038 #f (quote ())))) (&adjuster~1622177385~4054 (map (lambda (&name~1622177385~4152) (cons &name~1622177385~4152 &name~1622177385~4152)) (&syntax->datum~1622177385~2149 &xs~1622177385~4146)))))) (lambda () ((lambda (&x~1622177385~4170 &sk~1622177385~4171 &fk~1622177385~4172) (if (pair? &x~1622177385~4170) ((lambda (&x~1622177385~4175 &sk~1622177385~4176 &fk~1622177385~4177) (if (ex:free=? &x~1622177385~4175 (quote only)) (&sk~1622177385~4176) (&fk~1622177385~4177))) (car &x~1622177385~4170) (lambda () ((lambda (&x~1622177385~4182 &sk~1622177385~4183 &fk~1622177385~4184) (if (pair? &x~1622177385~4182) ((lambda (&x~1622177385~4187 &sk~1622177385~4188 &fk~1622177385~4189) (&sk~1622177385~4188 &x~1622177385~4187)) (car &x~1622177385~4182) (lambda (&set~1622177385~4191) ((lambda (&x~1622177385~4193 &sk~1622177385~4194 &fk~1622177385~4195) (((lambda (&loop~1622177385~4201) ((lambda (&temp~1622177385~4204) (set! &loop~1622177385~4201 &temp~1622177385~4204) ((lambda () &loop~1622177385~4201))) (lambda (&x~1622177385~4209 &result~1622177385~4210) ((lambda (&match-tail~1622177385~4211) (set! &match-tail~1622177385~4211 (lambda () ((lambda (&x~1622177385~4234 &sk~1622177385~4235 &fk~1622177385~4236) (if (null? &x~1622177385~4234) (&sk~1622177385~4235) (&fk~1622177385~4236))) &x~1622177385~4209 (lambda () (apply &sk~1622177385~4194 (if (null? &result~1622177385~4210) (map (lambda (&ignore~1622177385~4241) (quote ())) (quote (xs))) (apply map list (reverse &result~1622177385~4210))))) (lambda () ((lambda (&x~1622177385~4249 &sk~1622177385~4250 &fk~1622177385~4251) (&sk~1622177385~4250)) &x~1622177385~4209 (lambda () (&fk~1622177385~4195)) (lambda () (ex:invalid-form &x~1622177385~4209))))))) (if (null? &x~1622177385~4209) (begin (&match-tail~1622177385~4211)) (if (pair? &x~1622177385~4209) (begin ((lambda (&x~1622177385~4218 &sk~1622177385~4219 &fk~1622177385~4220) (if (&identifier?~1622177385~2110 &x~1622177385~4218) ((lambda (&x~1622177385~4223 &sk~1622177385~4224 &fk~1622177385~4225) (&sk~1622177385~4224 &x~1622177385~4223)) &x~1622177385~4218 &sk~1622177385~4219 &fk~1622177385~4220) (&fk~1622177385~4220))) (car &x~1622177385~4209) (lambda &car-vars~1622177385~4227 (&loop~1622177385~4201 (cdr &x~1622177385~4209) (cons &car-vars~1622177385~4227 &result~1622177385~4210))) &match-tail~1622177385~4211)) (begin (&fk~1622177385~4195))))) ex:undefined)))) ex:undefined) &x~1622177385~4193 (quote ()))) (cdr &x~1622177385~4182) (lambda (&xs~1622177385~4257) (&sk~1622177385~4183 &set~1622177385~4191 &xs~1622177385~4257)) &fk~1622177385~4184)) &fk~1622177385~4184) (&fk~1622177385~4184))) (cdr &x~1622177385~4170) (lambda (&set~1622177385~4259 &xs~1622177385~4260) (&sk~1622177385~4171 &set~1622177385~4259 &xs~1622177385~4260)) &fk~1622177385~4172)) &fk~1622177385~4172) (&fk~1622177385~4172))) &import-set~1622177385~4053 (lambda (&set~1622177385~4262 &xs~1622177385~4263) ((lambda (&args~1622177385~4266) (&loop~1622177385~4045 &set~1622177385~4262 (&compose~1622177385~2241 &adjuster~1622177385~4054 (lambda (&mappings~1622177385~4268) (&check-presence~1622177385~4055 &args~1622177385~4266 &mappings~1622177385~4268 (quote only)) (filter (lambda (&mapping~1622177385~4270) (memq (car &mapping~1622177385~4270) &args~1622177385~4266)) &mappings~1622177385~4268))))) (&syntax->datum~1622177385~2149 &xs~1622177385~4263))) (lambda () ((lambda (&x~1622177385~4289 &sk~1622177385~4290 &fk~1622177385~4291) (if (pair? &x~1622177385~4289) ((lambda (&x~1622177385~4294 &sk~1622177385~4295 &fk~1622177385~4296) (if (ex:free=? &x~1622177385~4294 (quote except)) (&sk~1622177385~4295) (&fk~1622177385~4296))) (car &x~1622177385~4289) (lambda () ((lambda (&x~1622177385~4301 &sk~1622177385~4302 &fk~1622177385~4303) (if (pair? &x~1622177385~4301) ((lambda (&x~1622177385~4306 &sk~1622177385~4307 &fk~1622177385~4308) (&sk~1622177385~4307 &x~1622177385~4306)) (car &x~1622177385~4301) (lambda (&set~1622177385~4310) ((lambda (&x~1622177385~4312 &sk~1622177385~4313 &fk~1622177385~4314) (((lambda (&loop~1622177385~4320) ((lambda (&temp~1622177385~4323) (set! &loop~1622177385~4320 &temp~1622177385~4323) ((lambda () &loop~1622177385~4320))) (lambda (&x~1622177385~4328 &result~1622177385~4329) ((lambda (&match-tail~1622177385~4330) (set! &match-tail~1622177385~4330 (lambda () ((lambda (&x~1622177385~4353 &sk~1622177385~4354 &fk~1622177385~4355) (if (null? &x~1622177385~4353) (&sk~1622177385~4354) (&fk~1622177385~4355))) &x~1622177385~4328 (lambda () (apply &sk~1622177385~4313 (if (null? &result~1622177385~4329) (map (lambda (&ignore~1622177385~4360) (quote ())) (quote (xs))) (apply map list (reverse &result~1622177385~4329))))) (lambda () ((lambda (&x~1622177385~4368 &sk~1622177385~4369 &fk~1622177385~4370) (&sk~1622177385~4369)) &x~1622177385~4328 (lambda () (&fk~1622177385~4314)) (lambda () (ex:invalid-form &x~1622177385~4328))))))) (if (null? &x~1622177385~4328) (begin (&match-tail~1622177385~4330)) (if (pair? &x~1622177385~4328) (begin ((lambda (&x~1622177385~4337 &sk~1622177385~4338 &fk~1622177385~4339) (if (&identifier?~1622177385~2110 &x~1622177385~4337) ((lambda (&x~1622177385~4342 &sk~1622177385~4343 &fk~1622177385~4344) (&sk~1622177385~4343 &x~1622177385~4342)) &x~1622177385~4337 &sk~1622177385~4338 &fk~1622177385~4339) (&fk~1622177385~4339))) (car &x~1622177385~4328) (lambda &car-vars~1622177385~4346 (&loop~1622177385~4320 (cdr &x~1622177385~4328) (cons &car-vars~1622177385~4346 &result~1622177385~4329))) &match-tail~1622177385~4330)) (begin (&fk~1622177385~4314))))) ex:undefined)))) ex:undefined) &x~1622177385~4312 (quote ()))) (cdr &x~1622177385~4301) (lambda (&xs~1622177385~4376) (&sk~1622177385~4302 &set~1622177385~4310 &xs~1622177385~4376)) &fk~1622177385~4303)) &fk~1622177385~4303) (&fk~1622177385~4303))) (cdr &x~1622177385~4289) (lambda (&set~1622177385~4378 &xs~1622177385~4379) (&sk~1622177385~4290 &set~1622177385~4378 &xs~1622177385~4379)) &fk~1622177385~4291)) &fk~1622177385~4291) (&fk~1622177385~4291))) &import-set~1622177385~4053 (lambda (&set~1622177385~4381 &xs~1622177385~4382) ((lambda (&args~1622177385~4385) (&loop~1622177385~4045 &set~1622177385~4381 (&compose~1622177385~2241 &adjuster~1622177385~4054 (lambda (&mappings~1622177385~4387) (&check-presence~1622177385~4055 &args~1622177385~4385 &mappings~1622177385~4387 (quote except)) (filter (lambda (&mapping~1622177385~4389) (not (memq (car &mapping~1622177385~4389) &args~1622177385~4385))) &mappings~1622177385~4387))))) (&syntax->datum~1622177385~2149 &xs~1622177385~4382))) (lambda () ((lambda (&x~1622177385~4410 &sk~1622177385~4411 &fk~1622177385~4412) (if (pair? &x~1622177385~4410) ((lambda (&x~1622177385~4415 &sk~1622177385~4416 &fk~1622177385~4417) (if (ex:free=? &x~1622177385~4415 (quote prefix)) (&sk~1622177385~4416) (&fk~1622177385~4417))) (car &x~1622177385~4410) (lambda () ((lambda (&x~1622177385~4422 &sk~1622177385~4423 &fk~1622177385~4424) (if (pair? &x~1622177385~4422) ((lambda (&x~1622177385~4427 &sk~1622177385~4428 &fk~1622177385~4429) (&sk~1622177385~4428 &x~1622177385~4427)) (car &x~1622177385~4422) (lambda (&set~1622177385~4431) ((lambda (&x~1622177385~4433 &sk~1622177385~4434 &fk~1622177385~4435) (if (pair? &x~1622177385~4433) ((lambda (&x~1622177385~4438 &sk~1622177385~4439 &fk~1622177385~4440) (if (&identifier?~1622177385~2110 &x~1622177385~4438) ((lambda (&x~1622177385~4443 &sk~1622177385~4444 &fk~1622177385~4445) (&sk~1622177385~4444 &x~1622177385~4443)) &x~1622177385~4438 &sk~1622177385~4439 &fk~1622177385~4440) (&fk~1622177385~4440))) (car &x~1622177385~4433) (lambda (&pre~1622177385~4447) ((lambda (&x~1622177385~4449 &sk~1622177385~4450 &fk~1622177385~4451) (if (null? &x~1622177385~4449) (&sk~1622177385~4450) (&fk~1622177385~4451))) (cdr &x~1622177385~4433) (lambda () (&sk~1622177385~4434 &pre~1622177385~4447)) &fk~1622177385~4435)) &fk~1622177385~4435) (&fk~1622177385~4435))) (cdr &x~1622177385~4422) (lambda (&pre~1622177385~4455) (&sk~1622177385~4423 &set~1622177385~4431 &pre~1622177385~4455)) &fk~1622177385~4424)) &fk~1622177385~4424) (&fk~1622177385~4424))) (cdr &x~1622177385~4410) (lambda (&set~1622177385~4457 &pre~1622177385~4458) (&sk~1622177385~4411 &set~1622177385~4457 &pre~1622177385~4458)) &fk~1622177385~4412)) &fk~1622177385~4412) (&fk~1622177385~4412))) &import-set~1622177385~4053 (lambda (&set~1622177385~4460 &pre~1622177385~4461) (&loop~1622177385~4045 &set~1622177385~4460 (&compose~1622177385~2241 &adjuster~1622177385~4054 (lambda (&mappings~1622177385~4463) (map (lambda (&mapping~1622177385~4465) (cons (string->symbol (string-append (symbol->string (&syntax->datum~1622177385~2149 &pre~1622177385~4461)) (symbol->string (car &mapping~1622177385~4465)))) (cdr &mapping~1622177385~4465))) &mappings~1622177385~4463))))) (lambda () ((lambda (&x~1622177385~4493 &sk~1622177385~4494 &fk~1622177385~4495) (if (pair? &x~1622177385~4493) ((lambda (&x~1622177385~4498 &sk~1622177385~4499 &fk~1622177385~4500) (if (ex:free=? &x~1622177385~4498 (quote rename)) (&sk~1622177385~4499) (&fk~1622177385~4500))) (car &x~1622177385~4493) (lambda () ((lambda (&x~1622177385~4505 &sk~1622177385~4506 &fk~1622177385~4507) (if (pair? &x~1622177385~4505) ((lambda (&x~1622177385~4510 &sk~1622177385~4511 &fk~1622177385~4512) (&sk~1622177385~4511 &x~1622177385~4510)) (car &x~1622177385~4505) (lambda (&set~1622177385~4514) ((lambda (&x~1622177385~4516 &sk~1622177385~4517 &fk~1622177385~4518) (((lambda (&loop~1622177385~4524) ((lambda (&temp~1622177385~4527) (set! &loop~1622177385~4524 &temp~1622177385~4527) ((lambda () &loop~1622177385~4524))) (lambda (&x~1622177385~4532 &result~1622177385~4533) ((lambda (&match-tail~1622177385~4534) (set! &match-tail~1622177385~4534 (lambda () ((lambda (&x~1622177385~4588 &sk~1622177385~4589 &fk~1622177385~4590) (if (null? &x~1622177385~4588) (&sk~1622177385~4589) (&fk~1622177385~4590))) &x~1622177385~4532 (lambda () (apply &sk~1622177385~4517 (if (null? &result~1622177385~4533) (map (lambda (&ignore~1622177385~4595) (quote ())) (quote (xs ys))) (apply map list (reverse &result~1622177385~4533))))) (lambda () ((lambda (&x~1622177385~4603 &sk~1622177385~4604 &fk~1622177385~4605) (&sk~1622177385~4604)) &x~1622177385~4532 (lambda () (&fk~1622177385~4518)) (lambda () (ex:invalid-form &x~1622177385~4532))))))) (if (null? &x~1622177385~4532) (begin (&match-tail~1622177385~4534)) (if (pair? &x~1622177385~4532) (begin ((lambda (&x~1622177385~4541 &sk~1622177385~4542 &fk~1622177385~4543) (if (pair? &x~1622177385~4541) ((lambda (&x~1622177385~4546 &sk~1622177385~4547 &fk~1622177385~4548) (if (&identifier?~1622177385~2110 &x~1622177385~4546) ((lambda (&x~1622177385~4551 &sk~1622177385~4552 &fk~1622177385~4553) (&sk~1622177385~4552 &x~1622177385~4551)) &x~1622177385~4546 &sk~1622177385~4547 &fk~1622177385~4548) (&fk~1622177385~4548))) (car &x~1622177385~4541) (lambda (&xs~1622177385~4555) ((lambda (&x~1622177385~4557 &sk~1622177385~4558 &fk~1622177385~4559) (if (pair? &x~1622177385~4557) ((lambda (&x~1622177385~4562 &sk~1622177385~4563 &fk~1622177385~4564) (if (&identifier?~1622177385~2110 &x~1622177385~4562) ((lambda (&x~1622177385~4567 &sk~1622177385~4568 &fk~1622177385~4569) (&sk~1622177385~4568 &x~1622177385~4567)) &x~1622177385~4562 &sk~1622177385~4563 &fk~1622177385~4564) (&fk~1622177385~4564))) (car &x~1622177385~4557) (lambda (&ys~1622177385~4571) ((lambda (&x~1622177385~4573 &sk~1622177385~4574 &fk~1622177385~4575) (if (null? &x~1622177385~4573) (&sk~1622177385~4574) (&fk~1622177385~4575))) (cdr &x~1622177385~4557) (lambda () (&sk~1622177385~4558 &ys~1622177385~4571)) &fk~1622177385~4559)) &fk~1622177385~4559) (&fk~1622177385~4559))) (cdr &x~1622177385~4541) (lambda (&ys~1622177385~4579) (&sk~1622177385~4542 &xs~1622177385~4555 &ys~1622177385~4579)) &fk~1622177385~4543)) &fk~1622177385~4543) (&fk~1622177385~4543))) (car &x~1622177385~4532) (lambda &car-vars~1622177385~4581 (&loop~1622177385~4524 (cdr &x~1622177385~4532) (cons &car-vars~1622177385~4581 &result~1622177385~4533))) &match-tail~1622177385~4534)) (begin (&fk~1622177385~4518))))) ex:undefined)))) ex:undefined) &x~1622177385~4516 (quote ()))) (cdr &x~1622177385~4505) (lambda (&xs~1622177385~4611 &ys~1622177385~4612) (&sk~1622177385~4506 &set~1622177385~4514 &xs~1622177385~4611 &ys~1622177385~4612)) &fk~1622177385~4507)) &fk~1622177385~4507) (&fk~1622177385~4507))) (cdr &x~1622177385~4493) (lambda (&set~1622177385~4614 &xs~1622177385~4615 &ys~1622177385~4616) (&sk~1622177385~4494 &set~1622177385~4614 &xs~1622177385~4615 &ys~1622177385~4616)) &fk~1622177385~4495)) &fk~1622177385~4495) (&fk~1622177385~4495))) &import-set~1622177385~4053 (lambda (&set~1622177385~4618 &xs~1622177385~4619 &ys~1622177385~4620) ((lambda (&args~1622177385~4623) (&loop~1622177385~4045 &set~1622177385~4618 (&compose~1622177385~2241 &adjuster~1622177385~4054 (lambda (&mappings~1622177385~4625) (&check-presence~1622177385~4055 (map car &args~1622177385~4623) &mappings~1622177385~4625 (quote rename)) (map (lambda (&mapping~1622177385~4627) (cons ((lambda (&t~1622177385~4631) (if &t~1622177385~4631 (cadr &t~1622177385~4631) (begin (car &mapping~1622177385~4627)))) (assq (car &mapping~1622177385~4627) &args~1622177385~4623)) (cdr &mapping~1622177385~4627))) &mappings~1622177385~4625))))) (&syntax->datum~1622177385~2149 (cddr &import-set~1622177385~4053)))) (lambda () ((lambda (&x~1622177385~4644 &sk~1622177385~4645 &fk~1622177385~4646) (if (pair? &x~1622177385~4644) ((lambda (&x~1622177385~4649 &sk~1622177385~4650 &fk~1622177385~4651) (if (ex:free=? &x~1622177385~4649 (quote primitives)) (&sk~1622177385~4650) (&fk~1622177385~4651))) (car &x~1622177385~4644) (lambda () ((lambda (&x~1622177385~4656 &sk~1622177385~4657 &fk~1622177385~4658) (&sk~1622177385~4657)) (cdr &x~1622177385~4644) (lambda () (&sk~1622177385~4645)) &fk~1622177385~4646)) &fk~1622177385~4646) (&fk~1622177385~4646))) &import-set~1622177385~4053 (lambda () (&invalid-form~1622177385~2243 &import-set~1622177385~4053)) (lambda () ((lambda (&x~1622177385~4670 &sk~1622177385~4671 &fk~1622177385~4672) (if (pair? &x~1622177385~4670) ((lambda (&x~1622177385~4675 &sk~1622177385~4676 &fk~1622177385~4677) (if (ex:free=? &x~1622177385~4675 (quote only)) (&sk~1622177385~4676) (&fk~1622177385~4677))) (car &x~1622177385~4670) (lambda () ((lambda (&x~1622177385~4682 &sk~1622177385~4683 &fk~1622177385~4684) (&sk~1622177385~4683)) (cdr &x~1622177385~4670) (lambda () (&sk~1622177385~4671)) &fk~1622177385~4672)) &fk~1622177385~4672) (&fk~1622177385~4672))) &import-set~1622177385~4053 (lambda () (&invalid-form~1622177385~2243 &import-set~1622177385~4053)) (lambda () ((lambda (&x~1622177385~4696 &sk~1622177385~4697 &fk~1622177385~4698) (if (pair? &x~1622177385~4696) ((lambda (&x~1622177385~4701 &sk~1622177385~4702 &fk~1622177385~4703) (if (ex:free=? &x~1622177385~4701 (quote except)) (&sk~1622177385~4702) (&fk~1622177385~4703))) (car &x~1622177385~4696) (lambda () ((lambda (&x~1622177385~4708 &sk~1622177385~4709 &fk~1622177385~4710) (&sk~1622177385~4709)) (cdr &x~1622177385~4696) (lambda () (&sk~1622177385~4697)) &fk~1622177385~4698)) &fk~1622177385~4698) (&fk~1622177385~4698))) &import-set~1622177385~4053 (lambda () (&invalid-form~1622177385~2243 &import-set~1622177385~4053)) (lambda () ((lambda (&x~1622177385~4722 &sk~1622177385~4723 &fk~1622177385~4724) (if (pair? &x~1622177385~4722) ((lambda (&x~1622177385~4727 &sk~1622177385~4728 &fk~1622177385~4729) (if (ex:free=? &x~1622177385~4727 (quote prefix)) (&sk~1622177385~4728) (&fk~1622177385~4729))) (car &x~1622177385~4722) (lambda () ((lambda (&x~1622177385~4734 &sk~1622177385~4735 &fk~1622177385~4736) (&sk~1622177385~4735)) (cdr &x~1622177385~4722) (lambda () (&sk~1622177385~4723)) &fk~1622177385~4724)) &fk~1622177385~4724) (&fk~1622177385~4724))) &import-set~1622177385~4053 (lambda () (&invalid-form~1622177385~2243 &import-set~1622177385~4053)) (lambda () ((lambda (&x~1622177385~4748 &sk~1622177385~4749 &fk~1622177385~4750) (if (pair? &x~1622177385~4748) ((lambda (&x~1622177385~4753 &sk~1622177385~4754 &fk~1622177385~4755) (if (ex:free=? &x~1622177385~4753 (quote rename)) (&sk~1622177385~4754) (&fk~1622177385~4755))) (car &x~1622177385~4748) (lambda () ((lambda (&x~1622177385~4760 &sk~1622177385~4761 &fk~1622177385~4762) (&sk~1622177385~4761)) (cdr &x~1622177385~4748) (lambda () (&sk~1622177385~4749)) &fk~1622177385~4750)) &fk~1622177385~4750) (&fk~1622177385~4750))) &import-set~1622177385~4053 (lambda () (&invalid-form~1622177385~2243 &import-set~1622177385~4053)) (lambda () ((lambda (&x~1622177385~4770 &sk~1622177385~4771 &fk~1622177385~4772) (&sk~1622177385~4771)) &import-set~1622177385~4053 (lambda () ((lambda (&library-ref~1622177385~4776) (if &library-ref~1622177385~4776 ((lambda (&library~1622177385~4781) ((lambda (&exports~1622177385~4784) ((lambda (&imports~1622177385~4787) (values (&syntax->datum~1622177385~2149 &library-ref~1622177385~4776) &levels~1622177385~4038 &imports~1622177385~4787)) (map (lambda (&mapping~1622177385~4789) (cons (car &mapping~1622177385~4789) ((lambda (&binding~1622177385~4792) (&make-binding~1622177385~2123 (&binding-type~1622177385~2124 &binding~1622177385~4792) (&binding-name~1622177385~2125 &binding~1622177385~4792) (&compose-levels~1622177385~2209 &levels~1622177385~4038 (&binding-levels~1622177385~2126 &binding~1622177385~4792)) (&binding-mutable?~1622177385~2127 &binding~1622177385~4792) (&binding-library~1622177385~2129 &binding~1622177385~4792))) (cdr (assq (cdr &mapping~1622177385~4789) &exports~1622177385~4784))))) (&adjuster~1622177385~4054 (map (lambda (&name~1622177385~4794) (cons &name~1622177385~4794 &name~1622177385~4794)) (map car &exports~1622177385~4784)))))) (ex:library-exports &library~1622177385~4781))) (ex:lookup-library (&syntax->datum~1622177385~2149 &library-ref~1622177385~4776))) (&syntax-violation~1622177385~2219 (quote import) "Invalid import set" &import-set~1622177385~4053))) (&library-ref~1622177385~2212 &import-set~1622177385~4053))) (lambda () (ex:invalid-form &import-set~1622177385~4053)))))))))))))))))))))))) ex:undefined)))) ex:undefined) &import-set~1622177385~4039 (lambda (&set~1622177385~4807) &set~1622177385~4807)))))) (set! &scan-levels~1622177385~2208 (lambda (&spec~1622177385~3825) ((lambda (&x~1622177385~3840 &sk~1622177385~3841 &fk~1622177385~3842) (if (pair? &x~1622177385~3840) ((lambda (&x~1622177385~3845 &sk~1622177385~3846 &fk~1622177385~3847) (if (ex:free=? &x~1622177385~3845 (quote for)) (&sk~1622177385~3846) (&fk~1622177385~3847))) (car &x~1622177385~3840) (lambda () ((lambda (&x~1622177385~3852 &sk~1622177385~3853 &fk~1622177385~3854) (if (pair? &x~1622177385~3852) ((lambda (&x~1622177385~3857 &sk~1622177385~3858 &fk~1622177385~3859) (&sk~1622177385~3858 &x~1622177385~3857)) (car &x~1622177385~3852) (lambda (&set~1622177385~3861) ((lambda (&x~1622177385~3863 &sk~1622177385~3864 &fk~1622177385~3865) (((lambda (&loop~1622177385~3871) ((lambda (&temp~1622177385~3874) (set! &loop~1622177385~3871 &temp~1622177385~3874) ((lambda () &loop~1622177385~3871))) (lambda (&x~1622177385~3879 &result~1622177385~3880) ((lambda (&match-tail~1622177385~3881) (set! &match-tail~1622177385~3881 (lambda () ((lambda (&x~1622177385~3899 &sk~1622177385~3900 &fk~1622177385~3901) (if (null? &x~1622177385~3899) (&sk~1622177385~3900) (&fk~1622177385~3901))) &x~1622177385~3879 (lambda () (apply &sk~1622177385~3864 (if (null? &result~1622177385~3880) (map (lambda (&ignore~1622177385~3906) (quote ())) (quote (levels))) (apply map list (reverse &result~1622177385~3880))))) (lambda () ((lambda (&x~1622177385~3914 &sk~1622177385~3915 &fk~1622177385~3916) (&sk~1622177385~3915)) &x~1622177385~3879 (lambda () (&fk~1622177385~3865)) (lambda () (ex:invalid-form &x~1622177385~3879))))))) (if (null? &x~1622177385~3879) (begin (&match-tail~1622177385~3881)) (if (pair? &x~1622177385~3879) (begin ((lambda (&x~1622177385~3888 &sk~1622177385~3889 &fk~1622177385~3890) (&sk~1622177385~3889 &x~1622177385~3888)) (car &x~1622177385~3879) (lambda &car-vars~1622177385~3892 (&loop~1622177385~3871 (cdr &x~1622177385~3879) (cons &car-vars~1622177385~3892 &result~1622177385~3880))) &match-tail~1622177385~3881)) (begin (&fk~1622177385~3865))))) ex:undefined)))) ex:undefined) &x~1622177385~3863 (quote ()))) (cdr &x~1622177385~3852) (lambda (&levels~1622177385~3922) (&sk~1622177385~3853 &set~1622177385~3861 &levels~1622177385~3922)) &fk~1622177385~3854)) &fk~1622177385~3854) (&fk~1622177385~3854))) (cdr &x~1622177385~3840) (lambda (&set~1622177385~3924 &levels~1622177385~3925) (&sk~1622177385~3841 &set~1622177385~3924 &levels~1622177385~3925)) &fk~1622177385~3842)) &fk~1622177385~3842) (&fk~1622177385~3842))) &spec~1622177385~3825 (lambda (&set~1622177385~3927 &levels~1622177385~3928) ((lambda (&levels~1622177385~3931) (&check-set?~1622177385~2237 &levels~1622177385~3931 = (lambda (&dup~1622177385~3933) (&syntax-violation~1622177385~2219 (quote for) "Repeated level in for spec" &spec~1622177385~3825 &dup~1622177385~3933))) (values &levels~1622177385~3931 &set~1622177385~3927)) (map (lambda (&level~1622177385~3936) ((lambda (&x~1622177385~3941 &sk~1622177385~3942 &fk~1622177385~3943) (if (ex:free=? &x~1622177385~3941 (quote run)) (&sk~1622177385~3942) (&fk~1622177385~3943))) &level~1622177385~3936 (lambda () 0) (lambda () ((lambda (&x~1622177385~3952 &sk~1622177385~3953 &fk~1622177385~3954) (if (ex:free=? &x~1622177385~3952 (quote expand)) (&sk~1622177385~3953) (&fk~1622177385~3954))) &level~1622177385~3936 (lambda () 1) (lambda () ((lambda (&x~1622177385~3973 &sk~1622177385~3974 &fk~1622177385~3975) (if (pair? &x~1622177385~3973) ((lambda (&x~1622177385~3978 &sk~1622177385~3979 &fk~1622177385~3980) (if (ex:free=? &x~1622177385~3978 (quote meta)) (&sk~1622177385~3979) (&fk~1622177385~3980))) (car &x~1622177385~3973) (lambda () ((lambda (&x~1622177385~3985 &sk~1622177385~3986 &fk~1622177385~3987) (if (pair? &x~1622177385~3985) ((lambda (&x~1622177385~3990 &sk~1622177385~3991 &fk~1622177385~3992) (if (integer? &x~1622177385~3990) ((lambda (&x~1622177385~3995 &sk~1622177385~3996 &fk~1622177385~3997) (&sk~1622177385~3996 &x~1622177385~3995)) &x~1622177385~3990 &sk~1622177385~3991 &fk~1622177385~3992) (&fk~1622177385~3992))) (car &x~1622177385~3985) (lambda (&n~1622177385~3999) ((lambda (&x~1622177385~4001 &sk~1622177385~4002 &fk~1622177385~4003) (if (null? &x~1622177385~4001) (&sk~1622177385~4002) (&fk~1622177385~4003))) (cdr &x~1622177385~3985) (lambda () (&sk~1622177385~3986 &n~1622177385~3999)) &fk~1622177385~3987)) &fk~1622177385~3987) (&fk~1622177385~3987))) (cdr &x~1622177385~3973) (lambda (&n~1622177385~4007) (&sk~1622177385~3974 &n~1622177385~4007)) &fk~1622177385~3975)) &fk~1622177385~3975) (&fk~1622177385~3975))) &level~1622177385~3936 (lambda (&n~1622177385~4009) &n~1622177385~4009) (lambda () ((lambda (&x~1622177385~4015 &sk~1622177385~4016 &fk~1622177385~4017) (&sk~1622177385~4016)) &level~1622177385~3936 (lambda () (&syntax-violation~1622177385~2219 (quote for) "Invalid level in for spec" &spec~1622177385~3825 &level~1622177385~3936)) (lambda () (ex:invalid-form &level~1622177385~3936)))))))))) &levels~1622177385~3928))) (lambda () ((lambda (&x~1622177385~4027 &sk~1622177385~4028 &fk~1622177385~4029) (&sk~1622177385~4028)) &spec~1622177385~3825 (lambda () (values (quote (0)) &spec~1622177385~3825)) (lambda () (ex:invalid-form &spec~1622177385~3825))))))) (set! &compose-levels~1622177385~2209 (lambda (&levels~1622177385~3818 &levels*~1622177385~3819) (apply &unionv~1622177385~2238 (map (lambda (&level~1622177385~3821) (map (lambda (&level*~1622177385~3823) (+ &level~1622177385~3821 &level*~1622177385~3823)) &levels*~1622177385~3819)) &levels~1622177385~3818)))) (set! &unify-imports~1622177385~2210 (lambda (&imports~1622177385~3784) ((lambda (&seen~1622177385~3787) (((lambda (&loop~1622177385~3793) ((lambda (&temp~1622177385~3796) (set! &loop~1622177385~3793 &temp~1622177385~3796) ((lambda () &loop~1622177385~3793))) (lambda (&imports~1622177385~3801) (if (null? &imports~1622177385~3801) &seen~1622177385~3787 ((lambda (&mapping~1622177385~3806) ((lambda (&probe~1622177385~3809) (if &probe~1622177385~3809 (begin (let ((x (eq? (&binding-name~1622177385~2125 (cdr &mapping~1622177385~3806)) (&binding-name~1622177385~2125 (cdr &probe~1622177385~3809))))) (if x x (&syntax-violation~1622177385~2219 (quote import) (string-append "Different bindings for identifier imported from libraries (" (&list->string~1622177385~2240 (&binding-library~1622177385~2129 (cdr &mapping~1622177385~3806)) " ") ") and (" (&list->string~1622177385~2240 (&binding-library~1622177385~2129 (cdr &probe~1622177385~3809)) " ") ")") (car &mapping~1622177385~3806)))) (set-cdr! &probe~1622177385~3809 (&make-binding~1622177385~2123 (&binding-type~1622177385~2124 (cdr &probe~1622177385~3809)) (&binding-name~1622177385~2125 (cdr &probe~1622177385~3809)) (&unionv~1622177385~2238 (&binding-levels~1622177385~2126 (cdr &probe~1622177385~3809)) (&binding-levels~1622177385~2126 (cdr &mapping~1622177385~3806))) (&binding-mutable?~1622177385~2127 (cdr &probe~1622177385~3809)) (&binding-library~1622177385~2129 (cdr &probe~1622177385~3809))))) (set! &seen~1622177385~3787 (cons &mapping~1622177385~3806 &seen~1622177385~3787))) (&loop~1622177385~3793 (cdr &imports~1622177385~3801))) (assq (car &mapping~1622177385~3806) &seen~1622177385~3787))) (car &imports~1622177385~3801)))))) ex:undefined) &imports~1622177385~3784)) (quote ())))) (set! &scan-library-name~1622177385~2211 (lambda (&e~1622177385~3782) (&library-ref-helper~1622177385~2213 &e~1622177385~3782 &version?~1622177385~2214))) (set! &library-ref~1622177385~2212 (lambda (&e~1622177385~3699) (&library-ref-helper~1622177385~2213 ((lambda (&x~1622177385~3712 &sk~1622177385~3713 &fk~1622177385~3714) (if (pair? &x~1622177385~3712) ((lambda (&x~1622177385~3717 &sk~1622177385~3718 &fk~1622177385~3719) (if (ex:free=? &x~1622177385~3717 (quote library)) (&sk~1622177385~3718) (&fk~1622177385~3719))) (car &x~1622177385~3712) (lambda () ((lambda (&x~1622177385~3724 &sk~1622177385~3725 &fk~1622177385~3726) (if (pair? &x~1622177385~3724) ((lambda (&x~1622177385~3729 &sk~1622177385~3730 &fk~1622177385~3731) (&sk~1622177385~3730 &x~1622177385~3729)) (car &x~1622177385~3724) (lambda (&name~1622177385~3733) ((lambda (&x~1622177385~3735 &sk~1622177385~3736 &fk~1622177385~3737) (if (null? &x~1622177385~3735) (&sk~1622177385~3736) (&fk~1622177385~3737))) (cdr &x~1622177385~3724) (lambda () (&sk~1622177385~3725 &name~1622177385~3733)) &fk~1622177385~3726)) &fk~1622177385~3726) (&fk~1622177385~3726))) (cdr &x~1622177385~3712) (lambda (&name~1622177385~3741) (&sk~1622177385~3713 &name~1622177385~3741)) &fk~1622177385~3714)) &fk~1622177385~3714) (&fk~1622177385~3714))) &e~1622177385~3699 (lambda (&name~1622177385~3743) &name~1622177385~3743) (lambda () ((lambda (&x~1622177385~3753 &sk~1622177385~3754 &fk~1622177385~3755) (if (pair? &x~1622177385~3753) ((lambda (&x~1622177385~3758 &sk~1622177385~3759 &fk~1622177385~3760) (if (ex:free=? &x~1622177385~3758 (quote library)) (&sk~1622177385~3759) (&fk~1622177385~3760))) (car &x~1622177385~3753) (lambda () ((lambda (&x~1622177385~3765 &sk~1622177385~3766 &fk~1622177385~3767) (&sk~1622177385~3766)) (cdr &x~1622177385~3753) (lambda () (&sk~1622177385~3754)) &fk~1622177385~3755)) &fk~1622177385~3755) (&fk~1622177385~3755))) &e~1622177385~3699 (lambda () (&invalid-form~1622177385~2243 &e~1622177385~3699)) (lambda () ((lambda (&x~1622177385~3775 &sk~1622177385~3776 &fk~1622177385~3777) (&sk~1622177385~3776)) &e~1622177385~3699 (lambda () &e~1622177385~3699) (lambda () (ex:invalid-form &e~1622177385~3699))))))) &version-reference?~1622177385~2216))) (set! &library-ref-helper~1622177385~2213 (lambda (&e~1622177385~3515 &version?~1622177385~3516) ((lambda (&x~1622177385~3525 &sk~1622177385~3526 &fk~1622177385~3527) (((lambda (&loop~1622177385~3533) ((lambda (&temp~1622177385~3536) (set! &loop~1622177385~3533 &temp~1622177385~3536) ((lambda () &loop~1622177385~3533))) (lambda (&x~1622177385~3541 &result~1622177385~3542) ((lambda (&match-tail~1622177385~3543) (set! &match-tail~1622177385~3543 (lambda () ((lambda (&x~1622177385~3566 &sk~1622177385~3567 &fk~1622177385~3568) (if (null? &x~1622177385~3566) (&sk~1622177385~3567) (&fk~1622177385~3568))) &x~1622177385~3541 (lambda () (apply &sk~1622177385~3526 (if (null? &result~1622177385~3542) (map (lambda (&ignore~1622177385~3573) (quote ())) (quote (ids))) (apply map list (reverse &result~1622177385~3542))))) (lambda () ((lambda (&x~1622177385~3581 &sk~1622177385~3582 &fk~1622177385~3583) (&sk~1622177385~3582)) &x~1622177385~3541 (lambda () (&fk~1622177385~3527)) (lambda () (ex:invalid-form &x~1622177385~3541))))))) (if (null? &x~1622177385~3541) (begin (&match-tail~1622177385~3543)) (if (pair? &x~1622177385~3541) (begin ((lambda (&x~1622177385~3550 &sk~1622177385~3551 &fk~1622177385~3552) (if (&identifier?~1622177385~2110 &x~1622177385~3550) ((lambda (&x~1622177385~3555 &sk~1622177385~3556 &fk~1622177385~3557) (&sk~1622177385~3556 &x~1622177385~3555)) &x~1622177385~3550 &sk~1622177385~3551 &fk~1622177385~3552) (&fk~1622177385~3552))) (car &x~1622177385~3541) (lambda &car-vars~1622177385~3559 (&loop~1622177385~3533 (cdr &x~1622177385~3541) (cons &car-vars~1622177385~3559 &result~1622177385~3542))) &match-tail~1622177385~3543)) (begin (&fk~1622177385~3527))))) ex:undefined)))) ex:undefined) &x~1622177385~3525 (quote ()))) &e~1622177385~3515 (lambda (&ids~1622177385~3589) &ids~1622177385~3589) (lambda () ((lambda (&x~1622177385~3599 &sk~1622177385~3600 &fk~1622177385~3601) (((lambda (&loop~1622177385~3607) ((lambda (&temp~1622177385~3610) (set! &loop~1622177385~3607 &temp~1622177385~3610) ((lambda () &loop~1622177385~3607))) (lambda (&x~1622177385~3615 &result~1622177385~3616) ((lambda (&match-tail~1622177385~3617) (set! &match-tail~1622177385~3617 (lambda () ((lambda (&x~1622177385~3646 &sk~1622177385~3647 &fk~1622177385~3648) (if (pair? &x~1622177385~3646) ((lambda (&x~1622177385~3651 &sk~1622177385~3652 &fk~1622177385~3653) (if (&version?~1622177385~3516 &x~1622177385~3651) ((lambda (&x~1622177385~3656 &sk~1622177385~3657 &fk~1622177385~3658) (&sk~1622177385~3657)) &x~1622177385~3651 &sk~1622177385~3652 &fk~1622177385~3653) (&fk~1622177385~3653))) (car &x~1622177385~3646) (lambda () ((lambda (&x~1622177385~3661 &sk~1622177385~3662 &fk~1622177385~3663) (if (null? &x~1622177385~3661) (&sk~1622177385~3662) (&fk~1622177385~3663))) (cdr &x~1622177385~3646) (lambda () (&sk~1622177385~3647)) &fk~1622177385~3648)) &fk~1622177385~3648) (&fk~1622177385~3648))) &x~1622177385~3615 (lambda () (apply &sk~1622177385~3600 (if (null? &result~1622177385~3616) (map (lambda (&ignore~1622177385~3669) (quote ())) (quote (ids))) (apply map list (reverse &result~1622177385~3616))))) (lambda () ((lambda (&x~1622177385~3677 &sk~1622177385~3678 &fk~1622177385~3679) (&sk~1622177385~3678)) &x~1622177385~3615 (lambda () (&fk~1622177385~3601)) (lambda () (ex:invalid-form &x~1622177385~3615))))))) (if (null? &x~1622177385~3615) (begin (&match-tail~1622177385~3617)) (if (pair? &x~1622177385~3615) (begin ((lambda (&x~1622177385~3624 &sk~1622177385~3625 &fk~1622177385~3626) (if (&identifier?~1622177385~2110 &x~1622177385~3624) ((lambda (&x~1622177385~3629 &sk~1622177385~3630 &fk~1622177385~3631) (&sk~1622177385~3630 &x~1622177385~3629)) &x~1622177385~3624 &sk~1622177385~3625 &fk~1622177385~3626) (&fk~1622177385~3626))) (car &x~1622177385~3615) (lambda &car-vars~1622177385~3633 (&loop~1622177385~3607 (cdr &x~1622177385~3615) (cons &car-vars~1622177385~3633 &result~1622177385~3616))) &match-tail~1622177385~3617)) (begin (&fk~1622177385~3601))))) ex:undefined)))) ex:undefined) &x~1622177385~3599 (quote ()))) &e~1622177385~3515 (lambda (&ids~1622177385~3685) &ids~1622177385~3685) (lambda () ((lambda (&x~1622177385~3691 &sk~1622177385~3692 &fk~1622177385~3693) (&sk~1622177385~3692)) &e~1622177385~3515 (lambda () (&syntax-violation~1622177385~2219 (quote library) "Invalid library reference" &e~1622177385~3515)) (lambda () (ex:invalid-form &e~1622177385~3515))))))))) (set! &version?~1622177385~2214 (lambda (&e~1622177385~3511) (if (list? &e~1622177385~3511) (for-all &subversion?~1622177385~2215 &e~1622177385~3511) #f))) (set! &subversion?~1622177385~2215 (lambda (&x~1622177385~3507) (if (integer? &x~1622177385~3507) (>= &x~1622177385~3507 0) #f))) (set! &version-reference?~1622177385~2216 (lambda (&e~1622177385~3193) ((lambda (&x~1622177385~3206 &sk~1622177385~3207 &fk~1622177385~3208) (if (pair? &x~1622177385~3206) ((lambda (&x~1622177385~3211 &sk~1622177385~3212 &fk~1622177385~3213) (if (ex:free=? &x~1622177385~3211 (quote and)) (&sk~1622177385~3212) (&fk~1622177385~3213))) (car &x~1622177385~3206) (lambda () ((lambda (&x~1622177385~3218 &sk~1622177385~3219 &fk~1622177385~3220) (((lambda (&loop~1622177385~3226) ((lambda (&temp~1622177385~3229) (set! &loop~1622177385~3226 &temp~1622177385~3229) ((lambda () &loop~1622177385~3226))) (lambda (&x~1622177385~3234 &result~1622177385~3235) ((lambda (&match-tail~1622177385~3236) (set! &match-tail~1622177385~3236 (lambda () ((lambda (&x~1622177385~3259 &sk~1622177385~3260 &fk~1622177385~3261) (if (null? &x~1622177385~3259) (&sk~1622177385~3260) (&fk~1622177385~3261))) &x~1622177385~3234 (lambda () (apply &sk~1622177385~3219 (if (null? &result~1622177385~3235) (map (lambda (&ignore~1622177385~3266) (quote ())) (quote ())) (apply map list (reverse &result~1622177385~3235))))) (lambda () ((lambda (&x~1622177385~3274 &sk~1622177385~3275 &fk~1622177385~3276) (&sk~1622177385~3275)) &x~1622177385~3234 (lambda () (&fk~1622177385~3220)) (lambda () (ex:invalid-form &x~1622177385~3234))))))) (if (null? &x~1622177385~3234) (begin (&match-tail~1622177385~3236)) (if (pair? &x~1622177385~3234) (begin ((lambda (&x~1622177385~3243 &sk~1622177385~3244 &fk~1622177385~3245) (if (&version-reference?~1622177385~2216 &x~1622177385~3243) ((lambda (&x~1622177385~3248 &sk~1622177385~3249 &fk~1622177385~3250) (&sk~1622177385~3249)) &x~1622177385~3243 &sk~1622177385~3244 &fk~1622177385~3245) (&fk~1622177385~3245))) (car &x~1622177385~3234) (lambda &car-vars~1622177385~3252 (&loop~1622177385~3226 (cdr &x~1622177385~3234) (cons &car-vars~1622177385~3252 &result~1622177385~3235))) &match-tail~1622177385~3236)) (begin (&fk~1622177385~3220))))) ex:undefined)))) ex:undefined) &x~1622177385~3218 (quote ()))) (cdr &x~1622177385~3206) (lambda () (&sk~1622177385~3207)) &fk~1622177385~3208)) &fk~1622177385~3208) (&fk~1622177385~3208))) &e~1622177385~3193 (lambda () #t) (lambda () ((lambda (&x~1622177385~3296 &sk~1622177385~3297 &fk~1622177385~3298) (if (pair? &x~1622177385~3296) ((lambda (&x~1622177385~3301 &sk~1622177385~3302 &fk~1622177385~3303) (if (ex:free=? &x~1622177385~3301 (quote or)) (&sk~1622177385~3302) (&fk~1622177385~3303))) (car &x~1622177385~3296) (lambda () ((lambda (&x~1622177385~3308 &sk~1622177385~3309 &fk~1622177385~3310) (((lambda (&loop~1622177385~3316) ((lambda (&temp~1622177385~3319) (set! &loop~1622177385~3316 &temp~1622177385~3319) ((lambda () &loop~1622177385~3316))) (lambda (&x~1622177385~3324 &result~1622177385~3325) ((lambda (&match-tail~1622177385~3326) (set! &match-tail~1622177385~3326 (lambda () ((lambda (&x~1622177385~3349 &sk~1622177385~3350 &fk~1622177385~3351) (if (null? &x~1622177385~3349) (&sk~1622177385~3350) (&fk~1622177385~3351))) &x~1622177385~3324 (lambda () (apply &sk~1622177385~3309 (if (null? &result~1622177385~3325) (map (lambda (&ignore~1622177385~3356) (quote ())) (quote ())) (apply map list (reverse &result~1622177385~3325))))) (lambda () ((lambda (&x~1622177385~3364 &sk~1622177385~3365 &fk~1622177385~3366) (&sk~1622177385~3365)) &x~1622177385~3324 (lambda () (&fk~1622177385~3310)) (lambda () (ex:invalid-form &x~1622177385~3324))))))) (if (null? &x~1622177385~3324) (begin (&match-tail~1622177385~3326)) (if (pair? &x~1622177385~3324) (begin ((lambda (&x~1622177385~3333 &sk~1622177385~3334 &fk~1622177385~3335) (if (&version-reference?~1622177385~2216 &x~1622177385~3333) ((lambda (&x~1622177385~3338 &sk~1622177385~3339 &fk~1622177385~3340) (&sk~1622177385~3339)) &x~1622177385~3333 &sk~1622177385~3334 &fk~1622177385~3335) (&fk~1622177385~3335))) (car &x~1622177385~3324) (lambda &car-vars~1622177385~3342 (&loop~1622177385~3316 (cdr &x~1622177385~3324) (cons &car-vars~1622177385~3342 &result~1622177385~3325))) &match-tail~1622177385~3326)) (begin (&fk~1622177385~3310))))) ex:undefined)))) ex:undefined) &x~1622177385~3308 (quote ()))) (cdr &x~1622177385~3296) (lambda () (&sk~1622177385~3297)) &fk~1622177385~3298)) &fk~1622177385~3298) (&fk~1622177385~3298))) &e~1622177385~3193 (lambda () #t) (lambda () ((lambda (&x~1622177385~3388 &sk~1622177385~3389 &fk~1622177385~3390) (if (pair? &x~1622177385~3388) ((lambda (&x~1622177385~3393 &sk~1622177385~3394 &fk~1622177385~3395) (if (ex:free=? &x~1622177385~3393 (quote not)) (&sk~1622177385~3394) (&fk~1622177385~3395))) (car &x~1622177385~3388) (lambda () ((lambda (&x~1622177385~3400 &sk~1622177385~3401 &fk~1622177385~3402) (if (pair? &x~1622177385~3400) ((lambda (&x~1622177385~3405 &sk~1622177385~3406 &fk~1622177385~3407) (if (&version-reference?~1622177385~2216 &x~1622177385~3405) ((lambda (&x~1622177385~3410 &sk~1622177385~3411 &fk~1622177385~3412) (&sk~1622177385~3411)) &x~1622177385~3405 &sk~1622177385~3406 &fk~1622177385~3407) (&fk~1622177385~3407))) (car &x~1622177385~3400) (lambda () ((lambda (&x~1622177385~3415 &sk~1622177385~3416 &fk~1622177385~3417) (if (null? &x~1622177385~3415) (&sk~1622177385~3416) (&fk~1622177385~3417))) (cdr &x~1622177385~3400) (lambda () (&sk~1622177385~3401)) &fk~1622177385~3402)) &fk~1622177385~3402) (&fk~1622177385~3402))) (cdr &x~1622177385~3388) (lambda () (&sk~1622177385~3389)) &fk~1622177385~3390)) &fk~1622177385~3390) (&fk~1622177385~3390))) &e~1622177385~3193 (lambda () #t) (lambda () ((lambda (&x~1622177385~3431 &sk~1622177385~3432 &fk~1622177385~3433) (((lambda (&loop~1622177385~3439) ((lambda (&temp~1622177385~3442) (set! &loop~1622177385~3439 &temp~1622177385~3442) ((lambda () &loop~1622177385~3439))) (lambda (&x~1622177385~3447 &result~1622177385~3448) ((lambda (&match-tail~1622177385~3449) (set! &match-tail~1622177385~3449 (lambda () ((lambda (&x~1622177385~3472 &sk~1622177385~3473 &fk~1622177385~3474) (if (null? &x~1622177385~3472) (&sk~1622177385~3473) (&fk~1622177385~3474))) &x~1622177385~3447 (lambda () (apply &sk~1622177385~3432 (if (null? &result~1622177385~3448) (map (lambda (&ignore~1622177385~3479) (quote ())) (quote ())) (apply map list (reverse &result~1622177385~3448))))) (lambda () ((lambda (&x~1622177385~3487 &sk~1622177385~3488 &fk~1622177385~3489) (&sk~1622177385~3488)) &x~1622177385~3447 (lambda () (&fk~1622177385~3433)) (lambda () (ex:invalid-form &x~1622177385~3447))))))) (if (null? &x~1622177385~3447) (begin (&match-tail~1622177385~3449)) (if (pair? &x~1622177385~3447) (begin ((lambda (&x~1622177385~3456 &sk~1622177385~3457 &fk~1622177385~3458) (if (&subversion-reference?~1622177385~2217 &x~1622177385~3456) ((lambda (&x~1622177385~3461 &sk~1622177385~3462 &fk~1622177385~3463) (&sk~1622177385~3462)) &x~1622177385~3456 &sk~1622177385~3457 &fk~1622177385~3458) (&fk~1622177385~3458))) (car &x~1622177385~3447) (lambda &car-vars~1622177385~3465 (&loop~1622177385~3439 (cdr &x~1622177385~3447) (cons &car-vars~1622177385~3465 &result~1622177385~3448))) &match-tail~1622177385~3449)) (begin (&fk~1622177385~3433))))) ex:undefined)))) ex:undefined) &x~1622177385~3431 (quote ()))) &e~1622177385~3193 (lambda () #t) (lambda () ((lambda (&x~1622177385~3500 &sk~1622177385~3501 &fk~1622177385~3502) (&sk~1622177385~3501)) &e~1622177385~3193 (lambda () #f) (lambda () (ex:invalid-form &e~1622177385~3193))))))))))))) (set! &subversion-reference?~1622177385~2217 (lambda (&e~1622177385~3189) (let ((x (&subversion?~1622177385~2215 &e~1622177385~3189))) (if x x (&subversion-condition?~1622177385~2218 &e~1622177385~3189))))) (set! &subversion-condition?~1622177385~2218 (lambda (&e~1622177385~2850) ((lambda (&x~1622177385~2865 &sk~1622177385~2866 &fk~1622177385~2867) (if (pair? &x~1622177385~2865) ((lambda (&x~1622177385~2870 &sk~1622177385~2871 &fk~1622177385~2872) (if (ex:free=? &x~1622177385~2870 (quote >=)) (&sk~1622177385~2871) (&fk~1622177385~2872))) (car &x~1622177385~2865) (lambda () ((lambda (&x~1622177385~2877 &sk~1622177385~2878 &fk~1622177385~2879) (if (pair? &x~1622177385~2877) ((lambda (&x~1622177385~2882 &sk~1622177385~2883 &fk~1622177385~2884) (if (&subversion?~1622177385~2215 &x~1622177385~2882) ((lambda (&x~1622177385~2887 &sk~1622177385~2888 &fk~1622177385~2889) (&sk~1622177385~2888)) &x~1622177385~2882 &sk~1622177385~2883 &fk~1622177385~2884) (&fk~1622177385~2884))) (car &x~1622177385~2877) (lambda () ((lambda (&x~1622177385~2892 &sk~1622177385~2893 &fk~1622177385~2894) (if (null? &x~1622177385~2892) (&sk~1622177385~2893) (&fk~1622177385~2894))) (cdr &x~1622177385~2877) (lambda () (&sk~1622177385~2878)) &fk~1622177385~2879)) &fk~1622177385~2879) (&fk~1622177385~2879))) (cdr &x~1622177385~2865) (lambda () (&sk~1622177385~2866)) &fk~1622177385~2867)) &fk~1622177385~2867) (&fk~1622177385~2867))) &e~1622177385~2850 (lambda () #t) (lambda () ((lambda (&x~1622177385~2914 &sk~1622177385~2915 &fk~1622177385~2916) (if (pair? &x~1622177385~2914) ((lambda (&x~1622177385~2919 &sk~1622177385~2920 &fk~1622177385~2921) (if (ex:free=? &x~1622177385~2919 (quote <=)) (&sk~1622177385~2920) (&fk~1622177385~2921))) (car &x~1622177385~2914) (lambda () ((lambda (&x~1622177385~2926 &sk~1622177385~2927 &fk~1622177385~2928) (if (pair? &x~1622177385~2926) ((lambda (&x~1622177385~2931 &sk~1622177385~2932 &fk~1622177385~2933) (if (&subversion?~1622177385~2215 &x~1622177385~2931) ((lambda (&x~1622177385~2936 &sk~1622177385~2937 &fk~1622177385~2938) (&sk~1622177385~2937)) &x~1622177385~2931 &sk~1622177385~2932 &fk~1622177385~2933) (&fk~1622177385~2933))) (car &x~1622177385~2926) (lambda () ((lambda (&x~1622177385~2941 &sk~1622177385~2942 &fk~1622177385~2943) (if (null? &x~1622177385~2941) (&sk~1622177385~2942) (&fk~1622177385~2943))) (cdr &x~1622177385~2926) (lambda () (&sk~1622177385~2927)) &fk~1622177385~2928)) &fk~1622177385~2928) (&fk~1622177385~2928))) (cdr &x~1622177385~2914) (lambda () (&sk~1622177385~2915)) &fk~1622177385~2916)) &fk~1622177385~2916) (&fk~1622177385~2916))) &e~1622177385~2850 (lambda () #t) (lambda () ((lambda (&x~1622177385~2963 &sk~1622177385~2964 &fk~1622177385~2965) (if (pair? &x~1622177385~2963) ((lambda (&x~1622177385~2968 &sk~1622177385~2969 &fk~1622177385~2970) (if (ex:free=? &x~1622177385~2968 (quote not)) (&sk~1622177385~2969) (&fk~1622177385~2970))) (car &x~1622177385~2963) (lambda () ((lambda (&x~1622177385~2975 &sk~1622177385~2976 &fk~1622177385~2977) (if (pair? &x~1622177385~2975) ((lambda (&x~1622177385~2980 &sk~1622177385~2981 &fk~1622177385~2982) (if (&subversion?~1622177385~2215 &x~1622177385~2980) ((lambda (&x~1622177385~2985 &sk~1622177385~2986 &fk~1622177385~2987) (&sk~1622177385~2986)) &x~1622177385~2980 &sk~1622177385~2981 &fk~1622177385~2982) (&fk~1622177385~2982))) (car &x~1622177385~2975) (lambda () ((lambda (&x~1622177385~2990 &sk~1622177385~2991 &fk~1622177385~2992) (if (null? &x~1622177385~2990) (&sk~1622177385~2991) (&fk~1622177385~2992))) (cdr &x~1622177385~2975) (lambda () (&sk~1622177385~2976)) &fk~1622177385~2977)) &fk~1622177385~2977) (&fk~1622177385~2977))) (cdr &x~1622177385~2963) (lambda () (&sk~1622177385~2964)) &fk~1622177385~2965)) &fk~1622177385~2965) (&fk~1622177385~2965))) &e~1622177385~2850 (lambda () #t) (lambda () ((lambda (&x~1622177385~3010 &sk~1622177385~3011 &fk~1622177385~3012) (if (pair? &x~1622177385~3010) ((lambda (&x~1622177385~3015 &sk~1622177385~3016 &fk~1622177385~3017) (if (ex:free=? &x~1622177385~3015 (quote and)) (&sk~1622177385~3016) (&fk~1622177385~3017))) (car &x~1622177385~3010) (lambda () ((lambda (&x~1622177385~3022 &sk~1622177385~3023 &fk~1622177385~3024) (((lambda (&loop~1622177385~3030) ((lambda (&temp~1622177385~3033) (set! &loop~1622177385~3030 &temp~1622177385~3033) ((lambda () &loop~1622177385~3030))) (lambda (&x~1622177385~3038 &result~1622177385~3039) ((lambda (&match-tail~1622177385~3040) (set! &match-tail~1622177385~3040 (lambda () ((lambda (&x~1622177385~3063 &sk~1622177385~3064 &fk~1622177385~3065) (if (null? &x~1622177385~3063) (&sk~1622177385~3064) (&fk~1622177385~3065))) &x~1622177385~3038 (lambda () (apply &sk~1622177385~3023 (if (null? &result~1622177385~3039) (map (lambda (&ignore~1622177385~3070) (quote ())) (quote ())) (apply map list (reverse &result~1622177385~3039))))) (lambda () ((lambda (&x~1622177385~3078 &sk~1622177385~3079 &fk~1622177385~3080) (&sk~1622177385~3079)) &x~1622177385~3038 (lambda () (&fk~1622177385~3024)) (lambda () (ex:invalid-form &x~1622177385~3038))))))) (if (null? &x~1622177385~3038) (begin (&match-tail~1622177385~3040)) (if (pair? &x~1622177385~3038) (begin ((lambda (&x~1622177385~3047 &sk~1622177385~3048 &fk~1622177385~3049) (if (&subversion-reference?~1622177385~2217 &x~1622177385~3047) ((lambda (&x~1622177385~3052 &sk~1622177385~3053 &fk~1622177385~3054) (&sk~1622177385~3053)) &x~1622177385~3047 &sk~1622177385~3048 &fk~1622177385~3049) (&fk~1622177385~3049))) (car &x~1622177385~3038) (lambda &car-vars~1622177385~3056 (&loop~1622177385~3030 (cdr &x~1622177385~3038) (cons &car-vars~1622177385~3056 &result~1622177385~3039))) &match-tail~1622177385~3040)) (begin (&fk~1622177385~3024))))) ex:undefined)))) ex:undefined) &x~1622177385~3022 (quote ()))) (cdr &x~1622177385~3010) (lambda () (&sk~1622177385~3011)) &fk~1622177385~3012)) &fk~1622177385~3012) (&fk~1622177385~3012))) &e~1622177385~2850 (lambda () #t) (lambda () ((lambda (&x~1622177385~3100 &sk~1622177385~3101 &fk~1622177385~3102) (if (pair? &x~1622177385~3100) ((lambda (&x~1622177385~3105 &sk~1622177385~3106 &fk~1622177385~3107) (if (ex:free=? &x~1622177385~3105 (quote or)) (&sk~1622177385~3106) (&fk~1622177385~3107))) (car &x~1622177385~3100) (lambda () ((lambda (&x~1622177385~3112 &sk~1622177385~3113 &fk~1622177385~3114) (((lambda (&loop~1622177385~3120) ((lambda (&temp~1622177385~3123) (set! &loop~1622177385~3120 &temp~1622177385~3123) ((lambda () &loop~1622177385~3120))) (lambda (&x~1622177385~3128 &result~1622177385~3129) ((lambda (&match-tail~1622177385~3130) (set! &match-tail~1622177385~3130 (lambda () ((lambda (&x~1622177385~3153 &sk~1622177385~3154 &fk~1622177385~3155) (if (null? &x~1622177385~3153) (&sk~1622177385~3154) (&fk~1622177385~3155))) &x~1622177385~3128 (lambda () (apply &sk~1622177385~3113 (if (null? &result~1622177385~3129) (map (lambda (&ignore~1622177385~3160) (quote ())) (quote ())) (apply map list (reverse &result~1622177385~3129))))) (lambda () ((lambda (&x~1622177385~3168 &sk~1622177385~3169 &fk~1622177385~3170) (&sk~1622177385~3169)) &x~1622177385~3128 (lambda () (&fk~1622177385~3114)) (lambda () (ex:invalid-form &x~1622177385~3128))))))) (if (null? &x~1622177385~3128) (begin (&match-tail~1622177385~3130)) (if (pair? &x~1622177385~3128) (begin ((lambda (&x~1622177385~3137 &sk~1622177385~3138 &fk~1622177385~3139) (if (&subversion-reference?~1622177385~2217 &x~1622177385~3137) ((lambda (&x~1622177385~3142 &sk~1622177385~3143 &fk~1622177385~3144) (&sk~1622177385~3143)) &x~1622177385~3137 &sk~1622177385~3138 &fk~1622177385~3139) (&fk~1622177385~3139))) (car &x~1622177385~3128) (lambda &car-vars~1622177385~3146 (&loop~1622177385~3120 (cdr &x~1622177385~3128) (cons &car-vars~1622177385~3146 &result~1622177385~3129))) &match-tail~1622177385~3130)) (begin (&fk~1622177385~3114))))) ex:undefined)))) ex:undefined) &x~1622177385~3112 (quote ()))) (cdr &x~1622177385~3100) (lambda () (&sk~1622177385~3101)) &fk~1622177385~3102)) &fk~1622177385~3102) (&fk~1622177385~3102))) &e~1622177385~2850 (lambda () #t) (lambda () ((lambda (&x~1622177385~3182 &sk~1622177385~3183 &fk~1622177385~3184) (&sk~1622177385~3183)) &e~1622177385~2850 (lambda () #f) (lambda () (ex:invalid-form &e~1622177385~2850))))))))))))))) (set! &syntax-violation~1622177385~2219 (lambda (&who~1622177385~2818 &message~1622177385~2819 &form~1622177385~2820 . &maybe-subform~1622177385~2821) (newline) (display "Syntax violation: ") ((lambda (&who~1622177385~2824 &subform~1622177385~2825) (display &who~1622177385~2824) (newline) (newline) (display &message~1622177385~2819) (newline) (newline) (if &subform~1622177385~2825 (begin (display "Subform: ") (pretty-print (&syntax-debug~1622177385~2220 &subform~1622177385~2825)) (newline))) (display "Form: ") (pretty-print (&syntax-debug~1622177385~2220 &form~1622177385~2820)) (newline) (display "Trace: ") (newline) (newline) (for-each (lambda (&exp~1622177385~2828) (display "  ") (pretty-print (&syntax-debug~1622177385~2220 &exp~1622177385~2828)) (newline)) &*trace*~1622177385~2100) (error (quote syntax-violation) "Integrate with host error handling here")) (if &who~1622177385~2818 &who~1622177385~2818 (if (&identifier?~1622177385~2110 &form~1622177385~2820) (begin (&syntax->datum~1622177385~2149 &form~1622177385~2820)) (if (if (list? &form~1622177385~2820) (&identifier?~1622177385~2110 (car &form~1622177385~2820)) #f) (begin (&syntax->datum~1622177385~2149 (car &form~1622177385~2820))) (begin "")))) (if (null? &maybe-subform~1622177385~2821) (begin #f) (if (if (pair? &maybe-subform~1622177385~2821) (null? (cdr &maybe-subform~1622177385~2821)) #f) (begin (car &maybe-subform~1622177385~2821)) (begin (assertion-violation (quote syntax-violation) "Invalid subform in syntax violation" &maybe-subform~1622177385~2821))))))) (set! &syntax-debug~1622177385~2220 (lambda (&exp~1622177385~2810) (&sexp-map~1622177385~2230 (lambda (&leaf~1622177385~2812) (if (&identifier?~1622177385~2110 &leaf~1622177385~2812) (begin (&id-name~1622177385~2111 &leaf~1622177385~2812)) (begin &leaf~1622177385~2812))) &exp~1622177385~2810))) (set! &eval-template~1622177385~2221 (&make-identifier~1622177385~2109 (quote eval-template) (quote ()) (quote ()) 0 (quote (anonymous)))) (set! &make-r6rs-environment~1622177385~2222 (lambda (&imported-libraries~1622177385~2802 &env~1622177385~2803) (cons &imported-libraries~1622177385~2802 &env~1622177385~2803))) (set! &r6rs-environment-imported-libraries~1622177385~2223 car) (set! &r6rs-environment-env~1622177385~2224 cdr) (set! &environment~1622177385~2225 (lambda &import-specs~1622177385~2771 ((lambda (&saved~1622177385~2775) (set! &*usage-env*~1622177385~2079 (&make-unit-env~1622177385~2137)) (call-with-values (lambda () (&env-import!~1622177385~2201 &eval-template~1622177385~2221 (&make-library-language~1622177385~2258) &*usage-env*~1622177385~2079) (call-with-values (lambda () ((lambda (&saved~1622177385~2782) (set! &*phase*~1622177385~2082 0) (call-with-values (lambda () (&scan-imports~1622177385~2206 (map (lambda (&spec~1622177385~2786) (&datum->syntax~1622177385~2148 &eval-template~1622177385~2221 &spec~1622177385~2786)) &import-specs~1622177385~2771))) (lambda &results~1622177385~2788 (set! &*phase*~1622177385~2082 &saved~1622177385~2782) (apply values &results~1622177385~2788)))) &*phase*~1622177385~2082)) (lambda (&imported-libraries~1622177385~2792 &imports~1622177385~2793) (&make-r6rs-environment~1622177385~2222 &imported-libraries~1622177385~2792 ((lambda (&env~1622177385~2796) (&env-import!~1622177385~2201 &eval-template~1622177385~2221 &imports~1622177385~2793 &env~1622177385~2796) &env~1622177385~2796) (&make-unit-env~1622177385~2137)))))) (lambda &results~1622177385~2798 (set! &*usage-env*~1622177385~2079 &saved~1622177385~2775) (apply values &results~1622177385~2798)))) &*usage-env*~1622177385~2079))) (set! &r6rs-eval~1622177385~2226 (lambda (&exp~1622177385~2751 &env~1622177385~2752) ((lambda (&saved~1622177385~2756) (set! &*usage-env*~1622177385~2079 (&r6rs-environment-env~1622177385~2224 &env~1622177385~2752)) (call-with-values (lambda () ((lambda (&exp~1622177385~2761 &imported-libraries~1622177385~2762) (&import-libraries-for-expand~1622177385~2203 (&r6rs-environment-imported-libraries~1622177385~2223 &env~1622177385~2752) (map not &imported-libraries~1622177385~2762) 0) (ex:import-libraries-for-run (&r6rs-environment-imported-libraries~1622177385~2223 &env~1622177385~2752) (map not &imported-libraries~1622177385~2762) 0) (eval (&expand-begin~1622177385~2169 (list (&rename~1622177385~2151 (quote macro) (quote begin)) &exp~1622177385~2761)) (interaction-environment))) (&datum->syntax~1622177385~2148 &eval-template~1622177385~2221 &exp~1622177385~2751) (&r6rs-environment-imported-libraries~1622177385~2223 &env~1622177385~2752))) (lambda &results~1622177385~2767 (set! &*usage-env*~1622177385~2079 &saved~1622177385~2756) (apply values &results~1622177385~2767)))) &*usage-env*~1622177385~2079))) (set! &environment-bindings~1622177385~2227 (lambda (&r6rs-env~1622177385~2749) (map &format-mapping~1622177385~2228 (caar (&r6rs-environment-env~1622177385~2224 &r6rs-env~1622177385~2749))))) (set! &format-mapping~1622177385~2228 (lambda (&mapping~1622177385~2742) (list (list (quote name) (caar &mapping~1622177385~2742)) (list (quote type) (&binding-type~1622177385~2124 (cdr &mapping~1622177385~2742))) (list (quote from) (&binding-library~1622177385~2129 (cdr &mapping~1622177385~2742))) (list (quote levels) (&binding-levels~1622177385~2126 (cdr &mapping~1622177385~2742)))))) (set! &flatten~1622177385~2229 (lambda (&l~1622177385~2734) (if (null? &l~1622177385~2734) (begin &l~1622177385~2734) (if (pair? &l~1622177385~2734) (begin (cons (car &l~1622177385~2734) (&flatten~1622177385~2229 (cdr &l~1622177385~2734)))) (begin (list &l~1622177385~2734)))))) (set! &sexp-map~1622177385~2230 (lambda (&f~1622177385~2722 &s~1622177385~2723) (if (null? &s~1622177385~2723) (begin (quote ())) (if (pair? &s~1622177385~2723) (begin (cons (&sexp-map~1622177385~2230 &f~1622177385~2722 (car &s~1622177385~2723)) (&sexp-map~1622177385~2230 &f~1622177385~2722 (cdr &s~1622177385~2723)))) (if (vector? &s~1622177385~2723) (begin (apply vector (&sexp-map~1622177385~2230 &f~1622177385~2722 (vector->list &s~1622177385~2723)))) (begin (&f~1622177385~2722 &s~1622177385~2723))))))) (set! &dotted-memp~1622177385~2231 (lambda (&proc~1622177385~2710 &ls~1622177385~2711) (if (null? &ls~1622177385~2711) (begin #f) (if (pair? &ls~1622177385~2711) (begin (if (&proc~1622177385~2710 (car &ls~1622177385~2711)) &ls~1622177385~2711 (&dotted-memp~1622177385~2231 &proc~1622177385~2710 (cdr &ls~1622177385~2711)))) (begin (if (&proc~1622177385~2710 &ls~1622177385~2711) &ls~1622177385~2711 #f)))))) (set! &dotted-map~1622177385~2232 (lambda (&f~1622177385~2700 &lst~1622177385~2701) (if (null? &lst~1622177385~2701) (begin (quote ())) (if (pair? &lst~1622177385~2701) (begin (cons (&f~1622177385~2700 (car &lst~1622177385~2701)) (&dotted-map~1622177385~2232 &f~1622177385~2700 (cdr &lst~1622177385~2701)))) (begin (&f~1622177385~2700 &lst~1622177385~2701)))))) (set! &dotted-length~1622177385~2233 (lambda (&dl~1622177385~2692) (if (null? &dl~1622177385~2692) (begin 0) (if (pair? &dl~1622177385~2692) (begin (+ 1 (&dotted-length~1622177385~2233 (cdr &dl~1622177385~2692)))) (begin 0))))) (set! &dotted-butlast~1622177385~2234 (lambda (&ls~1622177385~2666 &n~1622177385~2667) (((lambda (&recurse~1622177385~2673) ((lambda (&temp~1622177385~2676) (set! &recurse~1622177385~2673 &temp~1622177385~2676) ((lambda () &recurse~1622177385~2673))) (lambda (&ls~1622177385~2681 &length-left~1622177385~2682) (if (< &length-left~1622177385~2682 &n~1622177385~2667) (begin (assertion-violation (quote dotted-butlast) "List too short" &ls~1622177385~2681 &n~1622177385~2667)) (if (= &length-left~1622177385~2682 &n~1622177385~2667) (begin (quote ())) (begin (cons (car &ls~1622177385~2681) (&recurse~1622177385~2673 (cdr &ls~1622177385~2681) (- &length-left~1622177385~2682 1))))))))) ex:undefined) &ls~1622177385~2666 (&dotted-length~1622177385~2233 &ls~1622177385~2666)))) (set! &dotted-last~1622177385~2235 (lambda (&ls~1622177385~2641 &n~1622177385~2642) (((lambda (&recurse~1622177385~2648) ((lambda (&temp~1622177385~2651) (set! &recurse~1622177385~2648 &temp~1622177385~2651) ((lambda () &recurse~1622177385~2648))) (lambda (&ls~1622177385~2656 &length-left~1622177385~2657) (if (< &length-left~1622177385~2657 &n~1622177385~2642) (begin (assertion-violation (quote dotted-last) "List too short" &ls~1622177385~2656 &n~1622177385~2642)) (if (= &length-left~1622177385~2657 &n~1622177385~2642) (begin &ls~1622177385~2656) (begin (&recurse~1622177385~2648 (cdr &ls~1622177385~2656) (- &length-left~1622177385~2657 1)))))))) ex:undefined) &ls~1622177385~2641 (&dotted-length~1622177385~2233 &ls~1622177385~2641)))) (set! &map-while~1622177385~2236 (lambda (&f~1622177385~2620 &lst~1622177385~2621 &k~1622177385~2622) (if (null? &lst~1622177385~2621) (begin (&k~1622177385~2622 (quote ()) (quote ()))) (if (pair? &lst~1622177385~2621) (begin ((lambda (&head~1622177385~2632) (if &head~1622177385~2632 (&map-while~1622177385~2236 &f~1622177385~2620 (cdr &lst~1622177385~2621) (lambda (&answer~1622177385~2635 &rest~1622177385~2636) (&k~1622177385~2622 (cons &head~1622177385~2632 &answer~1622177385~2635) &rest~1622177385~2636))) (&k~1622177385~2622 (quote ()) &lst~1622177385~2621))) (&f~1622177385~2620 (car &lst~1622177385~2621)))) (begin (&k~1622177385~2622 (quote ()) &lst~1622177385~2621)))))) (set! &check-set?~1622177385~2237 (lambda (&ls~1622177385~2611 &=~1622177385~2612 &fail~1622177385~2613) (let ((x (null? &ls~1622177385~2611))) (if x x (if (memp (lambda (&x~1622177385~2618) (&=~1622177385~2612 &x~1622177385~2618 (car &ls~1622177385~2611))) (cdr &ls~1622177385~2611)) (&fail~1622177385~2613 (car &ls~1622177385~2611)) (&check-set?~1622177385~2237 (cdr &ls~1622177385~2611) &=~1622177385~2612 &fail~1622177385~2613)))))) (set! &unionv~1622177385~2238 (lambda &sets~1622177385~2598 (if (null? &sets~1622177385~2598) (begin (quote ())) (if (null? (car &sets~1622177385~2598)) (begin (apply &unionv~1622177385~2238 (cdr &sets~1622177385~2598))) (begin ((lambda (&rest~1622177385~2608) (if (memv (car (car &sets~1622177385~2598)) &rest~1622177385~2608) &rest~1622177385~2608 (cons (car (car &sets~1622177385~2598)) &rest~1622177385~2608))) (apply &unionv~1622177385~2238 (cdr (car &sets~1622177385~2598)) (cdr &sets~1622177385~2598)))))))) (set! &drop-tail~1622177385~2239 (lambda (&list~1622177385~2587 &tail~1622177385~2588) (if (null? &list~1622177385~2587) (begin (quote ())) (if (eq? &list~1622177385~2587 &tail~1622177385~2588) (begin (quote ())) (begin (cons (car &list~1622177385~2587) (&drop-tail~1622177385~2239 (cdr &list~1622177385~2587) &tail~1622177385~2588))))))) (set! &list->string~1622177385~2240 (lambda (&e~1622177385~2571 &separator~1622177385~2572) ((lambda (&tostring~1622177385~2573) (set! &tostring~1622177385~2573 (lambda (&x~1622177385~2578) (if (symbol? &x~1622177385~2578) (begin (symbol->string &x~1622177385~2578)) (if (number? &x~1622177385~2578) (begin (number->string &x~1622177385~2578)) (begin (assertion-violation (quote list->string) "Invalid argument" &e~1622177385~2571)))))) (if (null? &e~1622177385~2571) "" (string-append (&tostring~1622177385~2573 (car &e~1622177385~2571)) (apply string-append (map (lambda (&x~1622177385~2576) (string-append &separator~1622177385~2572 (&tostring~1622177385~2573 &x~1622177385~2576))) (cdr &e~1622177385~2571)))))) ex:undefined))) (set! &compose~1622177385~2241 (lambda (&f~1622177385~2566 &g~1622177385~2567) (lambda (&x~1622177385~2569) (&f~1622177385~2566 (&g~1622177385~2567 &x~1622177385~2569))))) (set! &check~1622177385~2242 (lambda (&x~1622177385~2560 &p?~1622177385~2561 &from~1622177385~2562) (let ((x (&p?~1622177385~2561 &x~1622177385~2560))) (if x x (&syntax-violation~1622177385~2219 &from~1622177385~2562 "Invalid argument" &x~1622177385~2560))))) (set! &invalid-form~1622177385~2243 (lambda (&exp~1622177385~2558) (&syntax-violation~1622177385~2219 #f "Invalid form" &exp~1622177385~2558))) (set! &repl~1622177385~2244 (lambda (&exps~1622177385~2546) (&with-toplevel-parameters~1622177385~2247 (lambda () ((lambda (&results~1622177385~2548) (set! &results~1622177385~2548 ()) (for-each (lambda (&exp~1622177385~2550) (for-each (lambda (&exp~1622177385~2552) (for-each (lambda (&result~1622177385~2554) (set! &results~1622177385~2548 (cons &result~1622177385~2554 &results~1622177385~2548))) (call-with-values (lambda () (eval &exp~1622177385~2552 (interaction-environment))) list))) (&expand-toplevel-sequence~1622177385~2248 (list &exp~1622177385~2550)))) &exps~1622177385~2546) (apply values (reverse &results~1622177385~2548))) ex:undefined))))) (set! &run-r6rs-sequence~1622177385~2245 (lambda (&forms~1622177385~2541) (&with-toplevel-parameters~1622177385~2247 (lambda () (for-each (lambda (&exp~1622177385~2544) (eval &exp~1622177385~2544 (interaction-environment))) (&expand-toplevel-sequence~1622177385~2248 (&normalize~1622177385~2252 &forms~1622177385~2541))))))) (set! &run-r6rs-program~1622177385~2246 (lambda (&filename~1622177385~2539) (&run-r6rs-sequence~1622177385~2245 (&read-file~1622177385~2253 &filename~1622177385~2539)))) (set! &with-toplevel-parameters~1622177385~2247 (lambda (&thunk~1622177385~2470) ((lambda (&saved~1622177385~2474) (set! &*trace*~1622177385~2100 (quote ())) (call-with-values (lambda () ((lambda (&saved~1622177385~2479) (set! &*current-library*~1622177385~2094 (quote ())) (call-with-values (lambda () ((lambda (&saved~1622177385~2484) (set! &*phase*~1622177385~2082 0) (call-with-values (lambda () ((lambda (&saved~1622177385~2489) (set! &*used*~1622177385~2097 (list (quote ()))) (call-with-values (lambda () ((lambda (&saved~1622177385~2494) (set! &*color*~1622177385~2085 (&generate-color~1622177385~2122)) (call-with-values (lambda () ((lambda (&saved~1622177385~2499) (set! &*usage-env*~1622177385~2079 &*toplevel-env*~1622177385~2076) (call-with-values (lambda () ((lambda (&saved~1622177385~2504) (set! &*syntax-reflected*~1622177385~2103 #f) (call-with-values (lambda () (&thunk~1622177385~2470)) (lambda &results~1622177385~2508 (set! &*syntax-reflected*~1622177385~2103 &saved~1622177385~2504) (apply values &results~1622177385~2508)))) &*syntax-reflected*~1622177385~2103)) (lambda &results~1622177385~2512 (set! &*usage-env*~1622177385~2079 &saved~1622177385~2499) (apply values &results~1622177385~2512)))) &*usage-env*~1622177385~2079)) (lambda &results~1622177385~2516 (set! &*color*~1622177385~2085 &saved~1622177385~2494) (apply values &results~1622177385~2516)))) &*color*~1622177385~2085)) (lambda &results~1622177385~2520 (set! &*used*~1622177385~2097 &saved~1622177385~2489) (apply values &results~1622177385~2520)))) &*used*~1622177385~2097)) (lambda &results~1622177385~2525 (set! &*phase*~1622177385~2082 &saved~1622177385~2484) (apply values &results~1622177385~2525)))) &*phase*~1622177385~2082)) (lambda &results~1622177385~2529 (set! &*current-library*~1622177385~2094 &saved~1622177385~2479) (apply values &results~1622177385~2529)))) &*current-library*~1622177385~2094)) (lambda &results~1622177385~2534 (set! &*trace*~1622177385~2100 &saved~1622177385~2474) (apply values &results~1622177385~2534)))) &*trace*~1622177385~2100))) (set! &expand-toplevel-sequence~1622177385~2248 (lambda (&forms~1622177385~2462) (&scan-sequence~1622177385~2178 (quote toplevel) &make-toplevel-mapping~1622177385~2133 (&source->syntax~1622177385~2256 &forms~1622177385~2462) (lambda (&forms~1622177385~2465 &syntax-definitions~1622177385~2466 &bound-variables~1622177385~2467) (&emit-body~1622177385~2179 &forms~1622177385~2465 (quote define)))))) (set! &r6rs-load~1622177385~2249 (lambda (&filename~1622177385~2455) (&with-toplevel-parameters~1622177385~2247 (lambda () (for-each (lambda (&exp~1622177385~2458) (for-each (lambda (&exp~1622177385~2460) (eval &exp~1622177385~2460 (interaction-environment))) (&expand-toplevel-sequence~1622177385~2248 (list &exp~1622177385~2458)))) (&read-file~1622177385~2253 &filename~1622177385~2455)))))) (set! &expand-file~1622177385~2250 (lambda (&filename~1622177385~2451 &target-filename~1622177385~2452) (&with-toplevel-parameters~1622177385~2247 (lambda () (&write-file~1622177385~2254 (&expand-toplevel-sequence~1622177385~2248 (&normalize~1622177385~2252 (&read-file~1622177385~2253 &filename~1622177385~2451))) &target-filename~1622177385~2452))))) (set! &expand-r5rs-file~1622177385~2251 (lambda (&filename~1622177385~2408 &target-filename~1622177385~2409 &r6rs-env~1622177385~2410) (&with-toplevel-parameters~1622177385~2247 (lambda () ((lambda (&saved~1622177385~2415) (set! &make-free-name~1622177385~2121 (lambda (&symbol~1622177385~2449) &symbol~1622177385~2449)) (call-with-values (lambda () ((lambda (&saved~1622177385~2420) (set! &*usage-env*~1622177385~2079 (&r6rs-environment-env~1622177385~2224 &r6rs-env~1622177385~2410)) (call-with-values (lambda () ((lambda (&saved~1622177385~2425) (set! &*macro-table*~1622177385~2088 &*macro-table*~1622177385~2088) (call-with-values (lambda () ((lambda (&imported-libraries~1622177385~2430) (&import-libraries-for-expand~1622177385~2203 (&r6rs-environment-imported-libraries~1622177385~2223 &r6rs-env~1622177385~2410) (map not &imported-libraries~1622177385~2430) 0) (&write-file~1622177385~2254 (cons (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) (&r6rs-environment-imported-libraries~1622177385~2223 &r6rs-env~1622177385~2410)) (cons (list (quote quote) (&current-builds~1622177385~2202 &imported-libraries~1622177385~2430)) (quote (0))))) (&expand-toplevel-sequence~1622177385~2248 (&read-file~1622177385~2253 &filename~1622177385~2408))) &target-filename~1622177385~2409)) (&r6rs-environment-imported-libraries~1622177385~2223 &r6rs-env~1622177385~2410))) (lambda &results~1622177385~2437 (set! &*macro-table*~1622177385~2088 &saved~1622177385~2425) (apply values &results~1622177385~2437)))) &*macro-table*~1622177385~2088)) (lambda &results~1622177385~2441 (set! &*usage-env*~1622177385~2079 &saved~1622177385~2420) (apply values &results~1622177385~2441)))) &*usage-env*~1622177385~2079)) (lambda &results~1622177385~2445 (set! &make-free-name~1622177385~2121 &saved~1622177385~2415) (apply values &results~1622177385~2445)))) &make-free-name~1622177385~2121))))) (set! &normalize~1622177385~2252 (lambda (&exps~1622177385~2369) ((lambda (&error~1622177385~2370) (set! &error~1622177385~2370 (lambda () ((lambda (&newline~1622177385~2405) (&syntax-violation~1622177385~2219 (quote expand-file) (string-append "File should be of the form:" &newline~1622177385~2405 "      <library>*" &newline~1622177385~2405 "    | <library>* <toplevel program>") &exps~1622177385~2369)) (string #\newline)))) (((lambda (&loop~1622177385~2376) ((lambda (&temp~1622177385~2379) (set! &loop~1622177385~2376 &temp~1622177385~2379) ((lambda () &loop~1622177385~2376))) (lambda (&exps~1622177385~2384 &normalized~1622177385~2385) (if (null? &exps~1622177385~2384) (reverse &normalized~1622177385~2385) (if (pair? (car &exps~1622177385~2384)) ((lambda (&t~1622177385~2391) (if (memv &t~1622177385~2391 (quote (library))) (begin (&loop~1622177385~2376 (cdr &exps~1622177385~2384) (cons (car &exps~1622177385~2384) &normalized~1622177385~2385))) (if (memv &t~1622177385~2391 (quote (import))) (begin (&loop~1622177385~2376 (quote ()) (cons (cons (quote program) &exps~1622177385~2384) &normalized~1622177385~2385))) (begin (&error~1622177385~2370))))) (caar &exps~1622177385~2384)) (&error~1622177385~2370)))))) ex:undefined) &exps~1622177385~2369 (quote ()))) ex:undefined))) (set! &read-file~1622177385~2253 (lambda (&fn~1622177385~2347) ((lambda (&p~1622177385~2350) (((lambda (&f~1622177385~2356) ((lambda (&temp~1622177385~2359) (set! &f~1622177385~2356 &temp~1622177385~2359) ((lambda () &f~1622177385~2356))) (lambda (&x~1622177385~2364) (if (eof-object? &x~1622177385~2364) (begin (close-input-port &p~1622177385~2350) (quote ())) (cons &x~1622177385~2364 (&f~1622177385~2356 (read &p~1622177385~2350))))))) ex:undefined) (read &p~1622177385~2350))) (open-input-file &fn~1622177385~2347)))) (set! &write-file~1622177385~2254 (lambda (&exps~1622177385~2338 &fn~1622177385~2339) (if (file-exists? &fn~1622177385~2339) (delete-file &fn~1622177385~2339)) ((lambda (&p~1622177385~2342) (for-each (lambda (&exp~1622177385~2344) (write &exp~1622177385~2344 &p~1622177385~2342) (newline &p~1622177385~2342)) &exps~1622177385~2338) (close-output-port &p~1622177385~2342)) (open-output-file &fn~1622177385~2339)))) (set! &toplevel-template~1622177385~2255 (&make-identifier~1622177385~2109 (quote toplevel-template) (quote ()) (quote ()) 0 #f)) (set! &source->syntax~1622177385~2256 (lambda (&datum~1622177385~2333) (&datum->syntax~1622177385~2148 &toplevel-template~1622177385~2255 &datum~1622177385~2333))) (set! &library-language-names~1622177385~2257 (quote (program library export import for run expand meta only except prefix rename primitives >= <= and or not))) (set! &make-library-language~1622177385~2258 (lambda () (map (lambda (&name~1622177385~2326) (cons &name~1622177385~2326 (&make-binding~1622177385~2123 (quote macro) &name~1622177385~2326 (quote (0)) #f (quote ())))) &library-language-names~1622177385~2257))) (ex:register-library! ((lambda (&primitive-macro-mapping~1622177385~2292) (ex:make-library (quote (core primitive-macros)) (lambda () (quote ())) (map (lambda (&mapping~1622177385~2297) (cons (car &mapping~1622177385~2297) (&make-binding~1622177385~2123 (quote macro) (car &mapping~1622177385~2297) (quote (0)) #f (quote ())))) &primitive-macro-mapping~1622177385~2292) (quote ()) (quote ()) (lambda () (for-each (lambda (&mapping~1622177385~2305) (&register-macro!~1622177385~2160 (car &mapping~1622177385~2305) (&make-expander~1622177385~2155 (cdr &mapping~1622177385~2305)))) &primitive-macro-mapping~1622177385~2292) (values)) (lambda () (values)) (quote system))) (list (cons (quote lambda) &expand-lambda~1622177385~2173) (cons (quote if) &expand-if~1622177385~2167) (cons (quote set!) &expand-set!~1622177385~2168) (cons (quote begin) &expand-begin~1622177385~2169) (cons (quote syntax) &expand-syntax~1622177385~2188) (cons (quote quote) &expand-quote~1622177385~2166) (cons (quote let-syntax) &expand-local-syntax~1622177385~2170) (cons (quote letrec-syntax) &expand-local-syntax~1622177385~2170) (cons (quote syntax-case) &expand-syntax-case~1622177385~2186) (cons (quote and) &expand-and~1622177385~2171) (cons (quote or) &expand-or~1622177385~2172) (cons (quote define) &invalid-form~1622177385~2243) (cons (quote define-syntax) &invalid-form~1622177385~2243) (cons (quote _) &invalid-form~1622177385~2243) (cons (quote ...) &invalid-form~1622177385~2243)))) (set! &*toplevel-env*~1622177385~2076 (&make-unit-env~1622177385~2137)) (set! &*usage-env*~1622177385~2079 &*toplevel-env*~1622177385~2076) (&env-import!~1622177385~2201 &toplevel-template~1622177385~2255 (&make-library-language~1622177385~2258) &*toplevel-env*~1622177385~2076) (&register-macro!~1622177385~2160 (quote library) (&make-expander~1622177385~2155 &invalid-form~1622177385~2243)) (&register-macro!~1622177385~2160 (quote program) (&make-expander~1622177385~2155 &invalid-form~1622177385~2243)) (&register-macro!~1622177385~2160 (quote import) (&make-expander~1622177385~2155 &invalid-form~1622177385~2243)) (set! ex:make-variable-transformer &make-variable-transformer~1622177385~2157) (set! ex:identifier? &identifier?~1622177385~2110) (set! ex:bound-identifier=? &bound-identifier=?~1622177385~2117) (set! ex:free-identifier=? &free-identifier=?~1622177385~2118) (set! ex:generate-temporaries &generate-temporaries~1622177385~2150) (set! ex:datum->syntax &datum->syntax~1622177385~2148) (set! ex:syntax->datum &syntax->datum~1622177385~2149) (set! ex:environment &environment~1622177385~2225) (set! ex:environment-bindings &environment-bindings~1622177385~2227) (set! ex:eval &r6rs-eval~1622177385~2226) (set! ex:load &r6rs-load~1622177385~2249) (set! ex:syntax-violation &syntax-violation~1622177385~2219) (set! ex:expand-file &expand-file~1622177385~2250) (set! ex:repl &repl~1622177385~2244) (set! ex:expand-r5rs-file &expand-r5rs-file~1622177385~2251) (set! ex:run-r6rs-sequence &run-r6rs-sequence~1622177385~2245) (set! ex:run-r6rs-program &run-r6rs-program~1622177385~2246) (set! ex:invalid-form &invalid-form~1622177385~2243) (set! ex:register-macro! &register-macro!~1622177385~2160) (set! ex:syntax-rename &syntax-rename~1622177385~2147) (set! ex:map-while &map-while~1622177385~2236) (set! ex:dotted-length &dotted-length~1622177385~2233) (set! ex:dotted-butlast &dotted-butlast~1622177385~2234) (set! ex:dotted-last &dotted-last~1622177385~2235) (set! ex:uncompress &uncompress~1622177385~2145) (set! ex:free=? &free=?~1622177385~2119)) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)) (record-constructor (make-record-constructor-descriptor &:identifier~1622177385~2106 #f #f)))) (make-record-type-descriptor (quote identifier) #f #f #f #f (quote #((immutable name) (immutable colors) (immutable transformer-envs) (immutable displacement) (immutable maybe-library)))))) #f)) (quote ()))) (list (quote ())))) (quote ()))) (quote ()))) (quote ()))) #f)) 0)) #f)) #f)
