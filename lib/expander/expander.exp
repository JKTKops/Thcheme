(ex:import-libraries-for-run (quote (((scheme base) 0))) (quote (&build~1623545778~1901)) 0)
(define ex:make-variable-transformer #f)
(define ex:identifier? #f)
(define ex:bound-identifier=? #f)
(define ex:free-identifier=? #f)
(define ex:generate-temporaries #f)
(define ex:datum->syntax #f)
(define ex:syntax->datum #f)
(define ex:environment #f)
(define ex:environment-bindings #f)
(define ex:eval #f)
(define ex:interaction-environment #f)
(define ex:load #f)
(define ex:syntax-violation #f)
(define ex:expand-file #f)
(define ex:repl #f)
(define ex:expand-r5rs-file #f)
(define ex:run-r6rs-sequence #f)
(define ex:run-r6rs-program #f)
(define ex:invalid-form #f)
(define ex:register-macro! #f)
(define ex:syntax-rename #f)
(define ex:map-while #f)
(define ex:dotted-length #f)
(define ex:dotted-butlast #f)
(define ex:dotted-last #f)
(define ex:uncompress #f)
(define ex:free=? #f)
((lambda (&*toplevel-env*~1623545778~2302) ((lambda (&*usage-env*~1623545778~2305) ((lambda (&*phase*~1623545778~2308) ((lambda (&*color*~1623545778~2311) ((lambda (&*macro-table*~1623545778~2314) ((lambda (&*env-table*~1623545778~2317) ((lambda (&*current-library*~1623545778~2320) ((lambda (&*used*~1623545778~2323) ((lambda (&*trace*~1623545778~2326) ((lambda (&*syntax-reflected*~1623545778~2329) ((lambda (&:identifier~1623545778~2332) ((lambda (&make-identifier~1623545778~2335) ((lambda (&make-library-language~1623545778~2485 &library-language-names~1623545778~2484 &source->syntax~1623545778~2483 &toplevel-template~1623545778~2482 &write-file~1623545778~2481 &read-file~1623545778~2480 &normalize~1623545778~2479 &expand-r5rs-file~1623545778~2478 &expand-file~1623545778~2477 &r6rs-load~1623545778~2476 &expand-toplevel-sequence~1623545778~2475 &with-toplevel-parameters~1623545778~2474 &run-r6rs-program~1623545778~2473 &run-r6rs-sequence~1623545778~2472 &repl~1623545778~2471 &invalid-form~1623545778~2470 &check~1623545778~2469 &compose~1623545778~2468 &list->string~1623545778~2467 &drop-tail~1623545778~2466 &unionv~1623545778~2465 &check-set?~1623545778~2464 &map-while~1623545778~2463 &dotted-last~1623545778~2462 &dotted-butlast~1623545778~2461 &dotted-length~1623545778~2460 &dotted-map~1623545778~2459 &dotted-memp~1623545778~2458 &sexp-map~1623545778~2457 &flatten~1623545778~2456 &format-mapping~1623545778~2455 &environment-bindings~1623545778~2454 &r6rs-eval~1623545778~2453 &environment~1623545778~2452 &r7rs-interaction-environment~1623545778~2451 &r6rs-environment-env~1623545778~2450 &r6rs-environment-imported-libraries~1623545778~2449 &make-r6rs-environment~1623545778~2448 &eval-template~1623545778~2447 &syntax-debug~1623545778~2446 &syntax-violation~1623545778~2445 &subversion-condition?~1623545778~2444 &subversion-reference?~1623545778~2443 &version-reference?~1623545778~2442 &subversion?~1623545778~2441 &version?~1623545778~2440 &library-ref-helper~1623545778~2439 &library-ref~1623545778~2438 &scan-library-name~1623545778~2437 &unify-imports~1623545778~2436 &compose-levels~1623545778~2435 &scan-levels~1623545778~2434 &scan-import-spec~1623545778~2433 &scan-imports~1623545778~2432 &scan-export-set~1623545778~2431 &scan-exports~1623545778~2430 &import-libraries-for-expand~1623545778~2429 &current-builds~1623545778~2428 &env-import!~1623545778~2427 &expand-library-or-program~1623545778~2426 &expand-library~1623545778~2425 &expand-program~1623545778~2424 &check-used~1623545778~2423 &merge-used-with-parent-frame!~1623545778~2422 &register-use!~1623545778~2421 &add-fresh-used-frame!~1623545778~2420 &segment-tail~1623545778~2419 &segment-head~1623545778~2418 &segment-depth~1623545778~2417 &free-meta-variables~1623545778~2416 &process-template~1623545778~2415 &expand-syntax~1623545778~2414 &process-clauses~1623545778~2413 &expand-syntax-case~1623545778~2412 &check-expression-body~1623545778~2411 &check-valid-definition~1623545778~2410 &check-toplevel~1623545778~2409 &check-expression-sequence~1623545778~2408 &parse-local-syntax~1623545778~2407 &parse-definition~1623545778~2406 &emit-body~1623545778~2405 &scan-sequence~1623545778~2404 &wrap-exp~1623545778~2403 &wrap-env~1623545778~2402 &make-wrap~1623545778~2401 &formals?~1623545778~2400 &expand-lambda~1623545778~2399 &expand-or~1623545778~2398 &expand-and~1623545778~2397 &expand-local-syntax~1623545778~2396 &expand-begin~1623545778~2395 &expand-set!~1623545778~2394 &expand-if~1623545778~2393 &expand-quote~1623545778~2392 &check-implicit-import-of-mutable~1623545778~2391 &operator-binding~1623545778~2390 &head-expand~1623545778~2389 &expand~1623545778~2388 &invoke-macro~1623545778~2387 &register-macro!~1623545778~2386 &binding->macro~1623545778~2385 &make-user-macro~1623545778~2384 &make-variable-transformer~1623545778~2383 &make-transformer~1623545778~2382 &make-expander~1623545778~2381 &macro-proc~1623545778~2380 &macro-type~1623545778~2379 &make-macro~1623545778~2378 &rename~1623545778~2377 &generate-temporaries~1623545778~2376 &syntax->datum~1623545778~2375 &datum->syntax~1623545778~2374 &syntax-rename~1623545778~2373 &syntax-reflect~1623545778~2372 &uncompress~1623545778~2371 &compress~1623545778~2370 &env-reify~1623545778~2369 &env-reflect~1623545778~2368 &duplicate?~1623545778~2367 &env-lookup~1623545778~2366 &env-extend!~1623545778~2365 &env-extend~1623545778~2364 &make-unit-env~1623545778~2363 &make-null-env~1623545778~2362 &check-binding-level~1623545778~2361 &source-level~1623545778~2360 &make-toplevel-mapping~1623545778~2359 &make-local-mapping~1623545778~2358 &binding~1623545778~2357 &binding-mutable-set!~1623545778~2356 &binding-library~1623545778~2355 &binding-dimension~1623545778~2354 &binding-mutable?~1623545778~2353 &binding-levels~1623545778~2352 &binding-name~1623545778~2351 &binding-type~1623545778~2350 &make-binding~1623545778~2349 &generate-color~1623545778~2348 &make-free-name~1623545778~2347 &generate-guid~1623545778~2346 &free=?~1623545778~2345 &free-identifier=?~1623545778~2344 &bound-identifier=?~1623545778~2343 &id-library~1623545778~2342 &id-maybe-library~1623545778~2341 &id-displacement~1623545778~2340 &id-transformer-envs~1623545778~2339 &id-colors~1623545778~2338 &id-name~1623545778~2337 &identifier?~1623545778~2336) (set! &identifier?~1623545778~2336 (record-predicate &:identifier~1623545778~2332)) (set! &id-name~1623545778~2337 (record-accessor &:identifier~1623545778~2332 0)) (set! &id-colors~1623545778~2338 (record-accessor &:identifier~1623545778~2332 1)) (set! &id-transformer-envs~1623545778~2339 (record-accessor &:identifier~1623545778~2332 2)) (set! &id-displacement~1623545778~2340 (record-accessor &:identifier~1623545778~2332 3)) (set! &id-maybe-library~1623545778~2341 (record-accessor &:identifier~1623545778~2332 4)) (set! &id-library~1623545778~2342 (lambda (&id~1623545778~9910) (let ((x (&id-maybe-library~1623545778~2341 &id~1623545778~9910))) (if x x &*current-library*~1623545778~2320)))) (set! &bound-identifier=?~1623545778~2343 (lambda (&x~1623545778~9903 &y~1623545778~9904) (&check~1623545778~2469 &x~1623545778~9903 &identifier?~1623545778~2336 (quote bound-identifier=?)) (&check~1623545778~2469 &y~1623545778~9904 &identifier?~1623545778~2336 (quote bound-identifier=?)) (if (eq? (&id-name~1623545778~2337 &x~1623545778~9903) (&id-name~1623545778~2337 &y~1623545778~9904)) (equal? (&id-colors~1623545778~2338 &x~1623545778~9903) (&id-colors~1623545778~2338 &y~1623545778~9904)) #f))) (set! &free-identifier=?~1623545778~2344 (lambda (&x~1623545778~9879 &y~1623545778~9880) (&check~1623545778~2469 &x~1623545778~9879 &identifier?~1623545778~2336 (quote free-identifier=?)) (&check~1623545778~2469 &y~1623545778~9880 &identifier?~1623545778~2336 (quote free-identifier=?)) ((lambda (&bx~1623545778~9883 &by~1623545778~9884) ((lambda (&result~1623545778~9887) (if &result~1623545778~9887 (if &bx~1623545778~9883 (begin (&check-binding-level~1623545778~2361 &x~1623545778~9879 &bx~1623545778~9883) (&check-binding-level~1623545778~2361 &y~1623545778~9880 &by~1623545778~9884)) #f) #f) (if &result~1623545778~9887 (if (&register-use!~1623545778~2421 &x~1623545778~9879 &bx~1623545778~9883) (&register-use!~1623545778~2421 &y~1623545778~9880 &by~1623545778~9884) #f) #f) &result~1623545778~9887) (if &bx~1623545778~9883 (if &by~1623545778~9884 (eq? (&binding-name~1623545778~2351 &bx~1623545778~9883) (&binding-name~1623545778~2351 &by~1623545778~9884)) #f) (if (not &by~1623545778~9884) (eq? (&id-name~1623545778~2337 &x~1623545778~9879) (&id-name~1623545778~2337 &y~1623545778~9880)) #f)))) (&binding~1623545778~2357 &x~1623545778~9879) (&binding~1623545778~2357 &y~1623545778~9880)))) (set! &free=?~1623545778~2345 (lambda (&x~1623545778~9861 &symbol~1623545778~9862) (if (&identifier?~1623545778~2336 &x~1623545778~9861) ((lambda (&bx~1623545778~9867) ((lambda (&result~1623545778~9870) (if &result~1623545778~9870 (if &bx~1623545778~9867 (&check-binding-level~1623545778~2361 &x~1623545778~9861 &bx~1623545778~9867) #f) #f) (if &result~1623545778~9870 (&register-use!~1623545778~2421 &x~1623545778~9861 &bx~1623545778~9867) #f) &result~1623545778~9870) (if &bx~1623545778~9867 (eq? (&binding-name~1623545778~2351 &bx~1623545778~9867) &symbol~1623545778~9862) #f))) (&binding~1623545778~2357 &x~1623545778~9861)) #f))) (set! &generate-guid~1623545778~2346 ((lambda (&token~1623545778~9855 &ticks~1623545778~9856) (lambda (&symbol~1623545778~9858) (set! &ticks~1623545778~9856 (+ &ticks~1623545778~9856 1)) (string->symbol (string-append ex:guid-prefix (symbol->string &symbol~1623545778~9858) "~" &token~1623545778~9855 "~" (number->string &ticks~1623545778~9856))))) (ex:unique-token) 0)) (set! &make-free-name~1623545778~2347 (lambda (&symbol~1623545778~9852) (string->symbol (string-append ex:free-prefix (symbol->string &symbol~1623545778~9852))))) (set! &generate-color~1623545778~2348 (lambda () (&generate-guid~1623545778~2346 (quote c)))) (set! &make-binding~1623545778~2349 (lambda (&type~1623545778~9844 &name~1623545778~9845 &levels~1623545778~9846 &content~1623545778~9847 &library~1623545778~9848) (list &type~1623545778~9844 &name~1623545778~9845 &levels~1623545778~9846 &content~1623545778~9847 &library~1623545778~9848))) (set! &binding-type~1623545778~2350 (lambda (&b~1623545778~9842) (car &b~1623545778~9842))) (set! &binding-name~1623545778~2351 (lambda (&b~1623545778~9840) (cadr &b~1623545778~9840))) (set! &binding-levels~1623545778~2352 (lambda (&b~1623545778~9838) (caddr &b~1623545778~9838))) (set! &binding-mutable?~1623545778~2353 (lambda (&b~1623545778~9836) (cadddr &b~1623545778~9836))) (set! &binding-dimension~1623545778~2354 (lambda (&b~1623545778~9834) (cadddr &b~1623545778~9834))) (set! &binding-library~1623545778~2355 (lambda (&b~1623545778~9832) (car (cddddr &b~1623545778~9832)))) (set! &binding-mutable-set!~1623545778~2356 (lambda (&b~1623545778~9829 &x~1623545778~9830) (set-car! (cdddr &b~1623545778~9829) &x~1623545778~9830))) (set! &binding~1623545778~2357 (lambda (&id~1623545778~9804) ((lambda (&name~1623545778~9807) (((lambda (&loop~1623545778~9813) ((lambda (&temp~1623545778~9816) (set! &loop~1623545778~9813 &temp~1623545778~9816) ((lambda () &loop~1623545778~9813))) (lambda (&env~1623545778~9821 &envs~1623545778~9822 &colors~1623545778~9823) (let ((x (&env-lookup~1623545778~2366 (cons &name~1623545778~9807 &colors~1623545778~9823) &env~1623545778~9821))) (if x x (if (pair? &envs~1623545778~9822) (&loop~1623545778~9813 (&env-reify~1623545778~2369 (car &envs~1623545778~9822)) (cdr &envs~1623545778~9822) (cdr &colors~1623545778~9823)) #f)))))) ex:undefined) &*usage-env*~1623545778~2305 (&id-transformer-envs~1623545778~2339 &id~1623545778~9804) (&id-colors~1623545778~2338 &id~1623545778~9804))) (&id-name~1623545778~2337 &id~1623545778~9804)))) (set! &make-local-mapping~1623545778~2358 (lambda (&type~1623545778~9800 &id~1623545778~9801 &content~1623545778~9802) (cons (cons (&id-name~1623545778~2337 &id~1623545778~9801) (&id-colors~1623545778~2338 &id~1623545778~9801)) (&make-binding~1623545778~2349 &type~1623545778~9800 (&generate-guid~1623545778~2346 (&id-name~1623545778~2337 &id~1623545778~9801)) (list (&source-level~1623545778~2360 &id~1623545778~9801)) &content~1623545778~9802 &*current-library*~1623545778~2320)))) (set! &make-toplevel-mapping~1623545778~2359 (lambda (&type~1623545778~9794 &id~1623545778~9795 &content~1623545778~9796) (if (null? (&id-colors~1623545778~2338 &id~1623545778~9795)) (cons (cons (&id-name~1623545778~2337 &id~1623545778~9795) (&id-colors~1623545778~2338 &id~1623545778~9795)) (&make-binding~1623545778~2349 &type~1623545778~9794 (&make-free-name~1623545778~2347 (&id-name~1623545778~2337 &id~1623545778~9795)) (quote (0)) &content~1623545778~9796 &*current-library*~1623545778~2320)) (&make-local-mapping~1623545778~2358 &type~1623545778~9794 &id~1623545778~9795 &content~1623545778~9796)))) (set! &source-level~1623545778~2360 (lambda (&id~1623545778~9792) (- &*phase*~1623545778~2308 (&id-displacement~1623545778~2340 &id~1623545778~9792)))) (set! &check-binding-level~1623545778~2361 (lambda (&id~1623545778~9782 &binding~1623545778~9783) (if &binding~1623545778~9783 (let ((x (memv (&source-level~1623545778~2360 &id~1623545778~9782) (&binding-levels~1623545778~2352 &binding~1623545778~9783)))) (if x x (&syntax-violation~1623545778~2445 "invalid reference" (string-append "Attempt to use binding of " (symbol->string (&id-name~1623545778~2337 &id~1623545778~9782)) " in library (" (&list->string~1623545778~2467 (&id-library~1623545778~2342 &id~1623545778~9782) " ") ") at invalid level " (number->string (&source-level~1623545778~2360 &id~1623545778~9782)) ".  Binding is only available at levels: " (&list->string~1623545778~2467 (&binding-levels~1623545778~2352 &binding~1623545778~9783) " ")) &id~1623545778~9782))) (let ((x (if (null? (&id-library~1623545778~2342 &id~1623545778~9782)) (= &*phase*~1623545778~2308 0) #f))) (if x x (&syntax-violation~1623545778~2445 "invalid reference" (string-append "No binding available for " (symbol->string (&id-name~1623545778~2337 &id~1623545778~9782)) " in library (" (&list->string~1623545778~2467 (&id-library~1623545778~2342 &id~1623545778~9782) " ") ")") &id~1623545778~9782)))))) (set! &make-null-env~1623545778~2362 (lambda () (quote ()))) (set! &make-unit-env~1623545778~2363 (lambda () (&env-extend~1623545778~2364 (quote ()) (&make-null-env~1623545778~2362)))) (set! &env-extend~1623545778~2364 (lambda (&mappings~1623545778~9775 &env~1623545778~9776) (cons (list &mappings~1623545778~9775) &env~1623545778~9776))) (set! &env-extend!~1623545778~2365 (lambda (&mappings~1623545778~9769 &env~1623545778~9770) ((lambda (&frame~1623545778~9773) (set-car! &frame~1623545778~9773 (append &mappings~1623545778~9769 (car &frame~1623545778~9773)))) (car &env~1623545778~9770)))) (set! &env-lookup~1623545778~2366 (lambda (&key~1623545778~9755 &env~1623545778~9756) (if (pair? &env~1623545778~9756) (let ((x ((lambda (&probe~1623545778~9762) (if &probe~1623545778~9762 (let ((x (cdr &probe~1623545778~9762))) (if x x (&syntax-violation~1623545778~2445 #f "Out of context reference to identifier" (car &key~1623545778~9755)))) #f)) (assoc &key~1623545778~9755 (caar &env~1623545778~9756))))) (if x x (&env-lookup~1623545778~2366 &key~1623545778~9755 (cdr &env~1623545778~9756)))) #f))) (set! &duplicate?~1623545778~2367 (lambda (&id~1623545778~9752 &env~1623545778~9753) (assoc (cons (&id-name~1623545778~2337 &id~1623545778~9752) (&id-colors~1623545778~2338 &id~1623545778~9752)) (caar &env~1623545778~9753)))) (set! &env-reflect~1623545778~2368 (lambda (&env~1623545778~9739) (if (if (not (null? &*env-table*~1623545778~2317)) (eq? &env~1623545778~9739 (cdar &*env-table*~1623545778~2317)) #f) (begin (caar &*env-table*~1623545778~2317)) (begin ((lambda (&key~1623545778~9748) (set! &*env-table*~1623545778~2317 (cons (cons &key~1623545778~9748 &env~1623545778~9739) &*env-table*~1623545778~2317)) &key~1623545778~9748) (&generate-guid~1623545778~2346 (quote env))))))) (set! &env-reify~1623545778~2369 (lambda (&key-or-env~1623545778~9736) (if (symbol? &key-or-env~1623545778~9736) (cdr (assq &key-or-env~1623545778~9736 &*env-table*~1623545778~2317)) &key-or-env~1623545778~9736))) (set! &compress~1623545778~2370 (lambda (&env-table~1623545778~9702) ((lambda (&frame-table~1623545778~9705 &count~1623545778~9706) (for-each (lambda (&entry~1623545778~9727) (for-each (lambda (&frame~1623545778~9729) (if (not (assq &frame~1623545778~9729 &frame-table~1623545778~9705)) (begin (set! &frame-table~1623545778~9705 (cons (cons &frame~1623545778~9729 &count~1623545778~9706) &frame-table~1623545778~9705)) (set! &count~1623545778~9706 (+ 1 &count~1623545778~9706))))) (cdr &entry~1623545778~9727))) &env-table~1623545778~9702) (cons (map (lambda (&env-entry~1623545778~9708) (cons (car &env-entry~1623545778~9708) (map (lambda (&frame~1623545778~9710) (cdr (assq &frame~1623545778~9710 &frame-table~1623545778~9705))) (cdr &env-entry~1623545778~9708)))) &env-table~1623545778~9702) (map (lambda (&frame-entry~1623545778~9712) (cons (cdr &frame-entry~1623545778~9712) (list (map (lambda (&mapping~1623545778~9714) (cons (car &mapping~1623545778~9714) ((lambda (&binding~1623545778~9717) ((lambda (&t~1623545778~9721) (if (memv &t~1623545778~9721 (quote (pattern-variable))) (begin #f) (begin &binding~1623545778~9717))) (&binding-type~1623545778~2350 &binding~1623545778~9717))) (cdr &mapping~1623545778~9714)))) (caar &frame-entry~1623545778~9712))))) &frame-table~1623545778~9705))) (quote ()) 0))) (set! &uncompress~1623545778~2371 (lambda (&compressed-env-table~1623545778~9696) (map (lambda (&env-entry~1623545778~9698) (cons (car &env-entry~1623545778~9698) (map (lambda (&frame-abbrev~1623545778~9700) (cdr (assv &frame-abbrev~1623545778~9700 (cdr &compressed-env-table~1623545778~9696)))) (cdr &env-entry~1623545778~9698)))) (car &compressed-env-table~1623545778~9696)))) (set! &syntax-reflect~1623545778~2372 (lambda (&id~1623545778~9687) (set! &*syntax-reflected*~1623545778~2329 #t) (list (quote ex:syntax-rename) (list (quote quote) (&id-name~1623545778~2337 &id~1623545778~9687)) (list (quote quote) (&id-colors~1623545778~2338 &id~1623545778~9687)) (list (quote quote) (cons (&env-reflect~1623545778~2368 &*usage-env*~1623545778~2305) (&id-transformer-envs~1623545778~2339 &id~1623545778~9687))) (- (- &*phase*~1623545778~2308 (&id-displacement~1623545778~2340 &id~1623545778~9687)) 1) (list (quote quote) (&id-library~1623545778~2342 &id~1623545778~9687))))) (set! &syntax-rename~1623545778~2373 (lambda (&name~1623545778~9681 &colors~1623545778~9682 &transformer-envs~1623545778~9683 &transformer-phase~1623545778~9684 &source-library~1623545778~9685) (&make-identifier~1623545778~2335 &name~1623545778~9681 (cons &*color*~1623545778~2311 &colors~1623545778~9682) &transformer-envs~1623545778~9683 (- &*phase*~1623545778~2308 &transformer-phase~1623545778~9684) &source-library~1623545778~9685))) (set! &datum->syntax~1623545778~2374 (lambda (&tid~1623545778~9671 &datum~1623545778~9672) (&check~1623545778~2469 &tid~1623545778~9671 &identifier?~1623545778~2336 (quote datum->syntax)) (&sexp-map~1623545778~2457 (lambda (&leaf~1623545778~9674) (if (symbol? &leaf~1623545778~9674) (begin (&make-identifier~1623545778~2335 &leaf~1623545778~9674 (&id-colors~1623545778~2338 &tid~1623545778~9671) (&id-transformer-envs~1623545778~2339 &tid~1623545778~9671) (&id-displacement~1623545778~2340 &tid~1623545778~9671) (&id-maybe-library~1623545778~2341 &tid~1623545778~9671))) (begin &leaf~1623545778~9674))) &datum~1623545778~9672))) (set! &syntax->datum~1623545778~2375 (lambda (&exp~1623545778~9660) (&sexp-map~1623545778~2457 (lambda (&leaf~1623545778~9662) (if (&identifier?~1623545778~2336 &leaf~1623545778~9662) (begin (&id-name~1623545778~2337 &leaf~1623545778~9662)) (if (symbol? &leaf~1623545778~9662) (begin (assertion-violation (quote syntax->datum) "A symbol is not a valid syntax object" &leaf~1623545778~9662)) (begin &leaf~1623545778~9662)))) &exp~1623545778~9660))) (set! &generate-temporaries~1623545778~2376 (lambda (&ls~1623545778~9654) (&check~1623545778~2469 &ls~1623545778~9654 list? (quote generate-temporaries)) (map (lambda (&ignore~1623545778~9656) (&make-identifier~1623545778~2335 (quote temp) (list (&generate-color~1623545778~2348)) (list (&make-null-env~1623545778~2362)) &*phase*~1623545778~2308 #f)) &ls~1623545778~9654))) (set! &rename~1623545778~2377 (lambda (&type~1623545778~9648 &symbol~1623545778~9649) (&make-identifier~1623545778~2335 &symbol~1623545778~9649 (list &*color*~1623545778~2311) (list (&env-extend~1623545778~2364 (list (cons (cons &symbol~1623545778~9649 (quote ())) (&make-binding~1623545778~2349 &type~1623545778~9648 &symbol~1623545778~9649 (quote (0)) #f (quote ())))) (&make-null-env~1623545778~2362))) &*phase*~1623545778~2308 #f))) (set! &make-macro~1623545778~2378 (lambda (&type~1623545778~9645 &proc~1623545778~9646) (list &type~1623545778~9645 &proc~1623545778~9646))) (set! &macro-type~1623545778~2379 car) (set! &macro-proc~1623545778~2380 cadr) (set! &make-expander~1623545778~2381 (lambda (&proc~1623545778~9642) (&make-macro~1623545778~2378 (quote expander) &proc~1623545778~9642))) (set! &make-transformer~1623545778~2382 (lambda (&proc~1623545778~9639) (&make-macro~1623545778~2378 (quote transformer) &proc~1623545778~9639))) (set! &make-variable-transformer~1623545778~2383 (lambda (&proc~1623545778~9636) (&make-macro~1623545778~2378 (quote variable-transformer) &proc~1623545778~9636))) (set! &make-user-macro~1623545778~2384 (lambda (&procedure-or-macro~1623545778~9633) (if (procedure? &procedure-or-macro~1623545778~9633) (&make-transformer~1623545778~2382 &procedure-or-macro~1623545778~9633) &procedure-or-macro~1623545778~9633))) (set! &binding->macro~1623545778~2385 (lambda (&binding~1623545778~9624 &t~1623545778~9625) ((lambda (&t~1623545778~9629) (if &t~1623545778~9629 (cdr &t~1623545778~9629) (begin (&syntax-violation~1623545778~2445 #f "Reference to macro keyword out of context" &t~1623545778~9625)))) (assq (&binding-name~1623545778~2351 &binding~1623545778~9624) &*macro-table*~1623545778~2314)))) (set! &register-macro!~1623545778~2386 (lambda (&binding-name~1623545778~9620 &procedure-or-macro~1623545778~9621) (set! &*macro-table*~1623545778~2314 (cons (cons &binding-name~1623545778~9620 (&make-user-macro~1623545778~2384 &procedure-or-macro~1623545778~9621)) &*macro-table*~1623545778~2314)))) (set! &invoke-macro~1623545778~2387 (lambda (&macro~1623545778~9616 &t~1623545778~9617) (set! &*color*~1623545778~2311 (&generate-color~1623545778~2348)) ((&macro-proc~1623545778~2380 &macro~1623545778~9616) &t~1623545778~9617))) (set! &expand~1623545778~2388 (lambda (&t~1623545778~9559) ((lambda (&saved~1623545778~9563) (set! &*trace*~1623545778~2326 (cons &t~1623545778~9559 &*trace*~1623545778~2326)) (call-with-values (lambda () ((lambda (&binding~1623545778~9568) (if &binding~1623545778~9568 (begin ((lambda (&t~1623545778~9575) (if (memv &t~1623545778~9575 (quote (macro))) (begin ((lambda (&macro~1623545778~9581) ((lambda (&expanded-once~1623545778~9584) ((lambda (&t~1623545778~9588) (if (memv &t~1623545778~9588 (quote (expander))) (begin &expanded-once~1623545778~9584) (begin (&expand~1623545778~2388 &expanded-once~1623545778~9584)))) (&macro-type~1623545778~2379 &macro~1623545778~9581))) (&invoke-macro~1623545778~2387 &macro~1623545778~9581 &t~1623545778~9559))) (&binding->macro~1623545778~2385 &binding~1623545778~9568 &t~1623545778~9559))) (if (memv &t~1623545778~9575 (quote (variable))) (begin (&check-implicit-import-of-mutable~1623545778~2391 &binding~1623545778~9568 &t~1623545778~9559) (if (list? &t~1623545778~9559) (cons (&binding-name~1623545778~2351 &binding~1623545778~9568) (map &expand~1623545778~2388 (cdr &t~1623545778~9559))) (&binding-name~1623545778~2351 &binding~1623545778~9568))) (if (memv &t~1623545778~9575 (quote (pattern-variable))) (begin (&syntax-violation~1623545778~2445 #f "Pattern variable used outside syntax template" &t~1623545778~9559)))))) (&binding-type~1623545778~2350 &binding~1623545778~9568))) (if (list? &t~1623545778~9559) (begin (map &expand~1623545778~2388 &t~1623545778~9559)) (if (&identifier?~1623545778~2336 &t~1623545778~9559) (begin (&make-free-name~1623545778~2347 (&id-name~1623545778~2337 &t~1623545778~9559))) (if (pair? &t~1623545778~9559) (begin (&syntax-violation~1623545778~2445 #f "Invalid procedure call syntax" &t~1623545778~9559)) (if (symbol? &t~1623545778~9559) (begin (&syntax-violation~1623545778~2445 #f "Symbol may not appear in syntax object" &t~1623545778~9559)) (if (vector? &t~1623545778~9559) (begin (&syntax->datum~1623545778~2375 &t~1623545778~9559)) (begin &t~1623545778~9559)))))))) (&operator-binding~1623545778~2390 &t~1623545778~9559))) (lambda &results~1623545778~9612 (set! &*trace*~1623545778~2326 &saved~1623545778~9563) (apply values &results~1623545778~9612)))) &*trace*~1623545778~2326))) (set! &head-expand~1623545778~2389 (lambda (&t~1623545778~9521) ((lambda (&saved~1623545778~9525) (set! &*trace*~1623545778~2326 (cons &t~1623545778~9521 &*trace*~1623545778~2326)) (call-with-values (lambda () ((lambda (&binding~1623545778~9530) (if &binding~1623545778~9530 (begin ((lambda (&t~1623545778~9537) (if (memv &t~1623545778~9537 (quote (macro))) (begin ((lambda (&macro~1623545778~9543) ((lambda (&t~1623545778~9547) (if (memv &t~1623545778~9547 (quote (expander))) (begin (values &t~1623545778~9521 &binding~1623545778~9530)) (begin (&head-expand~1623545778~2389 (&invoke-macro~1623545778~2387 &macro~1623545778~9543 &t~1623545778~9521))))) (&macro-type~1623545778~2379 &macro~1623545778~9543))) (&binding->macro~1623545778~2385 &binding~1623545778~9530 &t~1623545778~9521))) (begin (values &t~1623545778~9521 &binding~1623545778~9530)))) (&binding-type~1623545778~2350 &binding~1623545778~9530))) (begin (values &t~1623545778~9521 &binding~1623545778~9530)))) (&operator-binding~1623545778~2390 &t~1623545778~9521))) (lambda &results~1623545778~9555 (set! &*trace*~1623545778~2326 &saved~1623545778~9525) (apply values &results~1623545778~9555)))) &*trace*~1623545778~2326))) (set! &operator-binding~1623545778~2390 (lambda (&t~1623545778~9510) ((lambda (&operator~1623545778~9513) (if (&identifier?~1623545778~2336 &operator~1623545778~9513) ((lambda (&binding~1623545778~9518) (&check-binding-level~1623545778~2361 &operator~1623545778~9513 &binding~1623545778~9518) (&register-use!~1623545778~2421 &operator~1623545778~9513 &binding~1623545778~9518) &binding~1623545778~9518) (&binding~1623545778~2357 &operator~1623545778~9513)) #f)) (if (pair? &t~1623545778~9510) (car &t~1623545778~9510) &t~1623545778~9510)))) (set! &check-implicit-import-of-mutable~1623545778~2391 (lambda (&binding~1623545778~9504 &t~1623545778~9505) (let ((x (equal? (&binding-library~1623545778~2355 &binding~1623545778~9504) &*current-library*~1623545778~2320))) (if x x (let ((x (not (&binding-mutable?~1623545778~2353 &binding~1623545778~9504)))) (if x x (&syntax-violation~1623545778~2445 #f (string-append "Attempt to implicitly import variable that is mutable in library (" (&list->string~1623545778~2467 (&binding-library~1623545778~2355 &binding~1623545778~9504) " ") ")") &t~1623545778~9505))))))) (set! &expand-quote~1623545778~2392 (lambda (&exp~1623545778~9458) ((lambda (&x~1623545778~9471 &sk~1623545778~9472 &fk~1623545778~9473) (if (pair? &x~1623545778~9471) ((lambda (&x~1623545778~9476 &sk~1623545778~9477 &fk~1623545778~9478) (&sk~1623545778~9477)) (car &x~1623545778~9471) (lambda () ((lambda (&x~1623545778~9481 &sk~1623545778~9482 &fk~1623545778~9483) (if (pair? &x~1623545778~9481) ((lambda (&x~1623545778~9486 &sk~1623545778~9487 &fk~1623545778~9488) (&sk~1623545778~9487 &x~1623545778~9486)) (car &x~1623545778~9481) (lambda (&datum~1623545778~9490) ((lambda (&x~1623545778~9492 &sk~1623545778~9493 &fk~1623545778~9494) (if (null? &x~1623545778~9492) (&sk~1623545778~9493) (&fk~1623545778~9494))) (cdr &x~1623545778~9481) (lambda () (&sk~1623545778~9482 &datum~1623545778~9490)) &fk~1623545778~9483)) &fk~1623545778~9483) (&fk~1623545778~9483))) (cdr &x~1623545778~9471) (lambda (&datum~1623545778~9498) (&sk~1623545778~9472 &datum~1623545778~9498)) &fk~1623545778~9473)) &fk~1623545778~9473) (&fk~1623545778~9473))) &exp~1623545778~9458 (lambda (&datum~1623545778~9500) (&syntax->datum~1623545778~2375 &exp~1623545778~9458)) (lambda () (ex:invalid-form &exp~1623545778~9458))))) (set! &expand-if~1623545778~2393 (lambda (&exp~1623545778~9307) ((lambda (&x~1623545778~9328 &sk~1623545778~9329 &fk~1623545778~9330) (if (pair? &x~1623545778~9328) ((lambda (&x~1623545778~9333 &sk~1623545778~9334 &fk~1623545778~9335) (&sk~1623545778~9334)) (car &x~1623545778~9328) (lambda () ((lambda (&x~1623545778~9338 &sk~1623545778~9339 &fk~1623545778~9340) (if (pair? &x~1623545778~9338) ((lambda (&x~1623545778~9343 &sk~1623545778~9344 &fk~1623545778~9345) (&sk~1623545778~9344 &x~1623545778~9343)) (car &x~1623545778~9338) (lambda (&e1~1623545778~9347) ((lambda (&x~1623545778~9349 &sk~1623545778~9350 &fk~1623545778~9351) (if (pair? &x~1623545778~9349) ((lambda (&x~1623545778~9354 &sk~1623545778~9355 &fk~1623545778~9356) (&sk~1623545778~9355 &x~1623545778~9354)) (car &x~1623545778~9349) (lambda (&e2~1623545778~9358) ((lambda (&x~1623545778~9360 &sk~1623545778~9361 &fk~1623545778~9362) (if (pair? &x~1623545778~9360) ((lambda (&x~1623545778~9365 &sk~1623545778~9366 &fk~1623545778~9367) (&sk~1623545778~9366 &x~1623545778~9365)) (car &x~1623545778~9360) (lambda (&e3~1623545778~9369) ((lambda (&x~1623545778~9371 &sk~1623545778~9372 &fk~1623545778~9373) (if (null? &x~1623545778~9371) (&sk~1623545778~9372) (&fk~1623545778~9373))) (cdr &x~1623545778~9360) (lambda () (&sk~1623545778~9361 &e3~1623545778~9369)) &fk~1623545778~9362)) &fk~1623545778~9362) (&fk~1623545778~9362))) (cdr &x~1623545778~9349) (lambda (&e3~1623545778~9377) (&sk~1623545778~9350 &e2~1623545778~9358 &e3~1623545778~9377)) &fk~1623545778~9351)) &fk~1623545778~9351) (&fk~1623545778~9351))) (cdr &x~1623545778~9338) (lambda (&e2~1623545778~9379 &e3~1623545778~9380) (&sk~1623545778~9339 &e1~1623545778~9347 &e2~1623545778~9379 &e3~1623545778~9380)) &fk~1623545778~9340)) &fk~1623545778~9340) (&fk~1623545778~9340))) (cdr &x~1623545778~9328) (lambda (&e1~1623545778~9382 &e2~1623545778~9383 &e3~1623545778~9384) (&sk~1623545778~9329 &e1~1623545778~9382 &e2~1623545778~9383 &e3~1623545778~9384)) &fk~1623545778~9330)) &fk~1623545778~9330) (&fk~1623545778~9330))) &exp~1623545778~9307 (lambda (&e1~1623545778~9386 &e2~1623545778~9387 &e3~1623545778~9388) (list (quote if) (&expand~1623545778~2388 &e1~1623545778~9386) (&expand~1623545778~2388 &e2~1623545778~9387) (&expand~1623545778~2388 &e3~1623545778~9388))) (lambda () ((lambda (&x~1623545778~9408 &sk~1623545778~9409 &fk~1623545778~9410) (if (pair? &x~1623545778~9408) ((lambda (&x~1623545778~9413 &sk~1623545778~9414 &fk~1623545778~9415) (&sk~1623545778~9414)) (car &x~1623545778~9408) (lambda () ((lambda (&x~1623545778~9418 &sk~1623545778~9419 &fk~1623545778~9420) (if (pair? &x~1623545778~9418) ((lambda (&x~1623545778~9423 &sk~1623545778~9424 &fk~1623545778~9425) (&sk~1623545778~9424 &x~1623545778~9423)) (car &x~1623545778~9418) (lambda (&e1~1623545778~9427) ((lambda (&x~1623545778~9429 &sk~1623545778~9430 &fk~1623545778~9431) (if (pair? &x~1623545778~9429) ((lambda (&x~1623545778~9434 &sk~1623545778~9435 &fk~1623545778~9436) (&sk~1623545778~9435 &x~1623545778~9434)) (car &x~1623545778~9429) (lambda (&e2~1623545778~9438) ((lambda (&x~1623545778~9440 &sk~1623545778~9441 &fk~1623545778~9442) (if (null? &x~1623545778~9440) (&sk~1623545778~9441) (&fk~1623545778~9442))) (cdr &x~1623545778~9429) (lambda () (&sk~1623545778~9430 &e2~1623545778~9438)) &fk~1623545778~9431)) &fk~1623545778~9431) (&fk~1623545778~9431))) (cdr &x~1623545778~9418) (lambda (&e2~1623545778~9446) (&sk~1623545778~9419 &e1~1623545778~9427 &e2~1623545778~9446)) &fk~1623545778~9420)) &fk~1623545778~9420) (&fk~1623545778~9420))) (cdr &x~1623545778~9408) (lambda (&e1~1623545778~9448 &e2~1623545778~9449) (&sk~1623545778~9409 &e1~1623545778~9448 &e2~1623545778~9449)) &fk~1623545778~9410)) &fk~1623545778~9410) (&fk~1623545778~9410))) &exp~1623545778~9307 (lambda (&e1~1623545778~9451 &e2~1623545778~9452) (list (quote if) (&expand~1623545778~2388 &e1~1623545778~9451) (&expand~1623545778~2388 &e2~1623545778~9452))) (lambda () (ex:invalid-form &exp~1623545778~9307))))))) (set! &expand-set!~1623545778~2394 (lambda (&exp~1623545778~9201) ((lambda (&x~1623545778~9220 &sk~1623545778~9221 &fk~1623545778~9222) (if (pair? &x~1623545778~9220) ((lambda (&x~1623545778~9225 &sk~1623545778~9226 &fk~1623545778~9227) (&sk~1623545778~9226)) (car &x~1623545778~9220) (lambda () ((lambda (&x~1623545778~9230 &sk~1623545778~9231 &fk~1623545778~9232) (if (pair? &x~1623545778~9230) ((lambda (&x~1623545778~9235 &sk~1623545778~9236 &fk~1623545778~9237) (if (&identifier?~1623545778~2336 &x~1623545778~9235) ((lambda (&x~1623545778~9240 &sk~1623545778~9241 &fk~1623545778~9242) (&sk~1623545778~9241 &x~1623545778~9240)) &x~1623545778~9235 &sk~1623545778~9236 &fk~1623545778~9237) (&fk~1623545778~9237))) (car &x~1623545778~9230) (lambda (&id~1623545778~9244) ((lambda (&x~1623545778~9246 &sk~1623545778~9247 &fk~1623545778~9248) (if (pair? &x~1623545778~9246) ((lambda (&x~1623545778~9251 &sk~1623545778~9252 &fk~1623545778~9253) (&sk~1623545778~9252 &x~1623545778~9251)) (car &x~1623545778~9246) (lambda (&e~1623545778~9255) ((lambda (&x~1623545778~9257 &sk~1623545778~9258 &fk~1623545778~9259) (if (null? &x~1623545778~9257) (&sk~1623545778~9258) (&fk~1623545778~9259))) (cdr &x~1623545778~9246) (lambda () (&sk~1623545778~9247 &e~1623545778~9255)) &fk~1623545778~9248)) &fk~1623545778~9248) (&fk~1623545778~9248))) (cdr &x~1623545778~9230) (lambda (&e~1623545778~9263) (&sk~1623545778~9231 &id~1623545778~9244 &e~1623545778~9263)) &fk~1623545778~9232)) &fk~1623545778~9232) (&fk~1623545778~9232))) (cdr &x~1623545778~9220) (lambda (&id~1623545778~9265 &e~1623545778~9266) (&sk~1623545778~9221 &id~1623545778~9265 &e~1623545778~9266)) &fk~1623545778~9222)) &fk~1623545778~9222) (&fk~1623545778~9222))) &exp~1623545778~9201 (lambda (&id~1623545778~9268 &e~1623545778~9269) ((lambda (&binding~1623545778~9272) (&check-binding-level~1623545778~2361 &id~1623545778~9268 &binding~1623545778~9272) (&register-use!~1623545778~2421 &id~1623545778~9268 &binding~1623545778~9272) ((lambda (&t~1623545778~9276) (if (memv &t~1623545778~9276 (quote (macro))) (begin ((lambda (&macro~1623545778~9282) ((lambda (&t~1623545778~9286) (if (memv &t~1623545778~9286 (quote (variable-transformer))) (begin (&expand~1623545778~2388 (&invoke-macro~1623545778~2387 &macro~1623545778~9282 &exp~1623545778~9201))) (begin (&syntax-violation~1623545778~2445 (quote set!) "Keyword being set! is not a variable transformer" &exp~1623545778~9201 &id~1623545778~9268)))) (&macro-type~1623545778~2379 &macro~1623545778~9282))) (&binding->macro~1623545778~2385 &binding~1623545778~9272 &id~1623545778~9268))) (if (memv &t~1623545778~9276 (quote (variable))) (begin (let ((x (eq? (&binding-library~1623545778~2355 &binding~1623545778~9272) &*current-library*~1623545778~2320))) (if x x (&syntax-violation~1623545778~2445 (quote set!) "Directly or indirectly imported variable cannot be assigned" &exp~1623545778~9201 &id~1623545778~9268))) (&binding-mutable-set!~1623545778~2356 &binding~1623545778~9272 #t) (list (quote set!) (&binding-name~1623545778~2351 &binding~1623545778~9272) (&expand~1623545778~2388 &e~1623545778~9269))) (if (memv &t~1623545778~9276 (quote (pattern-variable))) (begin (&syntax-violation~1623545778~2445 (quote set!) "Pattern variable used outside syntax template" &exp~1623545778~9201 &id~1623545778~9268)))))) (&binding-type~1623545778~2350 &binding~1623545778~9272))) (&binding~1623545778~2357 &id~1623545778~9268))) (lambda () (ex:invalid-form &exp~1623545778~9201))))) (set! &expand-begin~1623545778~2395 (lambda (&exp~1623545778~9108) ((lambda (&x~1623545778~9119 &sk~1623545778~9120 &fk~1623545778~9121) (if (pair? &x~1623545778~9119) ((lambda (&x~1623545778~9124 &sk~1623545778~9125 &fk~1623545778~9126) (&sk~1623545778~9125)) (car &x~1623545778~9119) (lambda () ((lambda (&x~1623545778~9129 &sk~1623545778~9130 &fk~1623545778~9131) (((lambda (&loop~1623545778~9137) ((lambda (&temp~1623545778~9140) (set! &loop~1623545778~9137 &temp~1623545778~9140) ((lambda () &loop~1623545778~9137))) (lambda (&x~1623545778~9145 &result~1623545778~9146) ((lambda (&match-tail~1623545778~9147) (set! &match-tail~1623545778~9147 (lambda () ((lambda (&x~1623545778~9165 &sk~1623545778~9166 &fk~1623545778~9167) (if (null? &x~1623545778~9165) (&sk~1623545778~9166) (&fk~1623545778~9167))) &x~1623545778~9145 (lambda () (apply &sk~1623545778~9130 (if (null? &result~1623545778~9146) (map (lambda (&ignore~1623545778~9172) (quote ())) (quote (exps))) (apply map list (reverse &result~1623545778~9146))))) (lambda () ((lambda (&x~1623545778~9180 &sk~1623545778~9181 &fk~1623545778~9182) (&sk~1623545778~9181)) &x~1623545778~9145 (lambda () (&fk~1623545778~9131)) (lambda () (ex:invalid-form &x~1623545778~9145))))))) (if (null? &x~1623545778~9145) (begin (&match-tail~1623545778~9147)) (if (pair? &x~1623545778~9145) (begin ((lambda (&x~1623545778~9154 &sk~1623545778~9155 &fk~1623545778~9156) (&sk~1623545778~9155 &x~1623545778~9154)) (car &x~1623545778~9145) (lambda &car-vars~1623545778~9158 (&loop~1623545778~9137 (cdr &x~1623545778~9145) (cons &car-vars~1623545778~9158 &result~1623545778~9146))) &match-tail~1623545778~9147)) (begin (&fk~1623545778~9131))))) ex:undefined)))) ex:undefined) &x~1623545778~9129 (quote ()))) (cdr &x~1623545778~9119) (lambda (&exps~1623545778~9188) (&sk~1623545778~9120 &exps~1623545778~9188)) &fk~1623545778~9121)) &fk~1623545778~9121) (&fk~1623545778~9121))) &exp~1623545778~9108 (lambda (&exps~1623545778~9190) (&scan-sequence~1623545778~2404 (quote expression-sequence) #f &exps~1623545778~9190 (lambda (&forms~1623545778~9193 &no-syntax-definitions~1623545778~9194 &no-bound-variables~1623545778~9195) (cons (quote begin) (map cdr &forms~1623545778~9193))))) (lambda () (ex:invalid-form &exp~1623545778~9108))))) (set! &expand-local-syntax~1623545778~2396 (lambda (&exp~1623545778~9103) (&expand-begin~1623545778~2395 (list (&rename~1623545778~2377 (quote macro) (quote begin)) &exp~1623545778~9103)))) (set! &expand-and~1623545778~2397 (lambda (&exp~1623545778~8920) ((lambda (&x~1623545778~8929 &sk~1623545778~8930 &fk~1623545778~8931) (if (pair? &x~1623545778~8929) ((lambda (&x~1623545778~8934 &sk~1623545778~8935 &fk~1623545778~8936) (&sk~1623545778~8935 &x~1623545778~8934)) (car &x~1623545778~8929) (lambda (&and~1623545778~8938) ((lambda (&x~1623545778~8940 &sk~1623545778~8941 &fk~1623545778~8942) (if (null? &x~1623545778~8940) (&sk~1623545778~8941) (&fk~1623545778~8942))) (cdr &x~1623545778~8929) (lambda () (&sk~1623545778~8930 &and~1623545778~8938)) &fk~1623545778~8931)) &fk~1623545778~8931) (&fk~1623545778~8931))) &exp~1623545778~8920 (lambda (&and~1623545778~8946) #t) (lambda () ((lambda (&x~1623545778~8960 &sk~1623545778~8961 &fk~1623545778~8962) (if (pair? &x~1623545778~8960) ((lambda (&x~1623545778~8965 &sk~1623545778~8966 &fk~1623545778~8967) (&sk~1623545778~8966 &x~1623545778~8965)) (car &x~1623545778~8960) (lambda (&and~1623545778~8969) ((lambda (&x~1623545778~8971 &sk~1623545778~8972 &fk~1623545778~8973) (if (pair? &x~1623545778~8971) ((lambda (&x~1623545778~8976 &sk~1623545778~8977 &fk~1623545778~8978) (&sk~1623545778~8977 &x~1623545778~8976)) (car &x~1623545778~8971) (lambda (&e~1623545778~8980) ((lambda (&x~1623545778~8982 &sk~1623545778~8983 &fk~1623545778~8984) (if (null? &x~1623545778~8982) (&sk~1623545778~8983) (&fk~1623545778~8984))) (cdr &x~1623545778~8971) (lambda () (&sk~1623545778~8972 &e~1623545778~8980)) &fk~1623545778~8973)) &fk~1623545778~8973) (&fk~1623545778~8973))) (cdr &x~1623545778~8960) (lambda (&e~1623545778~8988) (&sk~1623545778~8961 &and~1623545778~8969 &e~1623545778~8988)) &fk~1623545778~8962)) &fk~1623545778~8962) (&fk~1623545778~8962))) &exp~1623545778~8920 (lambda (&and~1623545778~8990 &e~1623545778~8991) (&expand~1623545778~2388 &e~1623545778~8991)) (lambda () ((lambda (&x~1623545778~9007 &sk~1623545778~9008 &fk~1623545778~9009) (if (pair? &x~1623545778~9007) ((lambda (&x~1623545778~9012 &sk~1623545778~9013 &fk~1623545778~9014) (&sk~1623545778~9013 &x~1623545778~9012)) (car &x~1623545778~9007) (lambda (&and~1623545778~9016) ((lambda (&x~1623545778~9018 &sk~1623545778~9019 &fk~1623545778~9020) (if (pair? &x~1623545778~9018) ((lambda (&x~1623545778~9023 &sk~1623545778~9024 &fk~1623545778~9025) (&sk~1623545778~9024 &x~1623545778~9023)) (car &x~1623545778~9018) (lambda (&e~1623545778~9027) ((lambda (&x~1623545778~9029 &sk~1623545778~9030 &fk~1623545778~9031) (((lambda (&loop~1623545778~9037) ((lambda (&temp~1623545778~9040) (set! &loop~1623545778~9037 &temp~1623545778~9040) ((lambda () &loop~1623545778~9037))) (lambda (&x~1623545778~9045 &result~1623545778~9046) ((lambda (&match-tail~1623545778~9047) (set! &match-tail~1623545778~9047 (lambda () ((lambda (&x~1623545778~9065 &sk~1623545778~9066 &fk~1623545778~9067) (if (null? &x~1623545778~9065) (&sk~1623545778~9066) (&fk~1623545778~9067))) &x~1623545778~9045 (lambda () (apply &sk~1623545778~9030 (if (null? &result~1623545778~9046) (map (lambda (&ignore~1623545778~9072) (quote ())) (quote (es))) (apply map list (reverse &result~1623545778~9046))))) (lambda () ((lambda (&x~1623545778~9080 &sk~1623545778~9081 &fk~1623545778~9082) (&sk~1623545778~9081)) &x~1623545778~9045 (lambda () (&fk~1623545778~9031)) (lambda () (ex:invalid-form &x~1623545778~9045))))))) (if (null? &x~1623545778~9045) (begin (&match-tail~1623545778~9047)) (if (pair? &x~1623545778~9045) (begin ((lambda (&x~1623545778~9054 &sk~1623545778~9055 &fk~1623545778~9056) (&sk~1623545778~9055 &x~1623545778~9054)) (car &x~1623545778~9045) (lambda &car-vars~1623545778~9058 (&loop~1623545778~9037 (cdr &x~1623545778~9045) (cons &car-vars~1623545778~9058 &result~1623545778~9046))) &match-tail~1623545778~9047)) (begin (&fk~1623545778~9031))))) ex:undefined)))) ex:undefined) &x~1623545778~9029 (quote ()))) (cdr &x~1623545778~9018) (lambda (&es~1623545778~9088) (&sk~1623545778~9019 &e~1623545778~9027 &es~1623545778~9088)) &fk~1623545778~9020)) &fk~1623545778~9020) (&fk~1623545778~9020))) (cdr &x~1623545778~9007) (lambda (&e~1623545778~9090 &es~1623545778~9091) (&sk~1623545778~9008 &and~1623545778~9016 &e~1623545778~9090 &es~1623545778~9091)) &fk~1623545778~9009)) &fk~1623545778~9009) (&fk~1623545778~9009))) &exp~1623545778~8920 (lambda (&and~1623545778~9093 &e~1623545778~9094 &es~1623545778~9095) (cons (quote if) (cons (&expand~1623545778~2388 &e~1623545778~9094) (cons (&expand~1623545778~2388 (cons &and~1623545778~9093 &es~1623545778~9095)) (quote (#f)))))) (lambda () (ex:invalid-form &exp~1623545778~8920))))))))) (set! &expand-or~1623545778~2398 (lambda (&exp~1623545778~8734) ((lambda (&x~1623545778~8743 &sk~1623545778~8744 &fk~1623545778~8745) (if (pair? &x~1623545778~8743) ((lambda (&x~1623545778~8748 &sk~1623545778~8749 &fk~1623545778~8750) (&sk~1623545778~8749 &x~1623545778~8748)) (car &x~1623545778~8743) (lambda (&or~1623545778~8752) ((lambda (&x~1623545778~8754 &sk~1623545778~8755 &fk~1623545778~8756) (if (null? &x~1623545778~8754) (&sk~1623545778~8755) (&fk~1623545778~8756))) (cdr &x~1623545778~8743) (lambda () (&sk~1623545778~8744 &or~1623545778~8752)) &fk~1623545778~8745)) &fk~1623545778~8745) (&fk~1623545778~8745))) &exp~1623545778~8734 (lambda (&or~1623545778~8760) #t) (lambda () ((lambda (&x~1623545778~8774 &sk~1623545778~8775 &fk~1623545778~8776) (if (pair? &x~1623545778~8774) ((lambda (&x~1623545778~8779 &sk~1623545778~8780 &fk~1623545778~8781) (&sk~1623545778~8780 &x~1623545778~8779)) (car &x~1623545778~8774) (lambda (&or~1623545778~8783) ((lambda (&x~1623545778~8785 &sk~1623545778~8786 &fk~1623545778~8787) (if (pair? &x~1623545778~8785) ((lambda (&x~1623545778~8790 &sk~1623545778~8791 &fk~1623545778~8792) (&sk~1623545778~8791 &x~1623545778~8790)) (car &x~1623545778~8785) (lambda (&e~1623545778~8794) ((lambda (&x~1623545778~8796 &sk~1623545778~8797 &fk~1623545778~8798) (if (null? &x~1623545778~8796) (&sk~1623545778~8797) (&fk~1623545778~8798))) (cdr &x~1623545778~8785) (lambda () (&sk~1623545778~8786 &e~1623545778~8794)) &fk~1623545778~8787)) &fk~1623545778~8787) (&fk~1623545778~8787))) (cdr &x~1623545778~8774) (lambda (&e~1623545778~8802) (&sk~1623545778~8775 &or~1623545778~8783 &e~1623545778~8802)) &fk~1623545778~8776)) &fk~1623545778~8776) (&fk~1623545778~8776))) &exp~1623545778~8734 (lambda (&or~1623545778~8804 &e~1623545778~8805) (&expand~1623545778~2388 &e~1623545778~8805)) (lambda () ((lambda (&x~1623545778~8821 &sk~1623545778~8822 &fk~1623545778~8823) (if (pair? &x~1623545778~8821) ((lambda (&x~1623545778~8826 &sk~1623545778~8827 &fk~1623545778~8828) (&sk~1623545778~8827 &x~1623545778~8826)) (car &x~1623545778~8821) (lambda (&or~1623545778~8830) ((lambda (&x~1623545778~8832 &sk~1623545778~8833 &fk~1623545778~8834) (if (pair? &x~1623545778~8832) ((lambda (&x~1623545778~8837 &sk~1623545778~8838 &fk~1623545778~8839) (&sk~1623545778~8838 &x~1623545778~8837)) (car &x~1623545778~8832) (lambda (&e~1623545778~8841) ((lambda (&x~1623545778~8843 &sk~1623545778~8844 &fk~1623545778~8845) (((lambda (&loop~1623545778~8851) ((lambda (&temp~1623545778~8854) (set! &loop~1623545778~8851 &temp~1623545778~8854) ((lambda () &loop~1623545778~8851))) (lambda (&x~1623545778~8859 &result~1623545778~8860) ((lambda (&match-tail~1623545778~8861) (set! &match-tail~1623545778~8861 (lambda () ((lambda (&x~1623545778~8879 &sk~1623545778~8880 &fk~1623545778~8881) (if (null? &x~1623545778~8879) (&sk~1623545778~8880) (&fk~1623545778~8881))) &x~1623545778~8859 (lambda () (apply &sk~1623545778~8844 (if (null? &result~1623545778~8860) (map (lambda (&ignore~1623545778~8886) (quote ())) (quote (es))) (apply map list (reverse &result~1623545778~8860))))) (lambda () ((lambda (&x~1623545778~8894 &sk~1623545778~8895 &fk~1623545778~8896) (&sk~1623545778~8895)) &x~1623545778~8859 (lambda () (&fk~1623545778~8845)) (lambda () (ex:invalid-form &x~1623545778~8859))))))) (if (null? &x~1623545778~8859) (begin (&match-tail~1623545778~8861)) (if (pair? &x~1623545778~8859) (begin ((lambda (&x~1623545778~8868 &sk~1623545778~8869 &fk~1623545778~8870) (&sk~1623545778~8869 &x~1623545778~8868)) (car &x~1623545778~8859) (lambda &car-vars~1623545778~8872 (&loop~1623545778~8851 (cdr &x~1623545778~8859) (cons &car-vars~1623545778~8872 &result~1623545778~8860))) &match-tail~1623545778~8861)) (begin (&fk~1623545778~8845))))) ex:undefined)))) ex:undefined) &x~1623545778~8843 (quote ()))) (cdr &x~1623545778~8832) (lambda (&es~1623545778~8902) (&sk~1623545778~8833 &e~1623545778~8841 &es~1623545778~8902)) &fk~1623545778~8834)) &fk~1623545778~8834) (&fk~1623545778~8834))) (cdr &x~1623545778~8821) (lambda (&e~1623545778~8904 &es~1623545778~8905) (&sk~1623545778~8822 &or~1623545778~8830 &e~1623545778~8904 &es~1623545778~8905)) &fk~1623545778~8823)) &fk~1623545778~8823) (&fk~1623545778~8823))) &exp~1623545778~8734 (lambda (&or~1623545778~8907 &e~1623545778~8908 &es~1623545778~8909) (list (quote let) (list (list (quote x) (&expand~1623545778~2388 &e~1623545778~8908))) (list (quote if) (quote x) (quote x) (&expand~1623545778~2388 (cons &or~1623545778~8907 &es~1623545778~8909))))) (lambda () (ex:invalid-form &exp~1623545778~8734))))))))) (set! &expand-lambda~1623545778~2399 (lambda (&exp~1623545778~8579) ((lambda (&x~1623545778~8596 &sk~1623545778~8597 &fk~1623545778~8598) (if (pair? &x~1623545778~8596) ((lambda (&x~1623545778~8601 &sk~1623545778~8602 &fk~1623545778~8603) (&sk~1623545778~8602)) (car &x~1623545778~8596) (lambda () ((lambda (&x~1623545778~8606 &sk~1623545778~8607 &fk~1623545778~8608) (if (pair? &x~1623545778~8606) ((lambda (&x~1623545778~8611 &sk~1623545778~8612 &fk~1623545778~8613) (if (&formals?~1623545778~2400 &x~1623545778~8611) ((lambda (&x~1623545778~8616 &sk~1623545778~8617 &fk~1623545778~8618) (&sk~1623545778~8617 &x~1623545778~8616)) &x~1623545778~8611 &sk~1623545778~8612 &fk~1623545778~8613) (&fk~1623545778~8613))) (car &x~1623545778~8606) (lambda (&formals~1623545778~8620) ((lambda (&x~1623545778~8622 &sk~1623545778~8623 &fk~1623545778~8624) (((lambda (&loop~1623545778~8630) ((lambda (&temp~1623545778~8633) (set! &loop~1623545778~8630 &temp~1623545778~8633) ((lambda () &loop~1623545778~8630))) (lambda (&x~1623545778~8638 &result~1623545778~8639) ((lambda (&match-tail~1623545778~8640) (set! &match-tail~1623545778~8640 (lambda () ((lambda (&x~1623545778~8658 &sk~1623545778~8659 &fk~1623545778~8660) (if (null? &x~1623545778~8658) (&sk~1623545778~8659) (&fk~1623545778~8660))) &x~1623545778~8638 (lambda () (apply &sk~1623545778~8623 (if (null? &result~1623545778~8639) (map (lambda (&ignore~1623545778~8665) (quote ())) (quote (body))) (apply map list (reverse &result~1623545778~8639))))) (lambda () ((lambda (&x~1623545778~8673 &sk~1623545778~8674 &fk~1623545778~8675) (&sk~1623545778~8674)) &x~1623545778~8638 (lambda () (&fk~1623545778~8624)) (lambda () (ex:invalid-form &x~1623545778~8638))))))) (if (null? &x~1623545778~8638) (begin (&match-tail~1623545778~8640)) (if (pair? &x~1623545778~8638) (begin ((lambda (&x~1623545778~8647 &sk~1623545778~8648 &fk~1623545778~8649) (&sk~1623545778~8648 &x~1623545778~8647)) (car &x~1623545778~8638) (lambda &car-vars~1623545778~8651 (&loop~1623545778~8630 (cdr &x~1623545778~8638) (cons &car-vars~1623545778~8651 &result~1623545778~8639))) &match-tail~1623545778~8640)) (begin (&fk~1623545778~8624))))) ex:undefined)))) ex:undefined) &x~1623545778~8622 (quote ()))) (cdr &x~1623545778~8606) (lambda (&body~1623545778~8681) (&sk~1623545778~8607 &formals~1623545778~8620 &body~1623545778~8681)) &fk~1623545778~8608)) &fk~1623545778~8608) (&fk~1623545778~8608))) (cdr &x~1623545778~8596) (lambda (&formals~1623545778~8683 &body~1623545778~8684) (&sk~1623545778~8597 &formals~1623545778~8683 &body~1623545778~8684)) &fk~1623545778~8598)) &fk~1623545778~8598) (&fk~1623545778~8598))) &exp~1623545778~8579 (lambda (&formals~1623545778~8686 &body~1623545778~8687) ((lambda (&saved~1623545778~8691) (set! &*usage-env*~1623545778~2305 (&env-extend~1623545778~2364 (map (lambda (&formal~1623545778~8729) (&make-local-mapping~1623545778~2358 (quote variable) &formal~1623545778~8729 #f)) (&flatten~1623545778~2456 &formals~1623545778~8686)) &*usage-env*~1623545778~2305)) (call-with-values (lambda () ((lambda (&formals~1623545778~8696) ((lambda (&saved~1623545778~8700) (set! &*usage-env*~1623545778~2305 (&env-extend~1623545778~2364 (quote ()) &*usage-env*~1623545778~2305)) (call-with-values (lambda () (&scan-sequence~1623545778~2404 (quote lambda) &make-local-mapping~1623545778~2358 &body~1623545778~8687 (lambda (&forms~1623545778~8705 &syntax-definitions~1623545778~8706 &bound-variables~1623545778~8707) (cons (quote lambda) (cons &formals~1623545778~8696 (if (null? &bound-variables~1623545778~8707) (&emit-body~1623545778~2405 &forms~1623545778~8705 ex:undefined-set!) (list (cons (cons (quote lambda) (cons &bound-variables~1623545778~8707 (&emit-body~1623545778~2405 &forms~1623545778~8705 ex:undefined-set!))) (map (lambda (&ignore~1623545778~8714) (quote ex:undefined)) &bound-variables~1623545778~8707))))))))) (lambda &results~1623545778~8718 (set! &*usage-env*~1623545778~2305 &saved~1623545778~8700) (apply values &results~1623545778~8718)))) &*usage-env*~1623545778~2305)) (&dotted-map~1623545778~2459 (lambda (&formal~1623545778~8723) (&binding-name~1623545778~2351 (&binding~1623545778~2357 &formal~1623545778~8723))) &formals~1623545778~8686))) (lambda &results~1623545778~8725 (set! &*usage-env*~1623545778~2305 &saved~1623545778~8691) (apply values &results~1623545778~8725)))) &*usage-env*~1623545778~2305)) (lambda () (ex:invalid-form &exp~1623545778~8579))))) (set! &formals?~1623545778~2400 (lambda (&s~1623545778~8568) (let ((x (null? &s~1623545778~8568))) (if x x (let ((x (&identifier?~1623545778~2336 &s~1623545778~8568))) (if x x (if (pair? &s~1623545778~8568) (if (&identifier?~1623545778~2336 (car &s~1623545778~8568)) (if (&formals?~1623545778~2400 (cdr &s~1623545778~8568)) (not (&dotted-memp~1623545778~2458 (lambda (&x~1623545778~8577) (&bound-identifier=?~1623545778~2343 &x~1623545778~8577 (car &s~1623545778~8568))) (cdr &s~1623545778~8568))) #f) #f) #f))))))) (set! &make-wrap~1623545778~2401 (lambda (&env~1623545778~8565 &exp~1623545778~8566) (cons &env~1623545778~8565 &exp~1623545778~8566))) (set! &wrap-env~1623545778~2402 car) (set! &wrap-exp~1623545778~2403 cdr) (set! &scan-sequence~1623545778~2404 (lambda (&body-type~1623545778~8283 &make-map~1623545778~8284 &body-forms~1623545778~8285 &k~1623545778~8286) ((lambda (&expand-deferred~1623545778~8287) (set! &expand-deferred~1623545778~8287 (lambda (&forms~1623545778~8546) (map (lambda (&form~1623545778~8548) (cons (car &form~1623545778~8548) ((lambda (&deferred?~1623545778~8551 &exp~1623545778~8552) (if &deferred?~1623545778~8551 ((lambda (&saved~1623545778~8557) (set! &*usage-env*~1623545778~2305 (&wrap-env~1623545778~2402 &exp~1623545778~8552)) (call-with-values (lambda () (&expand~1623545778~2388 (&wrap-exp~1623545778~2403 &exp~1623545778~8552))) (lambda &results~1623545778~8561 (set! &*usage-env*~1623545778~2305 &saved~1623545778~8557) (apply values &results~1623545778~8561)))) &*usage-env*~1623545778~2305) &exp~1623545778~8552)) (cadr &form~1623545778~8548) (caddr &form~1623545778~8548)))) &forms~1623545778~8546))) ((lambda (&common-env~1623545778~8290) (&add-fresh-used-frame!~1623545778~2420) (((lambda (&loop~1623545778~8296) ((lambda (&temp~1623545778~8299) (set! &loop~1623545778~8296 &temp~1623545778~8299) ((lambda () &loop~1623545778~8296))) (lambda (&ws~1623545778~8304 &forms~1623545778~8305 &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307) (if (null? &ws~1623545778~8304) (begin (&check-expression-body~1623545778~2411 &body-type~1623545778~8283 &forms~1623545778~8305 &body-forms~1623545778~8285) (&merge-used-with-parent-frame!~1623545778~2422) (&k~1623545778~8286 (reverse (&expand-deferred~1623545778~8287 &forms~1623545778~8305)) (reverse &syntax-defs~1623545778~8306) &bound-variables~1623545778~8307)) (begin ((lambda (&saved~1623545778~8315) (set! &*usage-env*~1623545778~2305 (&wrap-env~1623545778~2402 (car &ws~1623545778~8304))) (call-with-values (lambda () (call-with-values (lambda () (&head-expand~1623545778~2389 (&wrap-exp~1623545778~2403 (car &ws~1623545778~8304)))) (lambda (&form~1623545778~8320 &operator-binding~1623545778~8321) ((lambda (&type~1623545778~8324) (&check-expression-sequence~1623545778~2408 &body-type~1623545778~8283 &type~1623545778~8324 &form~1623545778~8320) (&check-toplevel~1623545778~2409 &body-type~1623545778~8283 &type~1623545778~8324 &form~1623545778~8320) ((lambda (&t~1623545778~8328) (if (memv &t~1623545778~8328 (quote (import))) (begin ((lambda (&x~1623545778~8342 &sk~1623545778~8343 &fk~1623545778~8344) (if (pair? &x~1623545778~8342) ((lambda (&x~1623545778~8347 &sk~1623545778~8348 &fk~1623545778~8349) (&sk~1623545778~8348)) (car &x~1623545778~8342) (lambda () ((lambda (&x~1623545778~8352 &sk~1623545778~8353 &fk~1623545778~8354) (((lambda (&loop~1623545778~8360) ((lambda (&temp~1623545778~8363) (set! &loop~1623545778~8360 &temp~1623545778~8363) ((lambda () &loop~1623545778~8360))) (lambda (&x~1623545778~8368 &result~1623545778~8369) ((lambda (&match-tail~1623545778~8370) (set! &match-tail~1623545778~8370 (lambda () ((lambda (&x~1623545778~8388 &sk~1623545778~8389 &fk~1623545778~8390) (if (null? &x~1623545778~8388) (&sk~1623545778~8389) (&fk~1623545778~8390))) &x~1623545778~8368 (lambda () (apply &sk~1623545778~8353 (if (null? &result~1623545778~8369) (map (lambda (&ignore~1623545778~8395) (quote ())) (quote (specs))) (apply map list (reverse &result~1623545778~8369))))) (lambda () ((lambda (&x~1623545778~8403 &sk~1623545778~8404 &fk~1623545778~8405) (&sk~1623545778~8404)) &x~1623545778~8368 (lambda () (&fk~1623545778~8354)) (lambda () (ex:invalid-form &x~1623545778~8368))))))) (if (null? &x~1623545778~8368) (begin (&match-tail~1623545778~8370)) (if (pair? &x~1623545778~8368) (begin ((lambda (&x~1623545778~8377 &sk~1623545778~8378 &fk~1623545778~8379) (&sk~1623545778~8378 &x~1623545778~8377)) (car &x~1623545778~8368) (lambda &car-vars~1623545778~8381 (&loop~1623545778~8360 (cdr &x~1623545778~8368) (cons &car-vars~1623545778~8381 &result~1623545778~8369))) &match-tail~1623545778~8370)) (begin (&fk~1623545778~8354))))) ex:undefined)))) ex:undefined) &x~1623545778~8352 (quote ()))) (cdr &x~1623545778~8342) (lambda (&specs~1623545778~8411) (&sk~1623545778~8343 &specs~1623545778~8411)) &fk~1623545778~8344)) &fk~1623545778~8344) (&fk~1623545778~8344))) &form~1623545778~8320 (lambda (&specs~1623545778~8413) (call-with-values (lambda () (&scan-imports~1623545778~2432 &specs~1623545778~8413)) (lambda (&imported-libraries~1623545778~8416 &imports~1623545778~8417) (&import-libraries-for-expand~1623545778~2429 &imported-libraries~1623545778~8416 (map not &imported-libraries~1623545778~8416) 0) (&env-import!~1623545778~2427 (car &form~1623545778~8320) &imports~1623545778~8417 &common-env~1623545778~8290) (&loop~1623545778~8296 (cdr &ws~1623545778~8304) (cons (list #f #f (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) &imported-libraries~1623545778~8416) (cons (list (quote quote) (&current-builds~1623545778~2428 &imported-libraries~1623545778~8416)) (quote (0)))))) &forms~1623545778~8305) &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)))) (lambda () (ex:invalid-form &form~1623545778~8320)))) (if (memv &t~1623545778~8328 (quote (program))) (begin (&loop~1623545778~8296 (cdr &ws~1623545778~8304) (cons (list #f #f (&expand-program~1623545778~2424 &form~1623545778~8320)) &forms~1623545778~8305) &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)) (if (memv &t~1623545778~8328 (quote (library))) (begin (&loop~1623545778~8296 (cdr &ws~1623545778~8304) (cons (list #f #f (&expand-library~1623545778~2425 &form~1623545778~8320)) &forms~1623545778~8305) &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)) (if (memv &t~1623545778~8328 (quote (define))) (begin (call-with-values (lambda () (&parse-definition~1623545778~2406 &form~1623545778~8320 #f)) (lambda (&id~1623545778~8436 &rhs~1623545778~8437) (&check-valid-definition~1623545778~2410 &id~1623545778~8436 &common-env~1623545778~8290 &body-type~1623545778~8283 &form~1623545778~8320 &forms~1623545778~8305 &type~1623545778~8324) (&env-extend!~1623545778~2365 (list (&make-map~1623545778~8284 (quote variable) &id~1623545778~8436 #f)) &common-env~1623545778~8290) (&loop~1623545778~8296 (cdr &ws~1623545778~8304) (cons (list (&binding-name~1623545778~2351 (&binding~1623545778~2357 &id~1623545778~8436)) #t (&make-wrap~1623545778~2401 &*usage-env*~1623545778~2305 &rhs~1623545778~8437)) &forms~1623545778~8305) &syntax-defs~1623545778~8306 (cons (&binding-name~1623545778~2351 (&binding~1623545778~2357 &id~1623545778~8436)) &bound-variables~1623545778~8307))))) (if (memv &t~1623545778~8328 (quote (define-syntax))) (begin (call-with-values (lambda () (&parse-definition~1623545778~2406 &form~1623545778~8320 #t)) (lambda (&id~1623545778~8444 &rhs~1623545778~8445) (&check-valid-definition~1623545778~2410 &id~1623545778~8444 &common-env~1623545778~8290 &body-type~1623545778~8283 &form~1623545778~8320 &forms~1623545778~8305 &type~1623545778~8324) ((lambda (&mapping~1623545778~8448) (&env-extend!~1623545778~2365 (list &mapping~1623545778~8448) &common-env~1623545778~8290) ((lambda (&rhs~1623545778~8451) (&register-macro!~1623545778~2386 (&binding-name~1623545778~2351 (cdr &mapping~1623545778~8448)) (&make-user-macro~1623545778~2384 (eval &rhs~1623545778~8451 (interaction-environment)))) (&loop~1623545778~8296 (cdr &ws~1623545778~8304) &forms~1623545778~8305 (cons (cons (&binding-name~1623545778~2351 (&binding~1623545778~2357 &id~1623545778~8444)) &rhs~1623545778~8451) &syntax-defs~1623545778~8306) &bound-variables~1623545778~8307)) ((lambda (&saved~1623545778~8455) (set! &*phase*~1623545778~2308 (+ 1 &*phase*~1623545778~2308)) (call-with-values (lambda () (&expand~1623545778~2388 &rhs~1623545778~8445)) (lambda &results~1623545778~8459 (set! &*phase*~1623545778~2308 &saved~1623545778~8455) (apply values &results~1623545778~8459)))) &*phase*~1623545778~2308))) (&make-map~1623545778~8284 (quote macro) &id~1623545778~8444 #f))))) (if (memv &t~1623545778~8328 (quote (begin))) (begin (let ((x (list? &form~1623545778~8320))) (if x x (&invalid-form~1623545778~2470 &form~1623545778~8320))) (&loop~1623545778~8296 (append (map (lambda (&exp~1623545778~8467) (&make-wrap~1623545778~2401 &*usage-env*~1623545778~2305 &exp~1623545778~8467)) (cdr &form~1623545778~8320)) (cdr &ws~1623545778~8304)) &forms~1623545778~8305 &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)) (if (memv &t~1623545778~8328 (quote (let-syntax letrec-syntax))) (begin (call-with-values (lambda () (&parse-local-syntax~1623545778~2407 &form~1623545778~8320)) (lambda (&formals~1623545778~8475 &rhs~1623545778~8476 &body~1623545778~8477) ((lambda (&original-env~1623545778~8481) ((lambda (&usage-diff~1623545778~8484) ((lambda (&extended-env~1623545778~8487) ((lambda (&rhs-expanded~1623545778~8490) ((lambda (&macros~1623545778~8493) (for-each (lambda (&mapping~1623545778~8497 &macro~1623545778~8498) (&register-macro!~1623545778~2386 (&binding-name~1623545778~2351 (cdr &mapping~1623545778~8497)) (&make-user-macro~1623545778~2384 &macro~1623545778~8498))) &usage-diff~1623545778~8484 &macros~1623545778~8493) (&loop~1623545778~8296 (append (map (lambda (&form~1623545778~8495) (&make-wrap~1623545778~2401 &extended-env~1623545778~8487 &form~1623545778~8495)) &body~1623545778~8477) (cdr &ws~1623545778~8304)) &forms~1623545778~8305 &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)) (map (lambda (&e~1623545778~8500) (eval &e~1623545778~8500 (interaction-environment))) &rhs-expanded~1623545778~8490))) ((lambda (&saved~1623545778~8504) (set! &*phase*~1623545778~2308 (+ 1 &*phase*~1623545778~2308)) (call-with-values (lambda () ((lambda (&saved~1623545778~8509) (set! &*usage-env*~1623545778~2305 ((lambda (&t~1623545778~8519) (if (memv &t~1623545778~8519 (quote (let-syntax))) (begin &original-env~1623545778~8481) (if (memv &t~1623545778~8519 (quote (letrec-syntax))) (begin &extended-env~1623545778~8487)))) &type~1623545778~8324)) (call-with-values (lambda () (map &expand~1623545778~2388 &rhs~1623545778~8476)) (lambda &results~1623545778~8513 (set! &*usage-env*~1623545778~2305 &saved~1623545778~8509) (apply values &results~1623545778~8513)))) &*usage-env*~1623545778~2305)) (lambda &results~1623545778~8527 (set! &*phase*~1623545778~2308 &saved~1623545778~8504) (apply values &results~1623545778~8527)))) &*phase*~1623545778~2308))) (&env-extend~1623545778~2364 &usage-diff~1623545778~8484 &original-env~1623545778~8481))) (map (lambda (&formal~1623545778~8531) (&make-local-mapping~1623545778~2358 (quote macro) &formal~1623545778~8531 #f)) &formals~1623545778~8475))) &*usage-env*~1623545778~2305)))) (begin (&loop~1623545778~8296 (cdr &ws~1623545778~8304) (cons (list #f #t (&make-wrap~1623545778~2401 &*usage-env*~1623545778~2305 &form~1623545778~8320)) &forms~1623545778~8305) &syntax-defs~1623545778~8306 &bound-variables~1623545778~8307)))))))))) &type~1623545778~8324)) (if &operator-binding~1623545778~8321 (&binding-name~1623545778~2351 &operator-binding~1623545778~8321) #f))))) (lambda &results~1623545778~8537 (set! &*usage-env*~1623545778~2305 &saved~1623545778~8315) (apply values &results~1623545778~8537)))) &*usage-env*~1623545778~2305)))))) ex:undefined) (map (lambda (&e~1623545778~8541) (&make-wrap~1623545778~2401 &common-env~1623545778~8290 &e~1623545778~8541)) &body-forms~1623545778~8285) (quote ()) (quote ()) (quote ()))) &*usage-env*~1623545778~2305)) ex:undefined))) (set! &emit-body~1623545778~2405 (lambda (&body-forms~1623545778~8276 &define-or-set~1623545778~8277) (map (lambda (&body-form~1623545778~8279) (if (symbol? (car &body-form~1623545778~8279)) (list &define-or-set~1623545778~8277 (car &body-form~1623545778~8279) (cdr &body-form~1623545778~8279)) (cdr &body-form~1623545778~8279))) &body-forms~1623545778~8276))) (set! &parse-definition~1623545778~2406 (lambda (&exp~1623545778~8010 &syntax-def?~1623545778~8011) ((lambda (&x~1623545778~8026 &sk~1623545778~8027 &fk~1623545778~8028) (if (pair? &x~1623545778~8026) ((lambda (&x~1623545778~8031 &sk~1623545778~8032 &fk~1623545778~8033) (&sk~1623545778~8032)) (car &x~1623545778~8026) (lambda () ((lambda (&x~1623545778~8036 &sk~1623545778~8037 &fk~1623545778~8038) (if (pair? &x~1623545778~8036) ((lambda (&x~1623545778~8041 &sk~1623545778~8042 &fk~1623545778~8043) (if (&identifier?~1623545778~2336 &x~1623545778~8041) ((lambda (&x~1623545778~8046 &sk~1623545778~8047 &fk~1623545778~8048) (&sk~1623545778~8047 &x~1623545778~8046)) &x~1623545778~8041 &sk~1623545778~8042 &fk~1623545778~8043) (&fk~1623545778~8043))) (car &x~1623545778~8036) (lambda (&id~1623545778~8050) ((lambda (&x~1623545778~8052 &sk~1623545778~8053 &fk~1623545778~8054) (if (null? &x~1623545778~8052) (&sk~1623545778~8053) (&fk~1623545778~8054))) (cdr &x~1623545778~8036) (lambda () (&sk~1623545778~8037 &id~1623545778~8050)) &fk~1623545778~8038)) &fk~1623545778~8038) (&fk~1623545778~8038))) (cdr &x~1623545778~8026) (lambda (&id~1623545778~8058) (&sk~1623545778~8027 &id~1623545778~8058)) &fk~1623545778~8028)) &fk~1623545778~8028) (&fk~1623545778~8028))) &exp~1623545778~8010 (lambda (&id~1623545778~8060) (values &id~1623545778~8060 (&rename~1623545778~2377 (quote variable) (quote ex:unspecified)))) (lambda () ((lambda (&x~1623545778~8082 &sk~1623545778~8083 &fk~1623545778~8084) (if (pair? &x~1623545778~8082) ((lambda (&x~1623545778~8087 &sk~1623545778~8088 &fk~1623545778~8089) (&sk~1623545778~8088)) (car &x~1623545778~8082) (lambda () ((lambda (&x~1623545778~8092 &sk~1623545778~8093 &fk~1623545778~8094) (if (pair? &x~1623545778~8092) ((lambda (&x~1623545778~8097 &sk~1623545778~8098 &fk~1623545778~8099) (if (&identifier?~1623545778~2336 &x~1623545778~8097) ((lambda (&x~1623545778~8102 &sk~1623545778~8103 &fk~1623545778~8104) (&sk~1623545778~8103 &x~1623545778~8102)) &x~1623545778~8097 &sk~1623545778~8098 &fk~1623545778~8099) (&fk~1623545778~8099))) (car &x~1623545778~8092) (lambda (&id~1623545778~8106) ((lambda (&x~1623545778~8108 &sk~1623545778~8109 &fk~1623545778~8110) (if (pair? &x~1623545778~8108) ((lambda (&x~1623545778~8113 &sk~1623545778~8114 &fk~1623545778~8115) (&sk~1623545778~8114 &x~1623545778~8113)) (car &x~1623545778~8108) (lambda (&e~1623545778~8117) ((lambda (&x~1623545778~8119 &sk~1623545778~8120 &fk~1623545778~8121) (if (null? &x~1623545778~8119) (&sk~1623545778~8120) (&fk~1623545778~8121))) (cdr &x~1623545778~8108) (lambda () (&sk~1623545778~8109 &e~1623545778~8117)) &fk~1623545778~8110)) &fk~1623545778~8110) (&fk~1623545778~8110))) (cdr &x~1623545778~8092) (lambda (&e~1623545778~8125) (&sk~1623545778~8093 &id~1623545778~8106 &e~1623545778~8125)) &fk~1623545778~8094)) &fk~1623545778~8094) (&fk~1623545778~8094))) (cdr &x~1623545778~8082) (lambda (&id~1623545778~8127 &e~1623545778~8128) (&sk~1623545778~8083 &id~1623545778~8127 &e~1623545778~8128)) &fk~1623545778~8084)) &fk~1623545778~8084) (&fk~1623545778~8084))) &exp~1623545778~8010 (lambda (&id~1623545778~8130 &e~1623545778~8131) (values &id~1623545778~8130 &e~1623545778~8131)) (lambda () ((lambda (&x~1623545778~8155 &sk~1623545778~8156 &fk~1623545778~8157) (if (pair? &x~1623545778~8155) ((lambda (&x~1623545778~8160 &sk~1623545778~8161 &fk~1623545778~8162) (&sk~1623545778~8161)) (car &x~1623545778~8155) (lambda () ((lambda (&x~1623545778~8165 &sk~1623545778~8166 &fk~1623545778~8167) (if (pair? &x~1623545778~8165) ((lambda (&x~1623545778~8170 &sk~1623545778~8171 &fk~1623545778~8172) (if (pair? &x~1623545778~8170) ((lambda (&x~1623545778~8175 &sk~1623545778~8176 &fk~1623545778~8177) (if (&identifier?~1623545778~2336 &x~1623545778~8175) ((lambda (&x~1623545778~8180 &sk~1623545778~8181 &fk~1623545778~8182) (&sk~1623545778~8181 &x~1623545778~8180)) &x~1623545778~8175 &sk~1623545778~8176 &fk~1623545778~8177) (&fk~1623545778~8177))) (car &x~1623545778~8170) (lambda (&id~1623545778~8184) ((lambda (&x~1623545778~8186 &sk~1623545778~8187 &fk~1623545778~8188) (if (&formals?~1623545778~2400 &x~1623545778~8186) ((lambda (&x~1623545778~8191 &sk~1623545778~8192 &fk~1623545778~8193) (&sk~1623545778~8192 &x~1623545778~8191)) &x~1623545778~8186 &sk~1623545778~8187 &fk~1623545778~8188) (&fk~1623545778~8188))) (cdr &x~1623545778~8170) (lambda (&formals~1623545778~8195) (&sk~1623545778~8171 &id~1623545778~8184 &formals~1623545778~8195)) &fk~1623545778~8172)) &fk~1623545778~8172) (&fk~1623545778~8172))) (car &x~1623545778~8165) (lambda (&id~1623545778~8197 &formals~1623545778~8198) ((lambda (&x~1623545778~8200 &sk~1623545778~8201 &fk~1623545778~8202) (((lambda (&loop~1623545778~8208) ((lambda (&temp~1623545778~8211) (set! &loop~1623545778~8208 &temp~1623545778~8211) ((lambda () &loop~1623545778~8208))) (lambda (&x~1623545778~8216 &result~1623545778~8217) ((lambda (&match-tail~1623545778~8218) (set! &match-tail~1623545778~8218 (lambda () ((lambda (&x~1623545778~8236 &sk~1623545778~8237 &fk~1623545778~8238) (if (null? &x~1623545778~8236) (&sk~1623545778~8237) (&fk~1623545778~8238))) &x~1623545778~8216 (lambda () (apply &sk~1623545778~8201 (if (null? &result~1623545778~8217) (map (lambda (&ignore~1623545778~8243) (quote ())) (quote (body))) (apply map list (reverse &result~1623545778~8217))))) (lambda () ((lambda (&x~1623545778~8251 &sk~1623545778~8252 &fk~1623545778~8253) (&sk~1623545778~8252)) &x~1623545778~8216 (lambda () (&fk~1623545778~8202)) (lambda () (ex:invalid-form &x~1623545778~8216))))))) (if (null? &x~1623545778~8216) (begin (&match-tail~1623545778~8218)) (if (pair? &x~1623545778~8216) (begin ((lambda (&x~1623545778~8225 &sk~1623545778~8226 &fk~1623545778~8227) (&sk~1623545778~8226 &x~1623545778~8225)) (car &x~1623545778~8216) (lambda &car-vars~1623545778~8229 (&loop~1623545778~8208 (cdr &x~1623545778~8216) (cons &car-vars~1623545778~8229 &result~1623545778~8217))) &match-tail~1623545778~8218)) (begin (&fk~1623545778~8202))))) ex:undefined)))) ex:undefined) &x~1623545778~8200 (quote ()))) (cdr &x~1623545778~8165) (lambda (&body~1623545778~8259) (&sk~1623545778~8166 &id~1623545778~8197 &formals~1623545778~8198 &body~1623545778~8259)) &fk~1623545778~8167)) &fk~1623545778~8167) (&fk~1623545778~8167))) (cdr &x~1623545778~8155) (lambda (&id~1623545778~8261 &formals~1623545778~8262 &body~1623545778~8263) (&sk~1623545778~8156 &id~1623545778~8261 &formals~1623545778~8262 &body~1623545778~8263)) &fk~1623545778~8157)) &fk~1623545778~8157) (&fk~1623545778~8157))) &exp~1623545778~8010 (lambda (&id~1623545778~8265 &formals~1623545778~8266 &body~1623545778~8267) (if &syntax-def?~1623545778~8011 (&invalid-form~1623545778~2470 &exp~1623545778~8010) #f) (values &id~1623545778~8265 (cons (&rename~1623545778~2377 (quote macro) (quote lambda)) (cons &formals~1623545778~8266 &body~1623545778~8267)))) (lambda () (ex:invalid-form &exp~1623545778~8010))))))))) (set! &parse-local-syntax~1623545778~2407 (lambda (&t~1623545778~7809) ((lambda (&x~1623545778~7834 &sk~1623545778~7835 &fk~1623545778~7836) (if (pair? &x~1623545778~7834) ((lambda (&x~1623545778~7839 &sk~1623545778~7840 &fk~1623545778~7841) (&sk~1623545778~7840)) (car &x~1623545778~7834) (lambda () ((lambda (&x~1623545778~7844 &sk~1623545778~7845 &fk~1623545778~7846) (if (pair? &x~1623545778~7844) ((lambda (&x~1623545778~7849 &sk~1623545778~7850 &fk~1623545778~7851) (((lambda (&loop~1623545778~7857) ((lambda (&temp~1623545778~7860) (set! &loop~1623545778~7857 &temp~1623545778~7860) ((lambda () &loop~1623545778~7857))) (lambda (&x~1623545778~7865 &result~1623545778~7866) ((lambda (&match-tail~1623545778~7867) (set! &match-tail~1623545778~7867 (lambda () ((lambda (&x~1623545778~7911 &sk~1623545778~7912 &fk~1623545778~7913) (if (null? &x~1623545778~7911) (&sk~1623545778~7912) (&fk~1623545778~7913))) &x~1623545778~7865 (lambda () (apply &sk~1623545778~7850 (if (null? &result~1623545778~7866) (map (lambda (&ignore~1623545778~7918) (quote ())) (quote (x e))) (apply map list (reverse &result~1623545778~7866))))) (lambda () ((lambda (&x~1623545778~7926 &sk~1623545778~7927 &fk~1623545778~7928) (&sk~1623545778~7927)) &x~1623545778~7865 (lambda () (&fk~1623545778~7851)) (lambda () (ex:invalid-form &x~1623545778~7865))))))) (if (null? &x~1623545778~7865) (begin (&match-tail~1623545778~7867)) (if (pair? &x~1623545778~7865) (begin ((lambda (&x~1623545778~7874 &sk~1623545778~7875 &fk~1623545778~7876) (if (pair? &x~1623545778~7874) ((lambda (&x~1623545778~7879 &sk~1623545778~7880 &fk~1623545778~7881) (&sk~1623545778~7880 &x~1623545778~7879)) (car &x~1623545778~7874) (lambda (&x~1623545778~7883) ((lambda (&x~1623545778~7885 &sk~1623545778~7886 &fk~1623545778~7887) (if (pair? &x~1623545778~7885) ((lambda (&x~1623545778~7890 &sk~1623545778~7891 &fk~1623545778~7892) (&sk~1623545778~7891 &x~1623545778~7890)) (car &x~1623545778~7885) (lambda (&e~1623545778~7894) ((lambda (&x~1623545778~7896 &sk~1623545778~7897 &fk~1623545778~7898) (if (null? &x~1623545778~7896) (&sk~1623545778~7897) (&fk~1623545778~7898))) (cdr &x~1623545778~7885) (lambda () (&sk~1623545778~7886 &e~1623545778~7894)) &fk~1623545778~7887)) &fk~1623545778~7887) (&fk~1623545778~7887))) (cdr &x~1623545778~7874) (lambda (&e~1623545778~7902) (&sk~1623545778~7875 &x~1623545778~7883 &e~1623545778~7902)) &fk~1623545778~7876)) &fk~1623545778~7876) (&fk~1623545778~7876))) (car &x~1623545778~7865) (lambda &car-vars~1623545778~7904 (&loop~1623545778~7857 (cdr &x~1623545778~7865) (cons &car-vars~1623545778~7904 &result~1623545778~7866))) &match-tail~1623545778~7867)) (begin (&fk~1623545778~7851))))) ex:undefined)))) ex:undefined) &x~1623545778~7849 (quote ()))) (car &x~1623545778~7844) (lambda (&x~1623545778~7934 &e~1623545778~7935) ((lambda (&x~1623545778~7937 &sk~1623545778~7938 &fk~1623545778~7939) (((lambda (&loop~1623545778~7945) ((lambda (&temp~1623545778~7948) (set! &loop~1623545778~7945 &temp~1623545778~7948) ((lambda () &loop~1623545778~7945))) (lambda (&x~1623545778~7953 &result~1623545778~7954) ((lambda (&match-tail~1623545778~7955) (set! &match-tail~1623545778~7955 (lambda () ((lambda (&x~1623545778~7973 &sk~1623545778~7974 &fk~1623545778~7975) (if (null? &x~1623545778~7973) (&sk~1623545778~7974) (&fk~1623545778~7975))) &x~1623545778~7953 (lambda () (apply &sk~1623545778~7938 (if (null? &result~1623545778~7954) (map (lambda (&ignore~1623545778~7980) (quote ())) (quote (body))) (apply map list (reverse &result~1623545778~7954))))) (lambda () ((lambda (&x~1623545778~7988 &sk~1623545778~7989 &fk~1623545778~7990) (&sk~1623545778~7989)) &x~1623545778~7953 (lambda () (&fk~1623545778~7939)) (lambda () (ex:invalid-form &x~1623545778~7953))))))) (if (null? &x~1623545778~7953) (begin (&match-tail~1623545778~7955)) (if (pair? &x~1623545778~7953) (begin ((lambda (&x~1623545778~7962 &sk~1623545778~7963 &fk~1623545778~7964) (&sk~1623545778~7963 &x~1623545778~7962)) (car &x~1623545778~7953) (lambda &car-vars~1623545778~7966 (&loop~1623545778~7945 (cdr &x~1623545778~7953) (cons &car-vars~1623545778~7966 &result~1623545778~7954))) &match-tail~1623545778~7955)) (begin (&fk~1623545778~7939))))) ex:undefined)))) ex:undefined) &x~1623545778~7937 (quote ()))) (cdr &x~1623545778~7844) (lambda (&body~1623545778~7996) (&sk~1623545778~7845 &x~1623545778~7934 &e~1623545778~7935 &body~1623545778~7996)) &fk~1623545778~7846)) &fk~1623545778~7846) (&fk~1623545778~7846))) (cdr &x~1623545778~7834) (lambda (&x~1623545778~7998 &e~1623545778~7999 &body~1623545778~8000) (&sk~1623545778~7835 &x~1623545778~7998 &e~1623545778~7999 &body~1623545778~8000)) &fk~1623545778~7836)) &fk~1623545778~7836) (&fk~1623545778~7836))) &t~1623545778~7809 (lambda (&x~1623545778~8002 &e~1623545778~8003 &body~1623545778~8004) (let ((x (&formals?~1623545778~2400 &x~1623545778~8002))) (if x x (&invalid-form~1623545778~2470 &t~1623545778~7809))) (values &x~1623545778~8002 &e~1623545778~8003 &body~1623545778~8004)) (lambda () (ex:invalid-form &t~1623545778~7809))))) (set! &check-expression-sequence~1623545778~2408 (lambda (&body-type~1623545778~7800 &type~1623545778~7801 &form~1623545778~7802) (if (eq? &body-type~1623545778~7800 (quote expression-sequence)) (if (memq &type~1623545778~7801 (quote (import program library define define-syntax))) (&syntax-violation~1623545778~2445 &type~1623545778~7801 "Invalid form in expression sequence" &form~1623545778~7802) #f) #f))) (set! &check-toplevel~1623545778~2409 (lambda (&body-type~1623545778~7791 &type~1623545778~7792 &form~1623545778~7793) (if (not (eq? &body-type~1623545778~7791 (quote toplevel))) (if (memq &type~1623545778~7792 (quote (import program library))) (&syntax-violation~1623545778~2445 &type~1623545778~7792 "Expression may only occur at toplevel" &form~1623545778~7793) #f) #f))) (set! &check-valid-definition~1623545778~2410 (lambda (&id~1623545778~7774 &common-env~1623545778~7775 &body-type~1623545778~7776 &form~1623545778~7777 &forms~1623545778~7778 &type~1623545778~7779) (if (not (eq? &body-type~1623545778~7776 (quote toplevel))) (if (&duplicate?~1623545778~2367 &id~1623545778~7774 &common-env~1623545778~7775) (&syntax-violation~1623545778~2445 &type~1623545778~7779 "Redefinition of identifier in body" &form~1623545778~7777 &id~1623545778~7774) #f) #f) (&check-used~1623545778~2423 &id~1623545778~7774 &body-type~1623545778~7776 &form~1623545778~7777) (if (not (memq &body-type~1623545778~7776 (quote (toplevel program)))) (if (not (null? &forms~1623545778~7778)) (if (not (symbol? (car (car &forms~1623545778~7778)))) (&syntax-violation~1623545778~2445 &type~1623545778~7779 "Definitions may not follow expressions in a body" &form~1623545778~7777) #f) #f) #f))) (set! &check-expression-body~1623545778~2411 (lambda (&body-type~1623545778~7764 &forms~1623545778~7765 &body-forms~1623545778~7766) (if (eq? &body-type~1623545778~7764 (quote lambda)) (if (let ((x (null? &forms~1623545778~7765))) (if x x (symbol? (caar &forms~1623545778~7765)))) (&syntax-violation~1623545778~2445 &body-type~1623545778~7764 "Body must be nonempty and end with an expression" &body-forms~1623545778~7766) #f) #f))) (set! &expand-syntax-case~1623545778~2412 (lambda (&exp~1623545778~7560) ((lambda (&literal?~1623545778~7561) (set! &literal?~1623545778~7561 (lambda (&x~1623545778~7756) (if (&identifier?~1623545778~2336 &x~1623545778~7756) (not (let ((x (&free=?~1623545778~2345 &x~1623545778~7756 (quote _)))) (if x x (&free=?~1623545778~2345 &x~1623545778~7756 (quote ...))))) #f))) ((lambda (&x~1623545778~7584 &sk~1623545778~7585 &fk~1623545778~7586) (if (pair? &x~1623545778~7584) ((lambda (&x~1623545778~7589 &sk~1623545778~7590 &fk~1623545778~7591) (&sk~1623545778~7590)) (car &x~1623545778~7584) (lambda () ((lambda (&x~1623545778~7594 &sk~1623545778~7595 &fk~1623545778~7596) (if (pair? &x~1623545778~7594) ((lambda (&x~1623545778~7599 &sk~1623545778~7600 &fk~1623545778~7601) (&sk~1623545778~7600 &x~1623545778~7599)) (car &x~1623545778~7594) (lambda (&e~1623545778~7603) ((lambda (&x~1623545778~7605 &sk~1623545778~7606 &fk~1623545778~7607) (if (pair? &x~1623545778~7605) ((lambda (&x~1623545778~7610 &sk~1623545778~7611 &fk~1623545778~7612) (((lambda (&loop~1623545778~7618) ((lambda (&temp~1623545778~7621) (set! &loop~1623545778~7618 &temp~1623545778~7621) ((lambda () &loop~1623545778~7618))) (lambda (&x~1623545778~7626 &result~1623545778~7627) ((lambda (&match-tail~1623545778~7628) (set! &match-tail~1623545778~7628 (lambda () ((lambda (&x~1623545778~7651 &sk~1623545778~7652 &fk~1623545778~7653) (if (null? &x~1623545778~7651) (&sk~1623545778~7652) (&fk~1623545778~7653))) &x~1623545778~7626 (lambda () (apply &sk~1623545778~7611 (if (null? &result~1623545778~7627) (map (lambda (&ignore~1623545778~7658) (quote ())) (quote (literals))) (apply map list (reverse &result~1623545778~7627))))) (lambda () ((lambda (&x~1623545778~7666 &sk~1623545778~7667 &fk~1623545778~7668) (&sk~1623545778~7667)) &x~1623545778~7626 (lambda () (&fk~1623545778~7612)) (lambda () (ex:invalid-form &x~1623545778~7626))))))) (if (null? &x~1623545778~7626) (begin (&match-tail~1623545778~7628)) (if (pair? &x~1623545778~7626) (begin ((lambda (&x~1623545778~7635 &sk~1623545778~7636 &fk~1623545778~7637) (if (&literal?~1623545778~7561 &x~1623545778~7635) ((lambda (&x~1623545778~7640 &sk~1623545778~7641 &fk~1623545778~7642) (&sk~1623545778~7641 &x~1623545778~7640)) &x~1623545778~7635 &sk~1623545778~7636 &fk~1623545778~7637) (&fk~1623545778~7637))) (car &x~1623545778~7626) (lambda &car-vars~1623545778~7644 (&loop~1623545778~7618 (cdr &x~1623545778~7626) (cons &car-vars~1623545778~7644 &result~1623545778~7627))) &match-tail~1623545778~7628)) (begin (&fk~1623545778~7612))))) ex:undefined)))) ex:undefined) &x~1623545778~7610 (quote ()))) (car &x~1623545778~7605) (lambda (&literals~1623545778~7674) ((lambda (&x~1623545778~7676 &sk~1623545778~7677 &fk~1623545778~7678) (((lambda (&loop~1623545778~7684) ((lambda (&temp~1623545778~7687) (set! &loop~1623545778~7684 &temp~1623545778~7687) ((lambda () &loop~1623545778~7684))) (lambda (&x~1623545778~7692 &result~1623545778~7693) ((lambda (&match-tail~1623545778~7694) (set! &match-tail~1623545778~7694 (lambda () ((lambda (&x~1623545778~7712 &sk~1623545778~7713 &fk~1623545778~7714) (if (null? &x~1623545778~7712) (&sk~1623545778~7713) (&fk~1623545778~7714))) &x~1623545778~7692 (lambda () (apply &sk~1623545778~7677 (if (null? &result~1623545778~7693) (map (lambda (&ignore~1623545778~7719) (quote ())) (quote (clauses))) (apply map list (reverse &result~1623545778~7693))))) (lambda () ((lambda (&x~1623545778~7727 &sk~1623545778~7728 &fk~1623545778~7729) (&sk~1623545778~7728)) &x~1623545778~7692 (lambda () (&fk~1623545778~7678)) (lambda () (ex:invalid-form &x~1623545778~7692))))))) (if (null? &x~1623545778~7692) (begin (&match-tail~1623545778~7694)) (if (pair? &x~1623545778~7692) (begin ((lambda (&x~1623545778~7701 &sk~1623545778~7702 &fk~1623545778~7703) (&sk~1623545778~7702 &x~1623545778~7701)) (car &x~1623545778~7692) (lambda &car-vars~1623545778~7705 (&loop~1623545778~7684 (cdr &x~1623545778~7692) (cons &car-vars~1623545778~7705 &result~1623545778~7693))) &match-tail~1623545778~7694)) (begin (&fk~1623545778~7678))))) ex:undefined)))) ex:undefined) &x~1623545778~7676 (quote ()))) (cdr &x~1623545778~7605) (lambda (&clauses~1623545778~7735) (&sk~1623545778~7606 &literals~1623545778~7674 &clauses~1623545778~7735)) &fk~1623545778~7607)) &fk~1623545778~7607) (&fk~1623545778~7607))) (cdr &x~1623545778~7594) (lambda (&literals~1623545778~7737 &clauses~1623545778~7738) (&sk~1623545778~7595 &e~1623545778~7603 &literals~1623545778~7737 &clauses~1623545778~7738)) &fk~1623545778~7596)) &fk~1623545778~7596) (&fk~1623545778~7596))) (cdr &x~1623545778~7584) (lambda (&e~1623545778~7740 &literals~1623545778~7741 &clauses~1623545778~7742) (&sk~1623545778~7585 &e~1623545778~7740 &literals~1623545778~7741 &clauses~1623545778~7742)) &fk~1623545778~7586)) &fk~1623545778~7586) (&fk~1623545778~7586))) &exp~1623545778~7560 (lambda (&e~1623545778~7744 &literals~1623545778~7745 &clauses~1623545778~7746) ((lambda (&input~1623545778~7749) (list (quote let) (list (list &input~1623545778~7749 (&expand~1623545778~2388 &e~1623545778~7744))) (&process-clauses~1623545778~2413 &clauses~1623545778~7746 &input~1623545778~7749 &literals~1623545778~7745))) (&generate-guid~1623545778~2346 (quote input)))) (lambda () (ex:invalid-form &exp~1623545778~7560)))) ex:undefined))) (set! &process-clauses~1623545778~2413 (lambda (&clauses~1623545778~6705 &input~1623545778~6706 &literals~1623545778~6707) ((lambda (&process-clause~1623545778~6711 &pattern-vars~1623545778~6710 &process-match~1623545778~6709 &literal?~1623545778~6708) (set! &literal?~1623545778~6708 (lambda (&pattern~1623545778~7554) (if (&identifier?~1623545778~2336 &pattern~1623545778~7554) (memp (lambda (&x~1623545778~7558) (&bound-identifier=?~1623545778~2343 &x~1623545778~7558 &pattern~1623545778~7554)) &literals~1623545778~6707) #f))) (set! &process-match~1623545778~6709 (lambda (&input~1623545778~7180 &pattern~1623545778~7181 &sk~1623545778~7182 &fk~1623545778~7183) (if (not (symbol? &input~1623545778~7180)) ((lambda (&temp~1623545778~7187) (list (quote let) (list (list &temp~1623545778~7187 &input~1623545778~7180)) (&process-match~1623545778~6709 &temp~1623545778~7187 &pattern~1623545778~7181 &sk~1623545778~7182 &fk~1623545778~7183))) (&generate-guid~1623545778~2346 (quote temp))) ((lambda (&x~1623545778~7195 &sk~1623545778~7196 &fk~1623545778~7197) (if (ex:free=? &x~1623545778~7195 (quote _)) (&sk~1623545778~7196) (&fk~1623545778~7197))) &pattern~1623545778~7181 (lambda () &sk~1623545778~7182) (lambda () ((lambda (&x~1623545778~7206 &sk~1623545778~7207 &fk~1623545778~7208) (if (ex:free=? &x~1623545778~7206 (quote ...)) (&sk~1623545778~7207) (&fk~1623545778~7208))) &pattern~1623545778~7181 (lambda () (&syntax-violation~1623545778~2445 (quote syntax-case) "Invalid use of ellipses" &pattern~1623545778~7181)) (lambda () ((lambda (&x~1623545778~7218 &sk~1623545778~7219 &fk~1623545778~7220) (if (null? &x~1623545778~7218) (&sk~1623545778~7219) (&fk~1623545778~7220))) &pattern~1623545778~7181 (lambda () (list (quote if) (list (quote null?) &input~1623545778~7180) &sk~1623545778~7182 &fk~1623545778~7183)) (lambda () ((lambda (&x~1623545778~7233 &sk~1623545778~7234 &fk~1623545778~7235) (if (&literal?~1623545778~6708 &x~1623545778~7233) ((lambda (&x~1623545778~7238 &sk~1623545778~7239 &fk~1623545778~7240) (&sk~1623545778~7239 &x~1623545778~7238)) &x~1623545778~7233 &sk~1623545778~7234 &fk~1623545778~7235) (&fk~1623545778~7235))) &pattern~1623545778~7181 (lambda (&id~1623545778~7242) (list (quote if) (list (quote and) (list (quote ex:identifier?) &input~1623545778~7180) (list (quote ex:free-identifier=?) &input~1623545778~7180 (&syntax-reflect~1623545778~2372 &id~1623545778~7242))) &sk~1623545778~7182 &fk~1623545778~7183)) (lambda () ((lambda (&x~1623545778~7255 &sk~1623545778~7256 &fk~1623545778~7257) (if (&identifier?~1623545778~2336 &x~1623545778~7255) ((lambda (&x~1623545778~7260 &sk~1623545778~7261 &fk~1623545778~7262) (&sk~1623545778~7261 &x~1623545778~7260)) &x~1623545778~7255 &sk~1623545778~7256 &fk~1623545778~7257) (&fk~1623545778~7257))) &pattern~1623545778~7181 (lambda (&id~1623545778~7264) (list (quote let) (list (list (&binding-name~1623545778~2351 (&binding~1623545778~2357 &id~1623545778~7264)) &input~1623545778~7180)) &sk~1623545778~7182)) (lambda () ((lambda (&x~1623545778~7280 &sk~1623545778~7281 &fk~1623545778~7282) (if (pair? &x~1623545778~7280) ((lambda (&x~1623545778~7285 &sk~1623545778~7286 &fk~1623545778~7287) (&sk~1623545778~7286 &x~1623545778~7285)) (car &x~1623545778~7280) (lambda (&p~1623545778~7289) ((lambda (&x~1623545778~7291 &sk~1623545778~7292 &fk~1623545778~7293) (if (pair? &x~1623545778~7291) ((lambda (&x~1623545778~7296 &sk~1623545778~7297 &fk~1623545778~7298) (if (ex:free=? &x~1623545778~7296 (quote ...)) (&sk~1623545778~7297) (&fk~1623545778~7298))) (car &x~1623545778~7291) (lambda () ((lambda (&x~1623545778~7303 &sk~1623545778~7304 &fk~1623545778~7305) (if (null? &x~1623545778~7303) (&sk~1623545778~7304) (&fk~1623545778~7305))) (cdr &x~1623545778~7291) (lambda () (&sk~1623545778~7292)) &fk~1623545778~7293)) &fk~1623545778~7293) (&fk~1623545778~7293))) (cdr &x~1623545778~7280) (lambda () (&sk~1623545778~7281 &p~1623545778~7289)) &fk~1623545778~7282)) &fk~1623545778~7282) (&fk~1623545778~7282))) &pattern~1623545778~7181 (lambda (&p~1623545778~7310) ((lambda (&mapped-pvars~1623545778~7313) (if (if (&identifier?~1623545778~2336 &p~1623545778~7310) (= (length &mapped-pvars~1623545778~7313) 1) #f) (list (quote if) (list (quote list?) &input~1623545778~7180) (list (quote let) (list (list (car &mapped-pvars~1623545778~7313) &input~1623545778~7180)) &sk~1623545778~7182) &fk~1623545778~7183) ((lambda (&columns~1623545778~7323 &rest~1623545778~7324) (list (quote ex:map-while) (list (quote lambda) (list &input~1623545778~7180) (&process-match~1623545778~6709 &input~1623545778~7180 &p~1623545778~7310 (cons (quote list) &mapped-pvars~1623545778~7313) #f)) &input~1623545778~7180 (list (quote lambda) (list &columns~1623545778~7323 &rest~1623545778~7324) (list (quote if) (list (quote null?) &rest~1623545778~7324) (list (quote apply) (list (quote lambda) &mapped-pvars~1623545778~7313 &sk~1623545778~7182) (list (quote if) (list (quote null?) &columns~1623545778~7323) (list (quote quote) (map (lambda (&ignore~1623545778~7339) (quote ())) &mapped-pvars~1623545778~7313)) (list (quote apply) (quote map) (quote list) &columns~1623545778~7323))) &fk~1623545778~7183)))) (&generate-guid~1623545778~2346 (quote cols)) (&generate-guid~1623545778~2346 (quote rest))))) (map (lambda (&pvar~1623545778~7347) (&binding-name~1623545778~2351 (&binding~1623545778~2357 &pvar~1623545778~7347))) (map car (&pattern-vars~1623545778~6710 &p~1623545778~7310 0))))) (lambda () ((lambda (&x~1623545778~7361 &sk~1623545778~7362 &fk~1623545778~7363) (if (pair? &x~1623545778~7361) ((lambda (&x~1623545778~7366 &sk~1623545778~7367 &fk~1623545778~7368) (&sk~1623545778~7367 &x~1623545778~7366)) (car &x~1623545778~7361) (lambda (&p~1623545778~7370) ((lambda (&x~1623545778~7372 &sk~1623545778~7373 &fk~1623545778~7374) (if (pair? &x~1623545778~7372) ((lambda (&x~1623545778~7377 &sk~1623545778~7378 &fk~1623545778~7379) (if (ex:free=? &x~1623545778~7377 (quote ...)) (&sk~1623545778~7378) (&fk~1623545778~7379))) (car &x~1623545778~7372) (lambda () ((lambda (&x~1623545778~7384 &sk~1623545778~7385 &fk~1623545778~7386) (&sk~1623545778~7385 &x~1623545778~7384)) (cdr &x~1623545778~7372) (lambda (&tail~1623545778~7388) (&sk~1623545778~7373 &tail~1623545778~7388)) &fk~1623545778~7374)) &fk~1623545778~7374) (&fk~1623545778~7374))) (cdr &x~1623545778~7361) (lambda (&tail~1623545778~7390) (&sk~1623545778~7362 &p~1623545778~7370 &tail~1623545778~7390)) &fk~1623545778~7363)) &fk~1623545778~7363) (&fk~1623545778~7363))) &pattern~1623545778~7181 (lambda (&p~1623545778~7392 &tail~1623545778~7393) ((lambda (&tail-length~1623545778~7396) (list (quote if) (list (quote >=) (list (quote ex:dotted-length) &input~1623545778~7180) &tail-length~1623545778~7396) (&process-match~1623545778~6709 (list (quote ex:dotted-butlast) &input~1623545778~7180 &tail-length~1623545778~7396) (list &p~1623545778~7392 (cadr &pattern~1623545778~7181)) (&process-match~1623545778~6709 (list (quote ex:dotted-last) &input~1623545778~7180 &tail-length~1623545778~7396) &tail~1623545778~7393 &sk~1623545778~7182 &fk~1623545778~7183) &fk~1623545778~7183) &fk~1623545778~7183)) (&dotted-length~1623545778~2460 &tail~1623545778~7393))) (lambda () ((lambda (&x~1623545778~7415 &sk~1623545778~7416 &fk~1623545778~7417) (if (pair? &x~1623545778~7415) ((lambda (&x~1623545778~7420 &sk~1623545778~7421 &fk~1623545778~7422) (&sk~1623545778~7421 &x~1623545778~7420)) (car &x~1623545778~7415) (lambda (&p1~1623545778~7424) ((lambda (&x~1623545778~7426 &sk~1623545778~7427 &fk~1623545778~7428) (&sk~1623545778~7427 &x~1623545778~7426)) (cdr &x~1623545778~7415) (lambda (&p2~1623545778~7430) (&sk~1623545778~7416 &p1~1623545778~7424 &p2~1623545778~7430)) &fk~1623545778~7417)) &fk~1623545778~7417) (&fk~1623545778~7417))) &pattern~1623545778~7181 (lambda (&p1~1623545778~7432 &p2~1623545778~7433) (list (quote if) (list (quote pair?) &input~1623545778~7180) (&process-match~1623545778~6709 (list (quote car) &input~1623545778~7180) &p1~1623545778~7432 (&process-match~1623545778~6709 (list (quote cdr) &input~1623545778~7180) &p2~1623545778~7433 &sk~1623545778~7182 &fk~1623545778~7183) &fk~1623545778~7183) &fk~1623545778~7183)) (lambda () ((lambda (&x~1623545778~7450 &sk~1623545778~7451 &fk~1623545778~7452) (if (vector? &x~1623545778~7450) ((lambda (&x~1623545778~7455 &sk~1623545778~7456 &fk~1623545778~7457) (((lambda (&loop~1623545778~7463) ((lambda (&temp~1623545778~7466) (set! &loop~1623545778~7463 &temp~1623545778~7466) ((lambda () &loop~1623545778~7463))) (lambda (&x~1623545778~7471 &result~1623545778~7472) ((lambda (&match-tail~1623545778~7473) (set! &match-tail~1623545778~7473 (lambda () ((lambda (&x~1623545778~7491 &sk~1623545778~7492 &fk~1623545778~7493) (if (null? &x~1623545778~7491) (&sk~1623545778~7492) (&fk~1623545778~7493))) &x~1623545778~7471 (lambda () (apply &sk~1623545778~7456 (if (null? &result~1623545778~7472) (map (lambda (&ignore~1623545778~7498) (quote ())) (quote (ps))) (apply map list (reverse &result~1623545778~7472))))) (lambda () ((lambda (&x~1623545778~7506 &sk~1623545778~7507 &fk~1623545778~7508) (&sk~1623545778~7507)) &x~1623545778~7471 (lambda () (&fk~1623545778~7457)) (lambda () (ex:invalid-form &x~1623545778~7471))))))) (if (null? &x~1623545778~7471) (begin (&match-tail~1623545778~7473)) (if (pair? &x~1623545778~7471) (begin ((lambda (&x~1623545778~7480 &sk~1623545778~7481 &fk~1623545778~7482) (&sk~1623545778~7481 &x~1623545778~7480)) (car &x~1623545778~7471) (lambda &car-vars~1623545778~7484 (&loop~1623545778~7463 (cdr &x~1623545778~7471) (cons &car-vars~1623545778~7484 &result~1623545778~7472))) &match-tail~1623545778~7473)) (begin (&fk~1623545778~7457))))) ex:undefined)))) ex:undefined) &x~1623545778~7455 (quote ()))) (vector->list &x~1623545778~7450) &sk~1623545778~7451 &fk~1623545778~7452) (&fk~1623545778~7452))) &pattern~1623545778~7181 (lambda (&ps~1623545778~7514) (list (quote if) (list (quote vector?) &input~1623545778~7180) (&process-match~1623545778~6709 (list (quote vector->list) &input~1623545778~7180) &ps~1623545778~7514 &sk~1623545778~7182 &fk~1623545778~7183) &fk~1623545778~7183)) (lambda () ((lambda (&x~1623545778~7527 &sk~1623545778~7528 &fk~1623545778~7529) (if (symbol? &x~1623545778~7527) ((lambda (&x~1623545778~7532 &sk~1623545778~7533 &fk~1623545778~7534) (&sk~1623545778~7533)) &x~1623545778~7527 &sk~1623545778~7528 &fk~1623545778~7529) (&fk~1623545778~7529))) &pattern~1623545778~7181 (lambda () (&syntax-violation~1623545778~2445 (quote syntax-case) "Symbol object may not appear in pattern" &pattern~1623545778~7181)) (lambda () ((lambda (&x~1623545778~7542 &sk~1623545778~7543 &fk~1623545778~7544) (&sk~1623545778~7543 &x~1623545778~7542)) &pattern~1623545778~7181 (lambda (&other~1623545778~7546) (list (quote if) (list (quote equal?) &input~1623545778~7180 (list (quote quote) &other~1623545778~7546)) &sk~1623545778~7182 &fk~1623545778~7183)) (lambda () (ex:invalid-form &pattern~1623545778~7181)))))))))))))))))))))))))) (set! &pattern-vars~1623545778~6710 (lambda (&pattern~1623545778~6960 &level~1623545778~6961) ((lambda (&x~1623545778~6974 &sk~1623545778~6975 &fk~1623545778~6976) (if (pair? &x~1623545778~6974) ((lambda (&x~1623545778~6979 &sk~1623545778~6980 &fk~1623545778~6981) (&sk~1623545778~6980 &x~1623545778~6979)) (car &x~1623545778~6974) (lambda (&p~1623545778~6983) ((lambda (&x~1623545778~6985 &sk~1623545778~6986 &fk~1623545778~6987) (if (pair? &x~1623545778~6985) ((lambda (&x~1623545778~6990 &sk~1623545778~6991 &fk~1623545778~6992) (if (ex:free=? &x~1623545778~6990 (quote ...)) (&sk~1623545778~6991) (&fk~1623545778~6992))) (car &x~1623545778~6985) (lambda () ((lambda (&x~1623545778~6997 &sk~1623545778~6998 &fk~1623545778~6999) (&sk~1623545778~6998 &x~1623545778~6997)) (cdr &x~1623545778~6985) (lambda (&tail~1623545778~7001) (&sk~1623545778~6986 &tail~1623545778~7001)) &fk~1623545778~6987)) &fk~1623545778~6987) (&fk~1623545778~6987))) (cdr &x~1623545778~6974) (lambda (&tail~1623545778~7003) (&sk~1623545778~6975 &p~1623545778~6983 &tail~1623545778~7003)) &fk~1623545778~6976)) &fk~1623545778~6976) (&fk~1623545778~6976))) &pattern~1623545778~6960 (lambda (&p~1623545778~7005 &tail~1623545778~7006) (append (&pattern-vars~1623545778~6710 &p~1623545778~7005 (+ &level~1623545778~6961 1)) (&pattern-vars~1623545778~6710 &tail~1623545778~7006 &level~1623545778~6961))) (lambda () ((lambda (&x~1623545778~7016 &sk~1623545778~7017 &fk~1623545778~7018) (if (pair? &x~1623545778~7016) ((lambda (&x~1623545778~7021 &sk~1623545778~7022 &fk~1623545778~7023) (&sk~1623545778~7022 &x~1623545778~7021)) (car &x~1623545778~7016) (lambda (&p1~1623545778~7025) ((lambda (&x~1623545778~7027 &sk~1623545778~7028 &fk~1623545778~7029) (&sk~1623545778~7028 &x~1623545778~7027)) (cdr &x~1623545778~7016) (lambda (&p2~1623545778~7031) (&sk~1623545778~7017 &p1~1623545778~7025 &p2~1623545778~7031)) &fk~1623545778~7018)) &fk~1623545778~7018) (&fk~1623545778~7018))) &pattern~1623545778~6960 (lambda (&p1~1623545778~7033 &p2~1623545778~7034) (append (&pattern-vars~1623545778~6710 &p1~1623545778~7033 &level~1623545778~6961) (&pattern-vars~1623545778~6710 &p2~1623545778~7034 &level~1623545778~6961))) (lambda () ((lambda (&x~1623545778~7044 &sk~1623545778~7045 &fk~1623545778~7046) (if (vector? &x~1623545778~7044) ((lambda (&x~1623545778~7049 &sk~1623545778~7050 &fk~1623545778~7051) (((lambda (&loop~1623545778~7057) ((lambda (&temp~1623545778~7060) (set! &loop~1623545778~7057 &temp~1623545778~7060) ((lambda () &loop~1623545778~7057))) (lambda (&x~1623545778~7065 &result~1623545778~7066) ((lambda (&match-tail~1623545778~7067) (set! &match-tail~1623545778~7067 (lambda () ((lambda (&x~1623545778~7085 &sk~1623545778~7086 &fk~1623545778~7087) (if (null? &x~1623545778~7085) (&sk~1623545778~7086) (&fk~1623545778~7087))) &x~1623545778~7065 (lambda () (apply &sk~1623545778~7050 (if (null? &result~1623545778~7066) (map (lambda (&ignore~1623545778~7092) (quote ())) (quote (ps))) (apply map list (reverse &result~1623545778~7066))))) (lambda () ((lambda (&x~1623545778~7100 &sk~1623545778~7101 &fk~1623545778~7102) (&sk~1623545778~7101)) &x~1623545778~7065 (lambda () (&fk~1623545778~7051)) (lambda () (ex:invalid-form &x~1623545778~7065))))))) (if (null? &x~1623545778~7065) (begin (&match-tail~1623545778~7067)) (if (pair? &x~1623545778~7065) (begin ((lambda (&x~1623545778~7074 &sk~1623545778~7075 &fk~1623545778~7076) (&sk~1623545778~7075 &x~1623545778~7074)) (car &x~1623545778~7065) (lambda &car-vars~1623545778~7078 (&loop~1623545778~7057 (cdr &x~1623545778~7065) (cons &car-vars~1623545778~7078 &result~1623545778~7066))) &match-tail~1623545778~7067)) (begin (&fk~1623545778~7051))))) ex:undefined)))) ex:undefined) &x~1623545778~7049 (quote ()))) (vector->list &x~1623545778~7044) &sk~1623545778~7045 &fk~1623545778~7046) (&fk~1623545778~7046))) &pattern~1623545778~6960 (lambda (&ps~1623545778~7108) (&pattern-vars~1623545778~6710 &ps~1623545778~7108 &level~1623545778~6961)) (lambda () ((lambda (&x~1623545778~7114 &sk~1623545778~7115 &fk~1623545778~7116) (if (ex:free=? &x~1623545778~7114 (quote ...)) (&sk~1623545778~7115) (&fk~1623545778~7116))) &pattern~1623545778~6960 (lambda () (quote ())) (lambda () ((lambda (&x~1623545778~7126 &sk~1623545778~7127 &fk~1623545778~7128) (if (ex:free=? &x~1623545778~7126 (quote _)) (&sk~1623545778~7127) (&fk~1623545778~7128))) &pattern~1623545778~6960 (lambda () (quote ())) (lambda () ((lambda (&x~1623545778~7140 &sk~1623545778~7141 &fk~1623545778~7142) (if (&literal?~1623545778~6708 &x~1623545778~7140) ((lambda (&x~1623545778~7145 &sk~1623545778~7146 &fk~1623545778~7147) (&sk~1623545778~7146)) &x~1623545778~7140 &sk~1623545778~7141 &fk~1623545778~7142) (&fk~1623545778~7142))) &pattern~1623545778~6960 (lambda () (quote ())) (lambda () ((lambda (&x~1623545778~7157 &sk~1623545778~7158 &fk~1623545778~7159) (if (&identifier?~1623545778~2336 &x~1623545778~7157) ((lambda (&x~1623545778~7162 &sk~1623545778~7163 &fk~1623545778~7164) (&sk~1623545778~7163 &x~1623545778~7162)) &x~1623545778~7157 &sk~1623545778~7158 &fk~1623545778~7159) (&fk~1623545778~7159))) &pattern~1623545778~6960 (lambda (&id~1623545778~7166) (list (cons &id~1623545778~7166 &level~1623545778~6961))) (lambda () ((lambda (&x~1623545778~7172 &sk~1623545778~7173 &fk~1623545778~7174) (&sk~1623545778~7173)) &pattern~1623545778~6960 (lambda () (quote ())) (lambda () (ex:invalid-form &pattern~1623545778~6960))))))))))))))))))) (set! &process-clause~1623545778~6711 (lambda (&clause~1623545778~6820 &input~1623545778~6821 &fk~1623545778~6822) ((lambda (&x~1623545778~6831 &sk~1623545778~6832 &fk~1623545778~6833) (if (pair? &x~1623545778~6831) ((lambda (&x~1623545778~6836 &sk~1623545778~6837 &fk~1623545778~6838) (&sk~1623545778~6837 &x~1623545778~6836)) (car &x~1623545778~6831) (lambda (&pattern~1623545778~6840) ((lambda (&x~1623545778~6842 &sk~1623545778~6843 &fk~1623545778~6844) (&sk~1623545778~6843 &x~1623545778~6842)) (cdr &x~1623545778~6831) (lambda (&rest~1623545778~6846) (&sk~1623545778~6832 &pattern~1623545778~6840 &rest~1623545778~6846)) &fk~1623545778~6833)) &fk~1623545778~6833) (&fk~1623545778~6833))) &clause~1623545778~6820 (lambda (&pattern~1623545778~6848 &rest~1623545778~6849) ((lambda (&pvars~1623545778~6852) (&check-set?~1623545778~2464 (map car &pvars~1623545778~6852) &bound-identifier=?~1623545778~2343 (lambda (&dup~1623545778~6955) (&syntax-violation~1623545778~2445 (quote syntax-case) "Repeated pattern variable" &clause~1623545778~6820 &dup~1623545778~6955))) ((lambda (&mappings~1623545778~6855) ((lambda (&saved~1623545778~6859) (set! &*usage-env*~1623545778~2305 (&env-extend~1623545778~2364 &mappings~1623545778~6855 &*usage-env*~1623545778~2305)) (call-with-values (lambda () (&process-match~1623545778~6709 &input~1623545778~6821 &pattern~1623545778~6848 ((lambda (&x~1623545778~6870 &sk~1623545778~6871 &fk~1623545778~6872) (if (pair? &x~1623545778~6870) ((lambda (&x~1623545778~6875 &sk~1623545778~6876 &fk~1623545778~6877) (&sk~1623545778~6876 &x~1623545778~6875)) (car &x~1623545778~6870) (lambda (&template~1623545778~6879) ((lambda (&x~1623545778~6881 &sk~1623545778~6882 &fk~1623545778~6883) (if (null? &x~1623545778~6881) (&sk~1623545778~6882) (&fk~1623545778~6883))) (cdr &x~1623545778~6870) (lambda () (&sk~1623545778~6871 &template~1623545778~6879)) &fk~1623545778~6872)) &fk~1623545778~6872) (&fk~1623545778~6872))) &rest~1623545778~6849 (lambda (&template~1623545778~6887) (&expand~1623545778~2388 &template~1623545778~6887)) (lambda () ((lambda (&x~1623545778~6901 &sk~1623545778~6902 &fk~1623545778~6903) (if (pair? &x~1623545778~6901) ((lambda (&x~1623545778~6906 &sk~1623545778~6907 &fk~1623545778~6908) (&sk~1623545778~6907 &x~1623545778~6906)) (car &x~1623545778~6901) (lambda (&fender~1623545778~6910) ((lambda (&x~1623545778~6912 &sk~1623545778~6913 &fk~1623545778~6914) (if (pair? &x~1623545778~6912) ((lambda (&x~1623545778~6917 &sk~1623545778~6918 &fk~1623545778~6919) (&sk~1623545778~6918 &x~1623545778~6917)) (car &x~1623545778~6912) (lambda (&template~1623545778~6921) ((lambda (&x~1623545778~6923 &sk~1623545778~6924 &fk~1623545778~6925) (if (null? &x~1623545778~6923) (&sk~1623545778~6924) (&fk~1623545778~6925))) (cdr &x~1623545778~6912) (lambda () (&sk~1623545778~6913 &template~1623545778~6921)) &fk~1623545778~6914)) &fk~1623545778~6914) (&fk~1623545778~6914))) (cdr &x~1623545778~6901) (lambda (&template~1623545778~6929) (&sk~1623545778~6902 &fender~1623545778~6910 &template~1623545778~6929)) &fk~1623545778~6903)) &fk~1623545778~6903) (&fk~1623545778~6903))) &rest~1623545778~6849 (lambda (&fender~1623545778~6931 &template~1623545778~6932) (list (quote if) (&expand~1623545778~2388 &fender~1623545778~6931) (&expand~1623545778~2388 &template~1623545778~6932) &fk~1623545778~6822)) (lambda () ((lambda (&x~1623545778~6940 &sk~1623545778~6941 &fk~1623545778~6942) (&sk~1623545778~6941)) &rest~1623545778~6849 (lambda () (&syntax-violation~1623545778~2445 (quote syntax-case) "Invalid clause" &clause~1623545778~6820)) (lambda () (ex:invalid-form &rest~1623545778~6849))))))) &fk~1623545778~6822)) (lambda &results~1623545778~6948 (set! &*usage-env*~1623545778~2305 &saved~1623545778~6859) (apply values &results~1623545778~6948)))) &*usage-env*~1623545778~2305)) (map (lambda (&pvar~1623545778~6952) (&make-local-mapping~1623545778~2358 (quote pattern-variable) (car &pvar~1623545778~6952) (cdr &pvar~1623545778~6952))) &pvars~1623545778~6852))) (&pattern-vars~1623545778~6710 &pattern~1623545778~6848 0))) (lambda () (ex:invalid-form &clause~1623545778~6820))))) ((lambda (&x~1623545778~6716 &sk~1623545778~6717 &fk~1623545778~6718) (if (null? &x~1623545778~6716) (&sk~1623545778~6717) (&fk~1623545778~6718))) &clauses~1623545778~6705 (lambda () (list (quote ex:invalid-form) &input~1623545778~6706)) (lambda () ((lambda (&x~1623545778~6734 &sk~1623545778~6735 &fk~1623545778~6736) (if (pair? &x~1623545778~6734) ((lambda (&x~1623545778~6739 &sk~1623545778~6740 &fk~1623545778~6741) (&sk~1623545778~6740 &x~1623545778~6739)) (car &x~1623545778~6734) (lambda (&clause~1623545778~6743) ((lambda (&x~1623545778~6745 &sk~1623545778~6746 &fk~1623545778~6747) (((lambda (&loop~1623545778~6753) ((lambda (&temp~1623545778~6756) (set! &loop~1623545778~6753 &temp~1623545778~6756) ((lambda () &loop~1623545778~6753))) (lambda (&x~1623545778~6761 &result~1623545778~6762) ((lambda (&match-tail~1623545778~6763) (set! &match-tail~1623545778~6763 (lambda () ((lambda (&x~1623545778~6781 &sk~1623545778~6782 &fk~1623545778~6783) (if (null? &x~1623545778~6781) (&sk~1623545778~6782) (&fk~1623545778~6783))) &x~1623545778~6761 (lambda () (apply &sk~1623545778~6746 (if (null? &result~1623545778~6762) (map (lambda (&ignore~1623545778~6788) (quote ())) (quote (clauses))) (apply map list (reverse &result~1623545778~6762))))) (lambda () ((lambda (&x~1623545778~6796 &sk~1623545778~6797 &fk~1623545778~6798) (&sk~1623545778~6797)) &x~1623545778~6761 (lambda () (&fk~1623545778~6747)) (lambda () (ex:invalid-form &x~1623545778~6761))))))) (if (null? &x~1623545778~6761) (begin (&match-tail~1623545778~6763)) (if (pair? &x~1623545778~6761) (begin ((lambda (&x~1623545778~6770 &sk~1623545778~6771 &fk~1623545778~6772) (&sk~1623545778~6771 &x~1623545778~6770)) (car &x~1623545778~6761) (lambda &car-vars~1623545778~6774 (&loop~1623545778~6753 (cdr &x~1623545778~6761) (cons &car-vars~1623545778~6774 &result~1623545778~6762))) &match-tail~1623545778~6763)) (begin (&fk~1623545778~6747))))) ex:undefined)))) ex:undefined) &x~1623545778~6745 (quote ()))) (cdr &x~1623545778~6734) (lambda (&clauses~1623545778~6804) (&sk~1623545778~6735 &clause~1623545778~6743 &clauses~1623545778~6804)) &fk~1623545778~6736)) &fk~1623545778~6736) (&fk~1623545778~6736))) &clauses~1623545778~6705 (lambda (&clause~1623545778~6806 &clauses~1623545778~6807) ((lambda (&fail~1623545778~6810) (list (quote let) (list (list &fail~1623545778~6810 (list (quote lambda) (quote ()) (&process-clauses~1623545778~2413 &clauses~1623545778~6807 &input~1623545778~6706 &literals~1623545778~6707)))) (&process-clause~1623545778~6711 &clause~1623545778~6806 &input~1623545778~6706 (list &fail~1623545778~6810)))) (&generate-guid~1623545778~2346 (quote fail)))) (lambda () (ex:invalid-form &clauses~1623545778~6705)))))) ex:undefined ex:undefined ex:undefined ex:undefined))) (set! &expand-syntax~1623545778~2414 (lambda (&form~1623545778~6659) ((lambda (&x~1623545778~6672 &sk~1623545778~6673 &fk~1623545778~6674) (if (pair? &x~1623545778~6672) ((lambda (&x~1623545778~6677 &sk~1623545778~6678 &fk~1623545778~6679) (&sk~1623545778~6678)) (car &x~1623545778~6672) (lambda () ((lambda (&x~1623545778~6682 &sk~1623545778~6683 &fk~1623545778~6684) (if (pair? &x~1623545778~6682) ((lambda (&x~1623545778~6687 &sk~1623545778~6688 &fk~1623545778~6689) (&sk~1623545778~6688 &x~1623545778~6687)) (car &x~1623545778~6682) (lambda (&template~1623545778~6691) ((lambda (&x~1623545778~6693 &sk~1623545778~6694 &fk~1623545778~6695) (if (null? &x~1623545778~6693) (&sk~1623545778~6694) (&fk~1623545778~6695))) (cdr &x~1623545778~6682) (lambda () (&sk~1623545778~6683 &template~1623545778~6691)) &fk~1623545778~6684)) &fk~1623545778~6684) (&fk~1623545778~6684))) (cdr &x~1623545778~6672) (lambda (&template~1623545778~6699) (&sk~1623545778~6673 &template~1623545778~6699)) &fk~1623545778~6674)) &fk~1623545778~6674) (&fk~1623545778~6674))) &form~1623545778~6659 (lambda (&template~1623545778~6701) (&process-template~1623545778~2415 &template~1623545778~6701 0 #f)) (lambda () (ex:invalid-form &form~1623545778~6659))))) (set! &process-template~1623545778~2415 (lambda (&template~1623545778~6336 &dim~1623545778~6337 &ellipses-quoted?~1623545778~6338) ((lambda (&x~1623545778~6343 &sk~1623545778~6344 &fk~1623545778~6345) (if (ex:free=? &x~1623545778~6343 (quote ...)) (&sk~1623545778~6344) (&fk~1623545778~6345))) &template~1623545778~6336 (lambda () (if (not &ellipses-quoted?~1623545778~6338) (&syntax-violation~1623545778~2445 (quote syntax) "Invalid occurrence of ellipses in syntax template" &template~1623545778~6336)) (&syntax-reflect~1623545778~2372 &template~1623545778~6336)) (lambda () ((lambda (&x~1623545778~6358 &sk~1623545778~6359 &fk~1623545778~6360) (if (&identifier?~1623545778~2336 &x~1623545778~6358) ((lambda (&x~1623545778~6363 &sk~1623545778~6364 &fk~1623545778~6365) (&sk~1623545778~6364 &x~1623545778~6363)) &x~1623545778~6358 &sk~1623545778~6359 &fk~1623545778~6360) (&fk~1623545778~6360))) &template~1623545778~6336 (lambda (&id~1623545778~6367) ((lambda (&binding~1623545778~6370) ((lambda (&t~1623545778~6374) (if &t~1623545778~6374 ((lambda (&pdim~1623545778~6377) (if (<= &pdim~1623545778~6377 &dim~1623545778~6337) (begin (&check-binding-level~1623545778~2361 &id~1623545778~6367 &binding~1623545778~6370) (&register-use!~1623545778~2421 &id~1623545778~6367 &binding~1623545778~6370) (&binding-name~1623545778~2351 &binding~1623545778~6370)) (&syntax-violation~1623545778~2445 (quote syntax) "Template dimension error (too few ...'s?)" &id~1623545778~6367))) &t~1623545778~6374) (begin (&syntax-reflect~1623545778~2372 &id~1623545778~6367)))) (if &binding~1623545778~6370 (if (eq? (&binding-type~1623545778~2350 &binding~1623545778~6370) (quote pattern-variable)) (&binding-dimension~1623545778~2354 &binding~1623545778~6370) #f) #f))) (&binding~1623545778~2357 &id~1623545778~6367))) (lambda () ((lambda (&x~1623545778~6399 &sk~1623545778~6400 &fk~1623545778~6401) (if (pair? &x~1623545778~6399) ((lambda (&x~1623545778~6404 &sk~1623545778~6405 &fk~1623545778~6406) (if (ex:free=? &x~1623545778~6404 (quote ...)) (&sk~1623545778~6405) (&fk~1623545778~6406))) (car &x~1623545778~6399) (lambda () ((lambda (&x~1623545778~6411 &sk~1623545778~6412 &fk~1623545778~6413) (if (pair? &x~1623545778~6411) ((lambda (&x~1623545778~6416 &sk~1623545778~6417 &fk~1623545778~6418) (&sk~1623545778~6417 &x~1623545778~6416)) (car &x~1623545778~6411) (lambda (&p~1623545778~6420) ((lambda (&x~1623545778~6422 &sk~1623545778~6423 &fk~1623545778~6424) (if (null? &x~1623545778~6422) (&sk~1623545778~6423) (&fk~1623545778~6424))) (cdr &x~1623545778~6411) (lambda () (&sk~1623545778~6412 &p~1623545778~6420)) &fk~1623545778~6413)) &fk~1623545778~6413) (&fk~1623545778~6413))) (cdr &x~1623545778~6399) (lambda (&p~1623545778~6428) (&sk~1623545778~6400 &p~1623545778~6428)) &fk~1623545778~6401)) &fk~1623545778~6401) (&fk~1623545778~6401))) &template~1623545778~6336 (lambda (&p~1623545778~6430) (&process-template~1623545778~2415 &p~1623545778~6430 &dim~1623545778~6337 #t)) (lambda () ((lambda (&x~1623545778~6446 &sk~1623545778~6447 &fk~1623545778~6448) (if ((lambda (&_~1623545778~6451) (not &ellipses-quoted?~1623545778~6338)) &x~1623545778~6446) ((lambda (&x~1623545778~6453 &sk~1623545778~6454 &fk~1623545778~6455) (if (pair? &x~1623545778~6453) ((lambda (&x~1623545778~6458 &sk~1623545778~6459 &fk~1623545778~6460) (&sk~1623545778~6459 &x~1623545778~6458)) (car &x~1623545778~6453) (lambda (&t~1623545778~6462) ((lambda (&x~1623545778~6464 &sk~1623545778~6465 &fk~1623545778~6466) (if (pair? &x~1623545778~6464) ((lambda (&x~1623545778~6469 &sk~1623545778~6470 &fk~1623545778~6471) (if (ex:free=? &x~1623545778~6469 (quote ...)) (&sk~1623545778~6470) (&fk~1623545778~6471))) (car &x~1623545778~6464) (lambda () ((lambda (&x~1623545778~6476 &sk~1623545778~6477 &fk~1623545778~6478) (&sk~1623545778~6477 &x~1623545778~6476)) (cdr &x~1623545778~6464) (lambda (&tail~1623545778~6480) (&sk~1623545778~6465 &tail~1623545778~6480)) &fk~1623545778~6466)) &fk~1623545778~6466) (&fk~1623545778~6466))) (cdr &x~1623545778~6453) (lambda (&tail~1623545778~6482) (&sk~1623545778~6454 &t~1623545778~6462 &tail~1623545778~6482)) &fk~1623545778~6455)) &fk~1623545778~6455) (&fk~1623545778~6455))) &x~1623545778~6446 &sk~1623545778~6447 &fk~1623545778~6448) (&fk~1623545778~6448))) &template~1623545778~6336 (lambda (&t~1623545778~6484 &tail~1623545778~6485) ((lambda (&head~1623545778~6489) ((lambda (&vars~1623545778~6492) (if (null? &vars~1623545778~6492) (&syntax-violation~1623545778~2445 (quote syntax) "Too many ...'s" &template~1623545778~6336) ((lambda (&x~1623545778~6498) ((lambda (&gen~1623545778~6501) ((lambda (&gen~1623545778~6504) (if (null? (&segment-tail~1623545778~2419 &template~1623545778~6336)) &gen~1623545778~6504 (list (quote append) &gen~1623545778~6504 (&process-template~1623545778~2415 (&segment-tail~1623545778~2419 &template~1623545778~6336) &dim~1623545778~6337 &ellipses-quoted?~1623545778~6338)))) (if (> (&segment-depth~1623545778~2417 &template~1623545778~6336) 1) (list (quote apply) (quote append) &gen~1623545778~6501) &gen~1623545778~6501))) (if (equal? (list &x~1623545778~6498) &vars~1623545778~6492) &x~1623545778~6498 (if (= (length &vars~1623545778~6492) 1) (cons (quote map) (cons (list (quote lambda) &vars~1623545778~6492 &x~1623545778~6498) &vars~1623545778~6492)) (list (quote if) (cons (quote =) (map (lambda (&var~1623545778~6521) (list (quote length) &var~1623545778~6521)) &vars~1623545778~6492)) (cons (quote map) (cons (list (quote lambda) &vars~1623545778~6492 &x~1623545778~6498) &vars~1623545778~6492)) (list (quote ex:syntax-violation) (quote (quote syntax)) (quote "Pattern variables denoting lists of unequal length preceding ellipses") (list (quote quote) (&syntax->datum~1623545778~2375 &template~1623545778~6336)) (cons (quote list) &vars~1623545778~6492))))))) (&process-template~1623545778~2415 &head~1623545778~6489 (+ &dim~1623545778~6337 1) &ellipses-quoted?~1623545778~6338)))) (map (lambda (&mapping~1623545778~6532) ((lambda (&id~1623545778~6535 &binding~1623545778~6536) (&check-binding-level~1623545778~2361 &id~1623545778~6535 &binding~1623545778~6536) (&register-use!~1623545778~2421 &id~1623545778~6535 &binding~1623545778~6536) (&binding-name~1623545778~2351 &binding~1623545778~6536)) (car &mapping~1623545778~6532) (cdr &mapping~1623545778~6532))) (&free-meta-variables~1623545778~2416 &head~1623545778~6489 (+ &dim~1623545778~6337 1) (quote ()) 0)))) (&segment-head~1623545778~2418 &template~1623545778~6336))) (lambda () ((lambda (&x~1623545778~6547 &sk~1623545778~6548 &fk~1623545778~6549) (if (pair? &x~1623545778~6547) ((lambda (&x~1623545778~6552 &sk~1623545778~6553 &fk~1623545778~6554) (&sk~1623545778~6553 &x~1623545778~6552)) (car &x~1623545778~6547) (lambda (&t1~1623545778~6556) ((lambda (&x~1623545778~6558 &sk~1623545778~6559 &fk~1623545778~6560) (&sk~1623545778~6559 &x~1623545778~6558)) (cdr &x~1623545778~6547) (lambda (&t2~1623545778~6562) (&sk~1623545778~6548 &t1~1623545778~6556 &t2~1623545778~6562)) &fk~1623545778~6549)) &fk~1623545778~6549) (&fk~1623545778~6549))) &template~1623545778~6336 (lambda (&t1~1623545778~6564 &t2~1623545778~6565) (list (quote cons) (&process-template~1623545778~2415 &t1~1623545778~6564 &dim~1623545778~6337 &ellipses-quoted?~1623545778~6338) (&process-template~1623545778~2415 &t2~1623545778~6565 &dim~1623545778~6337 &ellipses-quoted?~1623545778~6338))) (lambda () ((lambda (&x~1623545778~6577 &sk~1623545778~6578 &fk~1623545778~6579) (if (vector? &x~1623545778~6577) ((lambda (&x~1623545778~6582 &sk~1623545778~6583 &fk~1623545778~6584) (((lambda (&loop~1623545778~6590) ((lambda (&temp~1623545778~6593) (set! &loop~1623545778~6590 &temp~1623545778~6593) ((lambda () &loop~1623545778~6590))) (lambda (&x~1623545778~6598 &result~1623545778~6599) ((lambda (&match-tail~1623545778~6600) (set! &match-tail~1623545778~6600 (lambda () ((lambda (&x~1623545778~6618 &sk~1623545778~6619 &fk~1623545778~6620) (if (null? &x~1623545778~6618) (&sk~1623545778~6619) (&fk~1623545778~6620))) &x~1623545778~6598 (lambda () (apply &sk~1623545778~6583 (if (null? &result~1623545778~6599) (map (lambda (&ignore~1623545778~6625) (quote ())) (quote (ts))) (apply map list (reverse &result~1623545778~6599))))) (lambda () ((lambda (&x~1623545778~6633 &sk~1623545778~6634 &fk~1623545778~6635) (&sk~1623545778~6634)) &x~1623545778~6598 (lambda () (&fk~1623545778~6584)) (lambda () (ex:invalid-form &x~1623545778~6598))))))) (if (null? &x~1623545778~6598) (begin (&match-tail~1623545778~6600)) (if (pair? &x~1623545778~6598) (begin ((lambda (&x~1623545778~6607 &sk~1623545778~6608 &fk~1623545778~6609) (&sk~1623545778~6608 &x~1623545778~6607)) (car &x~1623545778~6598) (lambda &car-vars~1623545778~6611 (&loop~1623545778~6590 (cdr &x~1623545778~6598) (cons &car-vars~1623545778~6611 &result~1623545778~6599))) &match-tail~1623545778~6600)) (begin (&fk~1623545778~6584))))) ex:undefined)))) ex:undefined) &x~1623545778~6582 (quote ()))) (vector->list &x~1623545778~6577) &sk~1623545778~6578 &fk~1623545778~6579) (&fk~1623545778~6579))) &template~1623545778~6336 (lambda (&ts~1623545778~6641) (list (quote list->vector) (&process-template~1623545778~2415 &ts~1623545778~6641 &dim~1623545778~6337 &ellipses-quoted?~1623545778~6338))) (lambda () ((lambda (&x~1623545778~6649 &sk~1623545778~6650 &fk~1623545778~6651) (&sk~1623545778~6650 &x~1623545778~6649)) &template~1623545778~6336 (lambda (&other~1623545778~6653) (list (quote quote) (&expand~1623545778~2388 &other~1623545778~6653))) (lambda () (ex:invalid-form &template~1623545778~6336))))))))))))))))) (set! &free-meta-variables~1623545778~2416 (lambda (&template~1623545778~6139 &dim~1623545778~6140 &free~1623545778~6141 &deeper~1623545778~6142) ((lambda (&x~1623545778~6149 &sk~1623545778~6150 &fk~1623545778~6151) (if (&identifier?~1623545778~2336 &x~1623545778~6149) ((lambda (&x~1623545778~6154 &sk~1623545778~6155 &fk~1623545778~6156) (&sk~1623545778~6155 &x~1623545778~6154)) &x~1623545778~6149 &sk~1623545778~6150 &fk~1623545778~6151) (&fk~1623545778~6151))) &template~1623545778~6139 (lambda (&id~1623545778~6158) (if (memp (lambda (&x~1623545778~6161) (&bound-identifier=?~1623545778~2343 (car &x~1623545778~6161) &id~1623545778~6158)) &free~1623545778~6141) &free~1623545778~6141 ((lambda (&binding~1623545778~6164) (if (if &binding~1623545778~6164 (if (eq? (&binding-type~1623545778~2350 &binding~1623545778~6164) (quote pattern-variable)) ((lambda (&pdim~1623545778~6172) (if (> &pdim~1623545778~6172 0) (if (not (>= &deeper~1623545778~6142 &pdim~1623545778~6172)) (<= (- &pdim~1623545778~6172 &deeper~1623545778~6142) &dim~1623545778~6140) #f) #f)) (&binding-dimension~1623545778~2354 &binding~1623545778~6164)) #f) #f) (cons (cons &id~1623545778~6158 &binding~1623545778~6164) &free~1623545778~6141) &free~1623545778~6141)) (&binding~1623545778~2357 &id~1623545778~6158)))) (lambda () ((lambda (&x~1623545778~6189 &sk~1623545778~6190 &fk~1623545778~6191) (if (pair? &x~1623545778~6189) ((lambda (&x~1623545778~6194 &sk~1623545778~6195 &fk~1623545778~6196) (&sk~1623545778~6195 &x~1623545778~6194)) (car &x~1623545778~6189) (lambda (&t~1623545778~6198) ((lambda (&x~1623545778~6200 &sk~1623545778~6201 &fk~1623545778~6202) (if (pair? &x~1623545778~6200) ((lambda (&x~1623545778~6205 &sk~1623545778~6206 &fk~1623545778~6207) (if (ex:free=? &x~1623545778~6205 (quote ...)) (&sk~1623545778~6206) (&fk~1623545778~6207))) (car &x~1623545778~6200) (lambda () ((lambda (&x~1623545778~6212 &sk~1623545778~6213 &fk~1623545778~6214) (&sk~1623545778~6213 &x~1623545778~6212)) (cdr &x~1623545778~6200) (lambda (&rest~1623545778~6216) (&sk~1623545778~6201 &rest~1623545778~6216)) &fk~1623545778~6202)) &fk~1623545778~6202) (&fk~1623545778~6202))) (cdr &x~1623545778~6189) (lambda (&rest~1623545778~6218) (&sk~1623545778~6190 &t~1623545778~6198 &rest~1623545778~6218)) &fk~1623545778~6191)) &fk~1623545778~6191) (&fk~1623545778~6191))) &template~1623545778~6139 (lambda (&t~1623545778~6220 &rest~1623545778~6221) (&free-meta-variables~1623545778~2416 &t~1623545778~6220 &dim~1623545778~6140 (&free-meta-variables~1623545778~2416 (&segment-tail~1623545778~2419 &template~1623545778~6139) &dim~1623545778~6140 &free~1623545778~6141 &deeper~1623545778~6142) (+ &deeper~1623545778~6142 (&segment-depth~1623545778~2417 &template~1623545778~6139)))) (lambda () ((lambda (&x~1623545778~6231 &sk~1623545778~6232 &fk~1623545778~6233) (if (pair? &x~1623545778~6231) ((lambda (&x~1623545778~6236 &sk~1623545778~6237 &fk~1623545778~6238) (&sk~1623545778~6237 &x~1623545778~6236)) (car &x~1623545778~6231) (lambda (&t1~1623545778~6240) ((lambda (&x~1623545778~6242 &sk~1623545778~6243 &fk~1623545778~6244) (&sk~1623545778~6243 &x~1623545778~6242)) (cdr &x~1623545778~6231) (lambda (&t2~1623545778~6246) (&sk~1623545778~6232 &t1~1623545778~6240 &t2~1623545778~6246)) &fk~1623545778~6233)) &fk~1623545778~6233) (&fk~1623545778~6233))) &template~1623545778~6139 (lambda (&t1~1623545778~6248 &t2~1623545778~6249) (&free-meta-variables~1623545778~2416 &t1~1623545778~6248 &dim~1623545778~6140 (&free-meta-variables~1623545778~2416 &t2~1623545778~6249 &dim~1623545778~6140 &free~1623545778~6141 &deeper~1623545778~6142) &deeper~1623545778~6142)) (lambda () ((lambda (&x~1623545778~6259 &sk~1623545778~6260 &fk~1623545778~6261) (if (vector? &x~1623545778~6259) ((lambda (&x~1623545778~6264 &sk~1623545778~6265 &fk~1623545778~6266) (((lambda (&loop~1623545778~6272) ((lambda (&temp~1623545778~6275) (set! &loop~1623545778~6272 &temp~1623545778~6275) ((lambda () &loop~1623545778~6272))) (lambda (&x~1623545778~6280 &result~1623545778~6281) ((lambda (&match-tail~1623545778~6282) (set! &match-tail~1623545778~6282 (lambda () ((lambda (&x~1623545778~6300 &sk~1623545778~6301 &fk~1623545778~6302) (if (null? &x~1623545778~6300) (&sk~1623545778~6301) (&fk~1623545778~6302))) &x~1623545778~6280 (lambda () (apply &sk~1623545778~6265 (if (null? &result~1623545778~6281) (map (lambda (&ignore~1623545778~6307) (quote ())) (quote (ts))) (apply map list (reverse &result~1623545778~6281))))) (lambda () ((lambda (&x~1623545778~6315 &sk~1623545778~6316 &fk~1623545778~6317) (&sk~1623545778~6316)) &x~1623545778~6280 (lambda () (&fk~1623545778~6266)) (lambda () (ex:invalid-form &x~1623545778~6280))))))) (if (null? &x~1623545778~6280) (begin (&match-tail~1623545778~6282)) (if (pair? &x~1623545778~6280) (begin ((lambda (&x~1623545778~6289 &sk~1623545778~6290 &fk~1623545778~6291) (&sk~1623545778~6290 &x~1623545778~6289)) (car &x~1623545778~6280) (lambda &car-vars~1623545778~6293 (&loop~1623545778~6272 (cdr &x~1623545778~6280) (cons &car-vars~1623545778~6293 &result~1623545778~6281))) &match-tail~1623545778~6282)) (begin (&fk~1623545778~6266))))) ex:undefined)))) ex:undefined) &x~1623545778~6264 (quote ()))) (vector->list &x~1623545778~6259) &sk~1623545778~6260 &fk~1623545778~6261) (&fk~1623545778~6261))) &template~1623545778~6139 (lambda (&ts~1623545778~6323) (&free-meta-variables~1623545778~2416 &ts~1623545778~6323 &dim~1623545778~6140 &free~1623545778~6141 &deeper~1623545778~6142)) (lambda () ((lambda (&x~1623545778~6329 &sk~1623545778~6330 &fk~1623545778~6331) (&sk~1623545778~6330)) &template~1623545778~6139 (lambda () &free~1623545778~6141) (lambda () (ex:invalid-form &template~1623545778~6139))))))))))))) (set! &segment-depth~1623545778~2417 (lambda (&pattern~1623545778~6081) ((lambda (&x~1623545778~6094 &sk~1623545778~6095 &fk~1623545778~6096) (if (pair? &x~1623545778~6094) ((lambda (&x~1623545778~6099 &sk~1623545778~6100 &fk~1623545778~6101) (&sk~1623545778~6100 &x~1623545778~6099)) (car &x~1623545778~6094) (lambda (&p~1623545778~6103) ((lambda (&x~1623545778~6105 &sk~1623545778~6106 &fk~1623545778~6107) (if (pair? &x~1623545778~6105) ((lambda (&x~1623545778~6110 &sk~1623545778~6111 &fk~1623545778~6112) (if (ex:free=? &x~1623545778~6110 (quote ...)) (&sk~1623545778~6111) (&fk~1623545778~6112))) (car &x~1623545778~6105) (lambda () ((lambda (&x~1623545778~6117 &sk~1623545778~6118 &fk~1623545778~6119) (&sk~1623545778~6118 &x~1623545778~6117)) (cdr &x~1623545778~6105) (lambda (&rest~1623545778~6121) (&sk~1623545778~6106 &rest~1623545778~6121)) &fk~1623545778~6107)) &fk~1623545778~6107) (&fk~1623545778~6107))) (cdr &x~1623545778~6094) (lambda (&rest~1623545778~6123) (&sk~1623545778~6095 &p~1623545778~6103 &rest~1623545778~6123)) &fk~1623545778~6096)) &fk~1623545778~6096) (&fk~1623545778~6096))) &pattern~1623545778~6081 (lambda (&p~1623545778~6125 &rest~1623545778~6126) (+ 1 (&segment-depth~1623545778~2417 (cdr &pattern~1623545778~6081)))) (lambda () ((lambda (&x~1623545778~6132 &sk~1623545778~6133 &fk~1623545778~6134) (&sk~1623545778~6133)) &pattern~1623545778~6081 (lambda () 0) (lambda () (ex:invalid-form &pattern~1623545778~6081))))))) (set! &segment-head~1623545778~2418 (lambda (&pattern~1623545778~5895) ((lambda (&head~1623545778~5898) ((lambda (&x~1623545778~5911 &sk~1623545778~5912 &fk~1623545778~5913) (if (pair? &x~1623545778~5911) ((lambda (&x~1623545778~5916 &sk~1623545778~5917 &fk~1623545778~5918) (&sk~1623545778~5917 &x~1623545778~5916)) (car &x~1623545778~5911) (lambda (&h~1623545778~5920) ((lambda (&x~1623545778~5922 &sk~1623545778~5923 &fk~1623545778~5924) (if (pair? &x~1623545778~5922) ((lambda (&x~1623545778~5927 &sk~1623545778~5928 &fk~1623545778~5929) (if (ex:free=? &x~1623545778~5927 (quote ...)) (&sk~1623545778~5928) (&fk~1623545778~5929))) (car &x~1623545778~5922) (lambda () ((lambda (&x~1623545778~5934 &sk~1623545778~5935 &fk~1623545778~5936) (&sk~1623545778~5935 &x~1623545778~5934)) (cdr &x~1623545778~5922) (lambda (&rest~1623545778~5938) (&sk~1623545778~5923 &rest~1623545778~5938)) &fk~1623545778~5924)) &fk~1623545778~5924) (&fk~1623545778~5924))) (cdr &x~1623545778~5911) (lambda (&rest~1623545778~5940) (&sk~1623545778~5912 &h~1623545778~5920 &rest~1623545778~5940)) &fk~1623545778~5913)) &fk~1623545778~5913) (&fk~1623545778~5913))) &head~1623545778~5898 (lambda (&h~1623545778~5942 &rest~1623545778~5943) &head~1623545778~5898) (lambda () ((lambda (&x~1623545778~5949 &sk~1623545778~5950 &fk~1623545778~5951) (&sk~1623545778~5950)) &head~1623545778~5898 (lambda () (car &head~1623545778~5898)) (lambda () (ex:invalid-form &head~1623545778~5898)))))) (((lambda (&recur~1623545778~5960) ((lambda (&temp~1623545778~5963) (set! &recur~1623545778~5960 &temp~1623545778~5963) ((lambda () &recur~1623545778~5960))) (lambda (&pattern~1623545778~5968) ((lambda (&x~1623545778~5985 &sk~1623545778~5986 &fk~1623545778~5987) (if (pair? &x~1623545778~5985) ((lambda (&x~1623545778~5990 &sk~1623545778~5991 &fk~1623545778~5992) (&sk~1623545778~5991 &x~1623545778~5990)) (car &x~1623545778~5985) (lambda (&h~1623545778~5994) ((lambda (&x~1623545778~5996 &sk~1623545778~5997 &fk~1623545778~5998) (if (pair? &x~1623545778~5996) ((lambda (&x~1623545778~6001 &sk~1623545778~6002 &fk~1623545778~6003) (if (ex:free=? &x~1623545778~6001 (quote ...)) (&sk~1623545778~6002) (&fk~1623545778~6003))) (car &x~1623545778~5996) (lambda () ((lambda (&x~1623545778~6008 &sk~1623545778~6009 &fk~1623545778~6010) (if (pair? &x~1623545778~6008) ((lambda (&x~1623545778~6013 &sk~1623545778~6014 &fk~1623545778~6015) (if (ex:free=? &x~1623545778~6013 (quote ...)) (&sk~1623545778~6014) (&fk~1623545778~6015))) (car &x~1623545778~6008) (lambda () ((lambda (&x~1623545778~6020 &sk~1623545778~6021 &fk~1623545778~6022) (&sk~1623545778~6021 &x~1623545778~6020)) (cdr &x~1623545778~6008) (lambda (&rest~1623545778~6024) (&sk~1623545778~6009 &rest~1623545778~6024)) &fk~1623545778~6010)) &fk~1623545778~6010) (&fk~1623545778~6010))) (cdr &x~1623545778~5996) (lambda (&rest~1623545778~6026) (&sk~1623545778~5997 &rest~1623545778~6026)) &fk~1623545778~5998)) &fk~1623545778~5998) (&fk~1623545778~5998))) (cdr &x~1623545778~5985) (lambda (&rest~1623545778~6028) (&sk~1623545778~5986 &h~1623545778~5994 &rest~1623545778~6028)) &fk~1623545778~5987)) &fk~1623545778~5987) (&fk~1623545778~5987))) &pattern~1623545778~5968 (lambda (&h~1623545778~6030 &rest~1623545778~6031) (cons &h~1623545778~6030 (&recur~1623545778~5960 (cdr &pattern~1623545778~5968)))) (lambda () ((lambda (&x~1623545778~6045 &sk~1623545778~6046 &fk~1623545778~6047) (if (pair? &x~1623545778~6045) ((lambda (&x~1623545778~6050 &sk~1623545778~6051 &fk~1623545778~6052) (&sk~1623545778~6051 &x~1623545778~6050)) (car &x~1623545778~6045) (lambda (&h~1623545778~6054) ((lambda (&x~1623545778~6056 &sk~1623545778~6057 &fk~1623545778~6058) (if (pair? &x~1623545778~6056) ((lambda (&x~1623545778~6061 &sk~1623545778~6062 &fk~1623545778~6063) (if (ex:free=? &x~1623545778~6061 (quote ...)) (&sk~1623545778~6062) (&fk~1623545778~6063))) (car &x~1623545778~6056) (lambda () ((lambda (&x~1623545778~6068 &sk~1623545778~6069 &fk~1623545778~6070) (&sk~1623545778~6069 &x~1623545778~6068)) (cdr &x~1623545778~6056) (lambda (&rest~1623545778~6072) (&sk~1623545778~6057 &rest~1623545778~6072)) &fk~1623545778~6058)) &fk~1623545778~6058) (&fk~1623545778~6058))) (cdr &x~1623545778~6045) (lambda (&rest~1623545778~6074) (&sk~1623545778~6046 &h~1623545778~6054 &rest~1623545778~6074)) &fk~1623545778~6047)) &fk~1623545778~6047) (&fk~1623545778~6047))) &pattern~1623545778~5968 (lambda (&h~1623545778~6076 &rest~1623545778~6077) (list &h~1623545778~6076)) (lambda () (ex:invalid-form &pattern~1623545778~5968)))))))) ex:undefined) &pattern~1623545778~5895)))) (set! &segment-tail~1623545778~2419 (lambda (&pattern~1623545778~5841) (((lambda (&loop~1623545778~5847) ((lambda (&temp~1623545778~5850) (set! &loop~1623545778~5847 &temp~1623545778~5850) ((lambda () &loop~1623545778~5847))) (lambda (&pattern~1623545778~5855) ((lambda (&x~1623545778~5864 &sk~1623545778~5865 &fk~1623545778~5866) (if (pair? &x~1623545778~5864) ((lambda (&x~1623545778~5869 &sk~1623545778~5870 &fk~1623545778~5871) (if (ex:free=? &x~1623545778~5869 (quote ...)) (&sk~1623545778~5870) (&fk~1623545778~5871))) (car &x~1623545778~5864) (lambda () ((lambda (&x~1623545778~5876 &sk~1623545778~5877 &fk~1623545778~5878) (&sk~1623545778~5877 &x~1623545778~5876)) (cdr &x~1623545778~5864) (lambda (&tail~1623545778~5880) (&sk~1623545778~5865 &tail~1623545778~5880)) &fk~1623545778~5866)) &fk~1623545778~5866) (&fk~1623545778~5866))) &pattern~1623545778~5855 (lambda (&tail~1623545778~5882) (&loop~1623545778~5847 &tail~1623545778~5882)) (lambda () ((lambda (&x~1623545778~5888 &sk~1623545778~5889 &fk~1623545778~5890) (&sk~1623545778~5889)) &pattern~1623545778~5855 (lambda () &pattern~1623545778~5855) (lambda () (ex:invalid-form &pattern~1623545778~5855)))))))) ex:undefined) (cdr &pattern~1623545778~5841)))) (set! &add-fresh-used-frame!~1623545778~2420 (lambda () (set! &*used*~1623545778~2323 (cons (quote ()) &*used*~1623545778~2323)))) (set! &register-use!~1623545778~2421 (lambda (&id~1623545778~5834 &binding~1623545778~5835) (set! &*used*~1623545778~2323 (cons (cons (cons &id~1623545778~5834 &binding~1623545778~5835) (car &*used*~1623545778~2323)) (cdr &*used*~1623545778~2323))))) (set! &merge-used-with-parent-frame!~1623545778~2422 (lambda () (set! &*used*~1623545778~2323 (cons (append (car &*used*~1623545778~2323) (cadr &*used*~1623545778~2323)) (cddr &*used*~1623545778~2323))))) (set! &check-used~1623545778~2423 (lambda (&id~1623545778~5812 &body-type~1623545778~5813 &form~1623545778~5814) (if (not (eq? &body-type~1623545778~5813 (quote toplevel))) ((lambda (&already-used~1623545778~5821) ((lambda (&binding~1623545778~5824) (if (memp (lambda (&mapping~1623545778~5827) (if (eq? &binding~1623545778~5824 (cdr &mapping~1623545778~5827)) (&bound-identifier=?~1623545778~2343 &id~1623545778~5812 (car &mapping~1623545778~5827)) #f)) &already-used~1623545778~5821) (&syntax-violation~1623545778~2445 (quote definition) "Definition of identifier that may have already affected meaning of undeferred portions of body" &form~1623545778~5814 &id~1623545778~5812))) (&binding~1623545778~2357 &id~1623545778~5812))) (car &*used*~1623545778~2323)) #f))) (set! &expand-program~1623545778~2424 (lambda (&t~1623545778~5701) ((lambda (&x~1623545778~5716 &sk~1623545778~5717 &fk~1623545778~5718) (if (pair? &x~1623545778~5716) ((lambda (&x~1623545778~5721 &sk~1623545778~5722 &fk~1623545778~5723) (&sk~1623545778~5722 &x~1623545778~5721)) (car &x~1623545778~5716) (lambda (&program~1623545778~5725) ((lambda (&x~1623545778~5727 &sk~1623545778~5728 &fk~1623545778~5729) (if (pair? &x~1623545778~5727) ((lambda (&x~1623545778~5732 &sk~1623545778~5733 &fk~1623545778~5734) (&sk~1623545778~5733 &x~1623545778~5732)) (car &x~1623545778~5727) (lambda (&import-clause~1623545778~5736) ((lambda (&x~1623545778~5738 &sk~1623545778~5739 &fk~1623545778~5740) (((lambda (&loop~1623545778~5746) ((lambda (&temp~1623545778~5749) (set! &loop~1623545778~5746 &temp~1623545778~5749) ((lambda () &loop~1623545778~5746))) (lambda (&x~1623545778~5754 &result~1623545778~5755) ((lambda (&match-tail~1623545778~5756) (set! &match-tail~1623545778~5756 (lambda () ((lambda (&x~1623545778~5774 &sk~1623545778~5775 &fk~1623545778~5776) (if (null? &x~1623545778~5774) (&sk~1623545778~5775) (&fk~1623545778~5776))) &x~1623545778~5754 (lambda () (apply &sk~1623545778~5739 (if (null? &result~1623545778~5755) (map (lambda (&ignore~1623545778~5781) (quote ())) (quote (forms))) (apply map list (reverse &result~1623545778~5755))))) (lambda () ((lambda (&x~1623545778~5789 &sk~1623545778~5790 &fk~1623545778~5791) (&sk~1623545778~5790)) &x~1623545778~5754 (lambda () (&fk~1623545778~5740)) (lambda () (ex:invalid-form &x~1623545778~5754))))))) (if (null? &x~1623545778~5754) (begin (&match-tail~1623545778~5756)) (if (pair? &x~1623545778~5754) (begin ((lambda (&x~1623545778~5763 &sk~1623545778~5764 &fk~1623545778~5765) (&sk~1623545778~5764 &x~1623545778~5763)) (car &x~1623545778~5754) (lambda &car-vars~1623545778~5767 (&loop~1623545778~5746 (cdr &x~1623545778~5754) (cons &car-vars~1623545778~5767 &result~1623545778~5755))) &match-tail~1623545778~5756)) (begin (&fk~1623545778~5740))))) ex:undefined)))) ex:undefined) &x~1623545778~5738 (quote ()))) (cdr &x~1623545778~5727) (lambda (&forms~1623545778~5797) (&sk~1623545778~5728 &import-clause~1623545778~5736 &forms~1623545778~5797)) &fk~1623545778~5729)) &fk~1623545778~5729) (&fk~1623545778~5729))) (cdr &x~1623545778~5716) (lambda (&import-clause~1623545778~5799 &forms~1623545778~5800) (&sk~1623545778~5717 &program~1623545778~5725 &import-clause~1623545778~5799 &forms~1623545778~5800)) &fk~1623545778~5718)) &fk~1623545778~5718) (&fk~1623545778~5718))) &t~1623545778~5701 (lambda (&program~1623545778~5802 &import-clause~1623545778~5803 &forms~1623545778~5804) (&expand-library-or-program~1623545778~2426 (cons &program~1623545778~5802 (cons (list (&datum->syntax~1623545778~2374 &program~1623545778~5802 (&generate-guid~1623545778~2346 (quote program)))) (cons (list (&datum->syntax~1623545778~2374 &program~1623545778~5802 (quote export))) (cons &import-clause~1623545778~5803 &forms~1623545778~5804)))) (quote program))) (lambda () (ex:invalid-form &t~1623545778~5701))))) (set! &expand-library~1623545778~2425 (lambda (&t~1623545778~5698) (&expand-library-or-program~1623545778~2426 &t~1623545778~5698 (quote library)))) (set! &expand-library-or-program~1623545778~2426 (lambda (&t~1623545778~5278 &library-type~1623545778~5279) ((lambda (&x~1623545778~5314 &sk~1623545778~5315 &fk~1623545778~5316) (if (pair? &x~1623545778~5314) ((lambda (&x~1623545778~5319 &sk~1623545778~5320 &fk~1623545778~5321) (&sk~1623545778~5320 &x~1623545778~5319)) (car &x~1623545778~5314) (lambda (&keyword~1623545778~5323) ((lambda (&x~1623545778~5325 &sk~1623545778~5326 &fk~1623545778~5327) (if (pair? &x~1623545778~5325) ((lambda (&x~1623545778~5330 &sk~1623545778~5331 &fk~1623545778~5332) (&sk~1623545778~5331 &x~1623545778~5330)) (car &x~1623545778~5325) (lambda (&name~1623545778~5334) ((lambda (&x~1623545778~5336 &sk~1623545778~5337 &fk~1623545778~5338) (if (pair? &x~1623545778~5336) ((lambda (&x~1623545778~5341 &sk~1623545778~5342 &fk~1623545778~5343) (if (pair? &x~1623545778~5341) ((lambda (&x~1623545778~5346 &sk~1623545778~5347 &fk~1623545778~5348) (if (ex:free=? &x~1623545778~5346 (quote export)) (&sk~1623545778~5347) (&fk~1623545778~5348))) (car &x~1623545778~5341) (lambda () ((lambda (&x~1623545778~5353 &sk~1623545778~5354 &fk~1623545778~5355) (((lambda (&loop~1623545778~5361) ((lambda (&temp~1623545778~5364) (set! &loop~1623545778~5361 &temp~1623545778~5364) ((lambda () &loop~1623545778~5361))) (lambda (&x~1623545778~5369 &result~1623545778~5370) ((lambda (&match-tail~1623545778~5371) (set! &match-tail~1623545778~5371 (lambda () ((lambda (&x~1623545778~5389 &sk~1623545778~5390 &fk~1623545778~5391) (if (null? &x~1623545778~5389) (&sk~1623545778~5390) (&fk~1623545778~5391))) &x~1623545778~5369 (lambda () (apply &sk~1623545778~5354 (if (null? &result~1623545778~5370) (map (lambda (&ignore~1623545778~5396) (quote ())) (quote (sets))) (apply map list (reverse &result~1623545778~5370))))) (lambda () ((lambda (&x~1623545778~5404 &sk~1623545778~5405 &fk~1623545778~5406) (&sk~1623545778~5405)) &x~1623545778~5369 (lambda () (&fk~1623545778~5355)) (lambda () (ex:invalid-form &x~1623545778~5369))))))) (if (null? &x~1623545778~5369) (begin (&match-tail~1623545778~5371)) (if (pair? &x~1623545778~5369) (begin ((lambda (&x~1623545778~5378 &sk~1623545778~5379 &fk~1623545778~5380) (&sk~1623545778~5379 &x~1623545778~5378)) (car &x~1623545778~5369) (lambda &car-vars~1623545778~5382 (&loop~1623545778~5361 (cdr &x~1623545778~5369) (cons &car-vars~1623545778~5382 &result~1623545778~5370))) &match-tail~1623545778~5371)) (begin (&fk~1623545778~5355))))) ex:undefined)))) ex:undefined) &x~1623545778~5353 (quote ()))) (cdr &x~1623545778~5341) (lambda (&sets~1623545778~5412) (&sk~1623545778~5342 &sets~1623545778~5412)) &fk~1623545778~5343)) &fk~1623545778~5343) (&fk~1623545778~5343))) (car &x~1623545778~5336) (lambda (&sets~1623545778~5414) ((lambda (&x~1623545778~5416 &sk~1623545778~5417 &fk~1623545778~5418) (if (pair? &x~1623545778~5416) ((lambda (&x~1623545778~5421 &sk~1623545778~5422 &fk~1623545778~5423) (if (pair? &x~1623545778~5421) ((lambda (&x~1623545778~5426 &sk~1623545778~5427 &fk~1623545778~5428) (if (ex:free=? &x~1623545778~5426 (quote import)) (&sk~1623545778~5427) (&fk~1623545778~5428))) (car &x~1623545778~5421) (lambda () ((lambda (&x~1623545778~5433 &sk~1623545778~5434 &fk~1623545778~5435) (((lambda (&loop~1623545778~5441) ((lambda (&temp~1623545778~5444) (set! &loop~1623545778~5441 &temp~1623545778~5444) ((lambda () &loop~1623545778~5441))) (lambda (&x~1623545778~5449 &result~1623545778~5450) ((lambda (&match-tail~1623545778~5451) (set! &match-tail~1623545778~5451 (lambda () ((lambda (&x~1623545778~5469 &sk~1623545778~5470 &fk~1623545778~5471) (if (null? &x~1623545778~5469) (&sk~1623545778~5470) (&fk~1623545778~5471))) &x~1623545778~5449 (lambda () (apply &sk~1623545778~5434 (if (null? &result~1623545778~5450) (map (lambda (&ignore~1623545778~5476) (quote ())) (quote (specs))) (apply map list (reverse &result~1623545778~5450))))) (lambda () ((lambda (&x~1623545778~5484 &sk~1623545778~5485 &fk~1623545778~5486) (&sk~1623545778~5485)) &x~1623545778~5449 (lambda () (&fk~1623545778~5435)) (lambda () (ex:invalid-form &x~1623545778~5449))))))) (if (null? &x~1623545778~5449) (begin (&match-tail~1623545778~5451)) (if (pair? &x~1623545778~5449) (begin ((lambda (&x~1623545778~5458 &sk~1623545778~5459 &fk~1623545778~5460) (&sk~1623545778~5459 &x~1623545778~5458)) (car &x~1623545778~5449) (lambda &car-vars~1623545778~5462 (&loop~1623545778~5441 (cdr &x~1623545778~5449) (cons &car-vars~1623545778~5462 &result~1623545778~5450))) &match-tail~1623545778~5451)) (begin (&fk~1623545778~5435))))) ex:undefined)))) ex:undefined) &x~1623545778~5433 (quote ()))) (cdr &x~1623545778~5421) (lambda (&specs~1623545778~5492) (&sk~1623545778~5422 &specs~1623545778~5492)) &fk~1623545778~5423)) &fk~1623545778~5423) (&fk~1623545778~5423))) (car &x~1623545778~5416) (lambda (&specs~1623545778~5494) ((lambda (&x~1623545778~5496 &sk~1623545778~5497 &fk~1623545778~5498) (((lambda (&loop~1623545778~5504) ((lambda (&temp~1623545778~5507) (set! &loop~1623545778~5504 &temp~1623545778~5507) ((lambda () &loop~1623545778~5504))) (lambda (&x~1623545778~5512 &result~1623545778~5513) ((lambda (&match-tail~1623545778~5514) (set! &match-tail~1623545778~5514 (lambda () ((lambda (&x~1623545778~5532 &sk~1623545778~5533 &fk~1623545778~5534) (if (null? &x~1623545778~5532) (&sk~1623545778~5533) (&fk~1623545778~5534))) &x~1623545778~5512 (lambda () (apply &sk~1623545778~5497 (if (null? &result~1623545778~5513) (map (lambda (&ignore~1623545778~5539) (quote ())) (quote (body-forms))) (apply map list (reverse &result~1623545778~5513))))) (lambda () ((lambda (&x~1623545778~5547 &sk~1623545778~5548 &fk~1623545778~5549) (&sk~1623545778~5548)) &x~1623545778~5512 (lambda () (&fk~1623545778~5498)) (lambda () (ex:invalid-form &x~1623545778~5512))))))) (if (null? &x~1623545778~5512) (begin (&match-tail~1623545778~5514)) (if (pair? &x~1623545778~5512) (begin ((lambda (&x~1623545778~5521 &sk~1623545778~5522 &fk~1623545778~5523) (&sk~1623545778~5522 &x~1623545778~5521)) (car &x~1623545778~5512) (lambda &car-vars~1623545778~5525 (&loop~1623545778~5504 (cdr &x~1623545778~5512) (cons &car-vars~1623545778~5525 &result~1623545778~5513))) &match-tail~1623545778~5514)) (begin (&fk~1623545778~5498))))) ex:undefined)))) ex:undefined) &x~1623545778~5496 (quote ()))) (cdr &x~1623545778~5416) (lambda (&body-forms~1623545778~5555) (&sk~1623545778~5417 &specs~1623545778~5494 &body-forms~1623545778~5555)) &fk~1623545778~5418)) &fk~1623545778~5418) (&fk~1623545778~5418))) (cdr &x~1623545778~5336) (lambda (&specs~1623545778~5557 &body-forms~1623545778~5558) (&sk~1623545778~5337 &sets~1623545778~5414 &specs~1623545778~5557 &body-forms~1623545778~5558)) &fk~1623545778~5338)) &fk~1623545778~5338) (&fk~1623545778~5338))) (cdr &x~1623545778~5325) (lambda (&sets~1623545778~5560 &specs~1623545778~5561 &body-forms~1623545778~5562) (&sk~1623545778~5326 &name~1623545778~5334 &sets~1623545778~5560 &specs~1623545778~5561 &body-forms~1623545778~5562)) &fk~1623545778~5327)) &fk~1623545778~5327) (&fk~1623545778~5327))) (cdr &x~1623545778~5314) (lambda (&name~1623545778~5564 &sets~1623545778~5565 &specs~1623545778~5566 &body-forms~1623545778~5567) (&sk~1623545778~5315 &keyword~1623545778~5323 &name~1623545778~5564 &sets~1623545778~5565 &specs~1623545778~5566 &body-forms~1623545778~5567)) &fk~1623545778~5316)) &fk~1623545778~5316) (&fk~1623545778~5316))) &t~1623545778~5278 (lambda (&keyword~1623545778~5569 &name~1623545778~5570 &sets~1623545778~5571 &specs~1623545778~5572 &body-forms~1623545778~5573) ((lambda (&name~1623545778~5576) ((lambda (&exports~1623545778~5579) (call-with-values (lambda () (&scan-imports~1623545778~2432 &specs~1623545778~5572)) (lambda (&imported-libraries~1623545778~5582 &imports~1623545778~5583) ((lambda (&saved~1623545778~5587) (set! &*usage-env*~1623545778~2305 (&make-unit-env~1623545778~2363)) (call-with-values (lambda () ((lambda (&saved~1623545778~5592) (set! &*current-library*~1623545778~2320 &name~1623545778~5576) (call-with-values (lambda () ((lambda (&saved~1623545778~5597) (set! &*syntax-reflected*~1623545778~2329 #f) (call-with-values (lambda () (&import-libraries-for-expand~1623545778~2429 &imported-libraries~1623545778~5582 (map not &imported-libraries~1623545778~5582) 0) (&env-import!~1623545778~2427 &keyword~1623545778~5569 &imports~1623545778~5583 &*usage-env*~1623545778~2305) ((lambda (&initial-env-table~1623545778~5602) (&scan-sequence~1623545778~2404 &library-type~1623545778~5279 &make-local-mapping~1623545778~2358 &body-forms~1623545778~5573 (lambda (&forms~1623545778~5604 &syntax-definitions~1623545778~5605 &bound-variables~1623545778~5606) ((lambda (&exports~1623545778~5610) ((lambda (&expanded-library~1623545778~5613) (if (eq? &library-type~1623545778~5279 (quote library)) (eval &expanded-library~1623545778~5613 (interaction-environment))) &expanded-library~1623545778~5613) ((lambda (&t~1623545778~5619) (if (memv &t~1623545778~5619 (quote (program))) (begin (cons (quote begin) (cons (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) &imported-libraries~1623545778~5582) (cons (list (quote quote) (&current-builds~1623545778~2428 &imported-libraries~1623545778~5582)) (quote (0))))) (&emit-body~1623545778~2405 &forms~1623545778~5604 (quote define))))) (if (memv &t~1623545778~5619 (quote (library))) (begin (cons (quote begin) (append (map (lambda (&var~1623545778~5636) (cons (quote define) (cons &var~1623545778~5636 (quote (ex:unspecified))))) &bound-variables~1623545778~5606) (cons (list (quote ex:register-library!) (list (quote ex:make-library) (list (quote quote) &name~1623545778~5576) (list (quote lambda) (quote ()) (if &*syntax-reflected*~1623545778~2329 (list (quote ex:uncompress) (list (quote quote) (&compress~1623545778~2370 (&drop-tail~1623545778~2466 &*env-table*~1623545778~2317 &initial-env-table~1623545778~5602)))) (quote (quote ())))) (list (quote quote) &exports~1623545778~5610) (list (quote quote) &imported-libraries~1623545778~5582) (list (quote quote) (&current-builds~1623545778~2428 &imported-libraries~1623545778~5582)) (cons (quote lambda) (cons (quote ()) (append (map (lambda (&def~1623545778~5657) (list (quote ex:register-macro!) (list (quote quote) (car &def~1623545778~5657)) (cdr &def~1623545778~5657))) &syntax-definitions~1623545778~5605) (quote ((values)))))) (cons (quote lambda) (cons (quote ()) (append (map (lambda (&var~1623545778~5665) (cons (quote set!) (cons &var~1623545778~5665 (quote (ex:undefined))))) &bound-variables~1623545778~5606) (append (&emit-body~1623545778~2405 &forms~1623545778~5604 ex:undefined-set!) (quote ((values))))))) (list (quote quote) (&generate-guid~1623545778~2346 (quote build))))) (quote ((values)))))))))) &library-type~1623545778~5279))) (map (lambda (&mapping~1623545778~5674) (cons (&id-name~1623545778~2337 (car &mapping~1623545778~5674)) ((lambda (&binding~1623545778~5677) (let ((x &binding~1623545778~5677)) (if x x (&syntax-violation~1623545778~2445 (quote library) "Unbound export" &t~1623545778~5278 (cadr &mapping~1623545778~5674)))) (if (&binding-mutable?~1623545778~2353 &binding~1623545778~5677) (&syntax-violation~1623545778~2445 (quote library) "Attempt to export mutable variable" &t~1623545778~5278 (cadr &mapping~1623545778~5674))) &binding~1623545778~5677) (&binding~1623545778~2357 (cadr &mapping~1623545778~5674))))) &exports~1623545778~5579))))) &*env-table*~1623545778~2317)) (lambda &results~1623545778~5684 (set! &*syntax-reflected*~1623545778~2329 &saved~1623545778~5597) (apply values &results~1623545778~5684)))) &*syntax-reflected*~1623545778~2329)) (lambda &results~1623545778~5688 (set! &*current-library*~1623545778~2320 &saved~1623545778~5592) (apply values &results~1623545778~5688)))) &*current-library*~1623545778~2320)) (lambda &results~1623545778~5692 (set! &*usage-env*~1623545778~2305 &saved~1623545778~5587) (apply values &results~1623545778~5692)))) &*usage-env*~1623545778~2305)))) (&scan-exports~1623545778~2430 &sets~1623545778~5571))) (&syntax->datum~1623545778~2375 (&scan-library-name~1623545778~2437 &name~1623545778~5570)))) (lambda () (ex:invalid-form &t~1623545778~5278))))) (set! &env-import!~1623545778~2427 (lambda (&keyword~1623545778~5272 &imports~1623545778~5273 &env~1623545778~5274) (&env-extend!~1623545778~2365 (map (lambda (&import~1623545778~5276) (cons (cons (car &import~1623545778~5276) (&id-colors~1623545778~2338 &keyword~1623545778~5272)) (cdr &import~1623545778~5276))) &imports~1623545778~5273) &env~1623545778~5274))) (set! &current-builds~1623545778~2428 (lambda (&imported-libraries~1623545778~5268) (map (lambda (&lib-entry~1623545778~5270) (ex:library-build (ex:lookup-library (car &lib-entry~1623545778~5270)))) &imported-libraries~1623545778~5268))) (set! &import-libraries-for-expand~1623545778~2429 (lambda (&imports~1623545778~5250 &builds~1623545778~5251 &phase~1623545778~5252) (ex:import-libraries-for &imports~1623545778~5250 &builds~1623545778~5251 &phase~1623545778~5252 (lambda (&library~1623545778~5254 &phase~1623545778~5255 &imported~1623545778~5256) (if (if (>= &phase~1623545778~5255 0) (not (ex:library-visited? &library~1623545778~5254)) #f) (begin (set! &*env-table*~1623545778~2317 (append ((ex:library-envs &library~1623545778~5254)) &*env-table*~1623545778~2317)) ((ex:library-visiter &library~1623545778~5254)) (ex:library-visited?-set! &library~1623545778~5254 #t))) (if (if (>= &phase~1623545778~5255 1) (not (ex:library-invoked? &library~1623545778~5254)) #f) (begin ((ex:library-invoker &library~1623545778~5254)) (ex:library-invoked?-set! &library~1623545778~5254 #t)))) (quote expand)))) (set! &scan-exports~1623545778~2430 (lambda (&sets~1623545778~5239) ((lambda (&exports~1623545778~5242) (&check-set?~1623545778~2464 &exports~1623545778~5242 (lambda (&x~1623545778~5244 &y~1623545778~5245) (eq? (&id-name~1623545778~2337 (car &x~1623545778~5244)) (&id-name~1623545778~2337 (car &y~1623545778~5245)))) (lambda (&dup~1623545778~5247) (&syntax-violation~1623545778~2445 (quote export) "Duplicate export" &sets~1623545778~5239 &dup~1623545778~5247))) &exports~1623545778~5242) (apply append (map &scan-export-set~1623545778~2431 &sets~1623545778~5239))))) (set! &scan-export-set~1623545778~2431 (lambda (&set~1623545778~5067) ((lambda (&x~1623545778~5074 &sk~1623545778~5075 &fk~1623545778~5076) (if (&identifier?~1623545778~2336 &x~1623545778~5074) ((lambda (&x~1623545778~5079 &sk~1623545778~5080 &fk~1623545778~5081) (&sk~1623545778~5080 &x~1623545778~5079)) &x~1623545778~5074 &sk~1623545778~5075 &fk~1623545778~5076) (&fk~1623545778~5076))) &set~1623545778~5067 (lambda (&x~1623545778~5083) (list (cons &x~1623545778~5083 (cons &x~1623545778~5083 (quote (0)))))) (lambda () ((lambda (&x~1623545778~5109 &sk~1623545778~5110 &fk~1623545778~5111) (if (pair? &x~1623545778~5109) ((lambda (&x~1623545778~5114 &sk~1623545778~5115 &fk~1623545778~5116) (if (ex:free=? &x~1623545778~5114 (quote rename)) (&sk~1623545778~5115) (&fk~1623545778~5116))) (car &x~1623545778~5109) (lambda () ((lambda (&x~1623545778~5121 &sk~1623545778~5122 &fk~1623545778~5123) (((lambda (&loop~1623545778~5129) ((lambda (&temp~1623545778~5132) (set! &loop~1623545778~5129 &temp~1623545778~5132) ((lambda () &loop~1623545778~5129))) (lambda (&x~1623545778~5137 &result~1623545778~5138) ((lambda (&match-tail~1623545778~5139) (set! &match-tail~1623545778~5139 (lambda () ((lambda (&x~1623545778~5193 &sk~1623545778~5194 &fk~1623545778~5195) (if (null? &x~1623545778~5193) (&sk~1623545778~5194) (&fk~1623545778~5195))) &x~1623545778~5137 (lambda () (apply &sk~1623545778~5122 (if (null? &result~1623545778~5138) (map (lambda (&ignore~1623545778~5200) (quote ())) (quote (xs ys))) (apply map list (reverse &result~1623545778~5138))))) (lambda () ((lambda (&x~1623545778~5208 &sk~1623545778~5209 &fk~1623545778~5210) (&sk~1623545778~5209)) &x~1623545778~5137 (lambda () (&fk~1623545778~5123)) (lambda () (ex:invalid-form &x~1623545778~5137))))))) (if (null? &x~1623545778~5137) (begin (&match-tail~1623545778~5139)) (if (pair? &x~1623545778~5137) (begin ((lambda (&x~1623545778~5146 &sk~1623545778~5147 &fk~1623545778~5148) (if (pair? &x~1623545778~5146) ((lambda (&x~1623545778~5151 &sk~1623545778~5152 &fk~1623545778~5153) (if (&identifier?~1623545778~2336 &x~1623545778~5151) ((lambda (&x~1623545778~5156 &sk~1623545778~5157 &fk~1623545778~5158) (&sk~1623545778~5157 &x~1623545778~5156)) &x~1623545778~5151 &sk~1623545778~5152 &fk~1623545778~5153) (&fk~1623545778~5153))) (car &x~1623545778~5146) (lambda (&xs~1623545778~5160) ((lambda (&x~1623545778~5162 &sk~1623545778~5163 &fk~1623545778~5164) (if (pair? &x~1623545778~5162) ((lambda (&x~1623545778~5167 &sk~1623545778~5168 &fk~1623545778~5169) (if (&identifier?~1623545778~2336 &x~1623545778~5167) ((lambda (&x~1623545778~5172 &sk~1623545778~5173 &fk~1623545778~5174) (&sk~1623545778~5173 &x~1623545778~5172)) &x~1623545778~5167 &sk~1623545778~5168 &fk~1623545778~5169) (&fk~1623545778~5169))) (car &x~1623545778~5162) (lambda (&ys~1623545778~5176) ((lambda (&x~1623545778~5178 &sk~1623545778~5179 &fk~1623545778~5180) (if (null? &x~1623545778~5178) (&sk~1623545778~5179) (&fk~1623545778~5180))) (cdr &x~1623545778~5162) (lambda () (&sk~1623545778~5163 &ys~1623545778~5176)) &fk~1623545778~5164)) &fk~1623545778~5164) (&fk~1623545778~5164))) (cdr &x~1623545778~5146) (lambda (&ys~1623545778~5184) (&sk~1623545778~5147 &xs~1623545778~5160 &ys~1623545778~5184)) &fk~1623545778~5148)) &fk~1623545778~5148) (&fk~1623545778~5148))) (car &x~1623545778~5137) (lambda &car-vars~1623545778~5186 (&loop~1623545778~5129 (cdr &x~1623545778~5137) (cons &car-vars~1623545778~5186 &result~1623545778~5138))) &match-tail~1623545778~5139)) (begin (&fk~1623545778~5123))))) ex:undefined)))) ex:undefined) &x~1623545778~5121 (quote ()))) (cdr &x~1623545778~5109) (lambda (&xs~1623545778~5216 &ys~1623545778~5217) (&sk~1623545778~5110 &xs~1623545778~5216 &ys~1623545778~5217)) &fk~1623545778~5111)) &fk~1623545778~5111) (&fk~1623545778~5111))) &set~1623545778~5067 (lambda (&xs~1623545778~5219 &ys~1623545778~5220) (map (lambda (&x~1623545778~5222 &y~1623545778~5223) (cons &y~1623545778~5223 (cons &x~1623545778~5222 (quote (0))))) &xs~1623545778~5219 &ys~1623545778~5220)) (lambda () ((lambda (&x~1623545778~5231 &sk~1623545778~5232 &fk~1623545778~5233) (&sk~1623545778~5232)) &set~1623545778~5067 (lambda () (&syntax-violation~1623545778~2445 (quote export) "Invalid export set" &set~1623545778~5067)) (lambda () (ex:invalid-form &set~1623545778~5067))))))))) (set! &scan-imports~1623545778~2432 (lambda (&specs~1623545778~5040) (((lambda (&loop~1623545778~5046) ((lambda (&temp~1623545778~5049) (set! &loop~1623545778~5046 &temp~1623545778~5049) ((lambda () &loop~1623545778~5046))) (lambda (&specs~1623545778~5054 &imported-libraries~1623545778~5055 &imports~1623545778~5056) (if (null? &specs~1623545778~5054) (values &imported-libraries~1623545778~5055 (&unify-imports~1623545778~2436 &imports~1623545778~5056)) (call-with-values (lambda () (&scan-import-spec~1623545778~2433 (car &specs~1623545778~5054))) (lambda (&library-ref~1623545778~5060 &levels~1623545778~5061 &more-imports~1623545778~5062) (&loop~1623545778~5046 (cdr &specs~1623545778~5054) (if &library-ref~1623545778~5060 (cons (cons &library-ref~1623545778~5060 &levels~1623545778~5061) &imported-libraries~1623545778~5055) &imported-libraries~1623545778~5055) (append &more-imports~1623545778~5062 &imports~1623545778~5056)))))))) ex:undefined) &specs~1623545778~5040 (quote ()) (quote ())))) (set! &scan-import-spec~1623545778~2433 (lambda (&spec~1623545778~4266) (call-with-values (lambda () (&scan-levels~1623545778~2434 &spec~1623545778~4266)) (lambda (&levels~1623545778~4269 &import-set~1623545778~4270) (((lambda (&loop~1623545778~4276) ((lambda (&temp~1623545778~4279) (set! &loop~1623545778~4276 &temp~1623545778~4279) ((lambda () &loop~1623545778~4276))) (lambda (&import-set~1623545778~4284 &adjuster~1623545778~4285) ((lambda (&check-presence~1623545778~4286) (set! &check-presence~1623545778~4286 (lambda (&names~1623545778~5030 &mappings~1623545778~5031 &from~1623545778~5032) (for-each (lambda (&name~1623545778~5034) (let ((x (assq &name~1623545778~5034 &mappings~1623545778~5031))) (if x x (&syntax-violation~1623545778~2445 &from~1623545778~5032 (string-append "Identifier not in set: " (&list->string~1623545778~2467 (map car &mappings~1623545778~5031) " ")) &import-set~1623545778~4284 &name~1623545778~5034)))) &names~1623545778~5030))) ((lambda (&x~1623545778~4299 &sk~1623545778~4300 &fk~1623545778~4301) (if (pair? &x~1623545778~4299) ((lambda (&x~1623545778~4304 &sk~1623545778~4305 &fk~1623545778~4306) (if (ex:free=? &x~1623545778~4304 (quote primitives)) (&sk~1623545778~4305) (&fk~1623545778~4306))) (car &x~1623545778~4299) (lambda () ((lambda (&x~1623545778~4311 &sk~1623545778~4312 &fk~1623545778~4313) (((lambda (&loop~1623545778~4319) ((lambda (&temp~1623545778~4322) (set! &loop~1623545778~4319 &temp~1623545778~4322) ((lambda () &loop~1623545778~4319))) (lambda (&x~1623545778~4327 &result~1623545778~4328) ((lambda (&match-tail~1623545778~4329) (set! &match-tail~1623545778~4329 (lambda () ((lambda (&x~1623545778~4352 &sk~1623545778~4353 &fk~1623545778~4354) (if (null? &x~1623545778~4352) (&sk~1623545778~4353) (&fk~1623545778~4354))) &x~1623545778~4327 (lambda () (apply &sk~1623545778~4312 (if (null? &result~1623545778~4328) (map (lambda (&ignore~1623545778~4359) (quote ())) (quote (xs))) (apply map list (reverse &result~1623545778~4328))))) (lambda () ((lambda (&x~1623545778~4367 &sk~1623545778~4368 &fk~1623545778~4369) (&sk~1623545778~4368)) &x~1623545778~4327 (lambda () (&fk~1623545778~4313)) (lambda () (ex:invalid-form &x~1623545778~4327))))))) (if (null? &x~1623545778~4327) (begin (&match-tail~1623545778~4329)) (if (pair? &x~1623545778~4327) (begin ((lambda (&x~1623545778~4336 &sk~1623545778~4337 &fk~1623545778~4338) (if (&identifier?~1623545778~2336 &x~1623545778~4336) ((lambda (&x~1623545778~4341 &sk~1623545778~4342 &fk~1623545778~4343) (&sk~1623545778~4342 &x~1623545778~4341)) &x~1623545778~4336 &sk~1623545778~4337 &fk~1623545778~4338) (&fk~1623545778~4338))) (car &x~1623545778~4327) (lambda &car-vars~1623545778~4345 (&loop~1623545778~4319 (cdr &x~1623545778~4327) (cons &car-vars~1623545778~4345 &result~1623545778~4328))) &match-tail~1623545778~4329)) (begin (&fk~1623545778~4313))))) ex:undefined)))) ex:undefined) &x~1623545778~4311 (quote ()))) (cdr &x~1623545778~4299) (lambda (&xs~1623545778~4375) (&sk~1623545778~4300 &xs~1623545778~4375)) &fk~1623545778~4301)) &fk~1623545778~4301) (&fk~1623545778~4301))) &import-set~1623545778~4284 (lambda (&xs~1623545778~4377) (values #f &levels~1623545778~4269 (map (lambda (&mapping~1623545778~4379) (cons (car &mapping~1623545778~4379) (&make-binding~1623545778~2349 (quote variable) (cdr &mapping~1623545778~4379) &levels~1623545778~4269 #f (quote ())))) (&adjuster~1623545778~4285 (map (lambda (&name~1623545778~4383) (cons &name~1623545778~4383 &name~1623545778~4383)) (&syntax->datum~1623545778~2375 &xs~1623545778~4377)))))) (lambda () ((lambda (&x~1623545778~4401 &sk~1623545778~4402 &fk~1623545778~4403) (if (pair? &x~1623545778~4401) ((lambda (&x~1623545778~4406 &sk~1623545778~4407 &fk~1623545778~4408) (if (ex:free=? &x~1623545778~4406 (quote only)) (&sk~1623545778~4407) (&fk~1623545778~4408))) (car &x~1623545778~4401) (lambda () ((lambda (&x~1623545778~4413 &sk~1623545778~4414 &fk~1623545778~4415) (if (pair? &x~1623545778~4413) ((lambda (&x~1623545778~4418 &sk~1623545778~4419 &fk~1623545778~4420) (&sk~1623545778~4419 &x~1623545778~4418)) (car &x~1623545778~4413) (lambda (&set~1623545778~4422) ((lambda (&x~1623545778~4424 &sk~1623545778~4425 &fk~1623545778~4426) (((lambda (&loop~1623545778~4432) ((lambda (&temp~1623545778~4435) (set! &loop~1623545778~4432 &temp~1623545778~4435) ((lambda () &loop~1623545778~4432))) (lambda (&x~1623545778~4440 &result~1623545778~4441) ((lambda (&match-tail~1623545778~4442) (set! &match-tail~1623545778~4442 (lambda () ((lambda (&x~1623545778~4465 &sk~1623545778~4466 &fk~1623545778~4467) (if (null? &x~1623545778~4465) (&sk~1623545778~4466) (&fk~1623545778~4467))) &x~1623545778~4440 (lambda () (apply &sk~1623545778~4425 (if (null? &result~1623545778~4441) (map (lambda (&ignore~1623545778~4472) (quote ())) (quote (xs))) (apply map list (reverse &result~1623545778~4441))))) (lambda () ((lambda (&x~1623545778~4480 &sk~1623545778~4481 &fk~1623545778~4482) (&sk~1623545778~4481)) &x~1623545778~4440 (lambda () (&fk~1623545778~4426)) (lambda () (ex:invalid-form &x~1623545778~4440))))))) (if (null? &x~1623545778~4440) (begin (&match-tail~1623545778~4442)) (if (pair? &x~1623545778~4440) (begin ((lambda (&x~1623545778~4449 &sk~1623545778~4450 &fk~1623545778~4451) (if (&identifier?~1623545778~2336 &x~1623545778~4449) ((lambda (&x~1623545778~4454 &sk~1623545778~4455 &fk~1623545778~4456) (&sk~1623545778~4455 &x~1623545778~4454)) &x~1623545778~4449 &sk~1623545778~4450 &fk~1623545778~4451) (&fk~1623545778~4451))) (car &x~1623545778~4440) (lambda &car-vars~1623545778~4458 (&loop~1623545778~4432 (cdr &x~1623545778~4440) (cons &car-vars~1623545778~4458 &result~1623545778~4441))) &match-tail~1623545778~4442)) (begin (&fk~1623545778~4426))))) ex:undefined)))) ex:undefined) &x~1623545778~4424 (quote ()))) (cdr &x~1623545778~4413) (lambda (&xs~1623545778~4488) (&sk~1623545778~4414 &set~1623545778~4422 &xs~1623545778~4488)) &fk~1623545778~4415)) &fk~1623545778~4415) (&fk~1623545778~4415))) (cdr &x~1623545778~4401) (lambda (&set~1623545778~4490 &xs~1623545778~4491) (&sk~1623545778~4402 &set~1623545778~4490 &xs~1623545778~4491)) &fk~1623545778~4403)) &fk~1623545778~4403) (&fk~1623545778~4403))) &import-set~1623545778~4284 (lambda (&set~1623545778~4493 &xs~1623545778~4494) ((lambda (&args~1623545778~4497) (&loop~1623545778~4276 &set~1623545778~4493 (&compose~1623545778~2468 &adjuster~1623545778~4285 (lambda (&mappings~1623545778~4499) (&check-presence~1623545778~4286 &args~1623545778~4497 &mappings~1623545778~4499 (quote only)) (filter (lambda (&mapping~1623545778~4501) (memq (car &mapping~1623545778~4501) &args~1623545778~4497)) &mappings~1623545778~4499))))) (&syntax->datum~1623545778~2375 &xs~1623545778~4494))) (lambda () ((lambda (&x~1623545778~4520 &sk~1623545778~4521 &fk~1623545778~4522) (if (pair? &x~1623545778~4520) ((lambda (&x~1623545778~4525 &sk~1623545778~4526 &fk~1623545778~4527) (if (ex:free=? &x~1623545778~4525 (quote except)) (&sk~1623545778~4526) (&fk~1623545778~4527))) (car &x~1623545778~4520) (lambda () ((lambda (&x~1623545778~4532 &sk~1623545778~4533 &fk~1623545778~4534) (if (pair? &x~1623545778~4532) ((lambda (&x~1623545778~4537 &sk~1623545778~4538 &fk~1623545778~4539) (&sk~1623545778~4538 &x~1623545778~4537)) (car &x~1623545778~4532) (lambda (&set~1623545778~4541) ((lambda (&x~1623545778~4543 &sk~1623545778~4544 &fk~1623545778~4545) (((lambda (&loop~1623545778~4551) ((lambda (&temp~1623545778~4554) (set! &loop~1623545778~4551 &temp~1623545778~4554) ((lambda () &loop~1623545778~4551))) (lambda (&x~1623545778~4559 &result~1623545778~4560) ((lambda (&match-tail~1623545778~4561) (set! &match-tail~1623545778~4561 (lambda () ((lambda (&x~1623545778~4584 &sk~1623545778~4585 &fk~1623545778~4586) (if (null? &x~1623545778~4584) (&sk~1623545778~4585) (&fk~1623545778~4586))) &x~1623545778~4559 (lambda () (apply &sk~1623545778~4544 (if (null? &result~1623545778~4560) (map (lambda (&ignore~1623545778~4591) (quote ())) (quote (xs))) (apply map list (reverse &result~1623545778~4560))))) (lambda () ((lambda (&x~1623545778~4599 &sk~1623545778~4600 &fk~1623545778~4601) (&sk~1623545778~4600)) &x~1623545778~4559 (lambda () (&fk~1623545778~4545)) (lambda () (ex:invalid-form &x~1623545778~4559))))))) (if (null? &x~1623545778~4559) (begin (&match-tail~1623545778~4561)) (if (pair? &x~1623545778~4559) (begin ((lambda (&x~1623545778~4568 &sk~1623545778~4569 &fk~1623545778~4570) (if (&identifier?~1623545778~2336 &x~1623545778~4568) ((lambda (&x~1623545778~4573 &sk~1623545778~4574 &fk~1623545778~4575) (&sk~1623545778~4574 &x~1623545778~4573)) &x~1623545778~4568 &sk~1623545778~4569 &fk~1623545778~4570) (&fk~1623545778~4570))) (car &x~1623545778~4559) (lambda &car-vars~1623545778~4577 (&loop~1623545778~4551 (cdr &x~1623545778~4559) (cons &car-vars~1623545778~4577 &result~1623545778~4560))) &match-tail~1623545778~4561)) (begin (&fk~1623545778~4545))))) ex:undefined)))) ex:undefined) &x~1623545778~4543 (quote ()))) (cdr &x~1623545778~4532) (lambda (&xs~1623545778~4607) (&sk~1623545778~4533 &set~1623545778~4541 &xs~1623545778~4607)) &fk~1623545778~4534)) &fk~1623545778~4534) (&fk~1623545778~4534))) (cdr &x~1623545778~4520) (lambda (&set~1623545778~4609 &xs~1623545778~4610) (&sk~1623545778~4521 &set~1623545778~4609 &xs~1623545778~4610)) &fk~1623545778~4522)) &fk~1623545778~4522) (&fk~1623545778~4522))) &import-set~1623545778~4284 (lambda (&set~1623545778~4612 &xs~1623545778~4613) ((lambda (&args~1623545778~4616) (&loop~1623545778~4276 &set~1623545778~4612 (&compose~1623545778~2468 &adjuster~1623545778~4285 (lambda (&mappings~1623545778~4618) (&check-presence~1623545778~4286 &args~1623545778~4616 &mappings~1623545778~4618 (quote except)) (filter (lambda (&mapping~1623545778~4620) (not (memq (car &mapping~1623545778~4620) &args~1623545778~4616))) &mappings~1623545778~4618))))) (&syntax->datum~1623545778~2375 &xs~1623545778~4613))) (lambda () ((lambda (&x~1623545778~4641 &sk~1623545778~4642 &fk~1623545778~4643) (if (pair? &x~1623545778~4641) ((lambda (&x~1623545778~4646 &sk~1623545778~4647 &fk~1623545778~4648) (if (ex:free=? &x~1623545778~4646 (quote prefix)) (&sk~1623545778~4647) (&fk~1623545778~4648))) (car &x~1623545778~4641) (lambda () ((lambda (&x~1623545778~4653 &sk~1623545778~4654 &fk~1623545778~4655) (if (pair? &x~1623545778~4653) ((lambda (&x~1623545778~4658 &sk~1623545778~4659 &fk~1623545778~4660) (&sk~1623545778~4659 &x~1623545778~4658)) (car &x~1623545778~4653) (lambda (&set~1623545778~4662) ((lambda (&x~1623545778~4664 &sk~1623545778~4665 &fk~1623545778~4666) (if (pair? &x~1623545778~4664) ((lambda (&x~1623545778~4669 &sk~1623545778~4670 &fk~1623545778~4671) (if (&identifier?~1623545778~2336 &x~1623545778~4669) ((lambda (&x~1623545778~4674 &sk~1623545778~4675 &fk~1623545778~4676) (&sk~1623545778~4675 &x~1623545778~4674)) &x~1623545778~4669 &sk~1623545778~4670 &fk~1623545778~4671) (&fk~1623545778~4671))) (car &x~1623545778~4664) (lambda (&pre~1623545778~4678) ((lambda (&x~1623545778~4680 &sk~1623545778~4681 &fk~1623545778~4682) (if (null? &x~1623545778~4680) (&sk~1623545778~4681) (&fk~1623545778~4682))) (cdr &x~1623545778~4664) (lambda () (&sk~1623545778~4665 &pre~1623545778~4678)) &fk~1623545778~4666)) &fk~1623545778~4666) (&fk~1623545778~4666))) (cdr &x~1623545778~4653) (lambda (&pre~1623545778~4686) (&sk~1623545778~4654 &set~1623545778~4662 &pre~1623545778~4686)) &fk~1623545778~4655)) &fk~1623545778~4655) (&fk~1623545778~4655))) (cdr &x~1623545778~4641) (lambda (&set~1623545778~4688 &pre~1623545778~4689) (&sk~1623545778~4642 &set~1623545778~4688 &pre~1623545778~4689)) &fk~1623545778~4643)) &fk~1623545778~4643) (&fk~1623545778~4643))) &import-set~1623545778~4284 (lambda (&set~1623545778~4691 &pre~1623545778~4692) (&loop~1623545778~4276 &set~1623545778~4691 (&compose~1623545778~2468 &adjuster~1623545778~4285 (lambda (&mappings~1623545778~4694) (map (lambda (&mapping~1623545778~4696) (cons (string->symbol (string-append (symbol->string (&syntax->datum~1623545778~2375 &pre~1623545778~4692)) (symbol->string (car &mapping~1623545778~4696)))) (cdr &mapping~1623545778~4696))) &mappings~1623545778~4694))))) (lambda () ((lambda (&x~1623545778~4724 &sk~1623545778~4725 &fk~1623545778~4726) (if (pair? &x~1623545778~4724) ((lambda (&x~1623545778~4729 &sk~1623545778~4730 &fk~1623545778~4731) (if (ex:free=? &x~1623545778~4729 (quote rename)) (&sk~1623545778~4730) (&fk~1623545778~4731))) (car &x~1623545778~4724) (lambda () ((lambda (&x~1623545778~4736 &sk~1623545778~4737 &fk~1623545778~4738) (if (pair? &x~1623545778~4736) ((lambda (&x~1623545778~4741 &sk~1623545778~4742 &fk~1623545778~4743) (&sk~1623545778~4742 &x~1623545778~4741)) (car &x~1623545778~4736) (lambda (&set~1623545778~4745) ((lambda (&x~1623545778~4747 &sk~1623545778~4748 &fk~1623545778~4749) (((lambda (&loop~1623545778~4755) ((lambda (&temp~1623545778~4758) (set! &loop~1623545778~4755 &temp~1623545778~4758) ((lambda () &loop~1623545778~4755))) (lambda (&x~1623545778~4763 &result~1623545778~4764) ((lambda (&match-tail~1623545778~4765) (set! &match-tail~1623545778~4765 (lambda () ((lambda (&x~1623545778~4819 &sk~1623545778~4820 &fk~1623545778~4821) (if (null? &x~1623545778~4819) (&sk~1623545778~4820) (&fk~1623545778~4821))) &x~1623545778~4763 (lambda () (apply &sk~1623545778~4748 (if (null? &result~1623545778~4764) (map (lambda (&ignore~1623545778~4826) (quote ())) (quote (xs ys))) (apply map list (reverse &result~1623545778~4764))))) (lambda () ((lambda (&x~1623545778~4834 &sk~1623545778~4835 &fk~1623545778~4836) (&sk~1623545778~4835)) &x~1623545778~4763 (lambda () (&fk~1623545778~4749)) (lambda () (ex:invalid-form &x~1623545778~4763))))))) (if (null? &x~1623545778~4763) (begin (&match-tail~1623545778~4765)) (if (pair? &x~1623545778~4763) (begin ((lambda (&x~1623545778~4772 &sk~1623545778~4773 &fk~1623545778~4774) (if (pair? &x~1623545778~4772) ((lambda (&x~1623545778~4777 &sk~1623545778~4778 &fk~1623545778~4779) (if (&identifier?~1623545778~2336 &x~1623545778~4777) ((lambda (&x~1623545778~4782 &sk~1623545778~4783 &fk~1623545778~4784) (&sk~1623545778~4783 &x~1623545778~4782)) &x~1623545778~4777 &sk~1623545778~4778 &fk~1623545778~4779) (&fk~1623545778~4779))) (car &x~1623545778~4772) (lambda (&xs~1623545778~4786) ((lambda (&x~1623545778~4788 &sk~1623545778~4789 &fk~1623545778~4790) (if (pair? &x~1623545778~4788) ((lambda (&x~1623545778~4793 &sk~1623545778~4794 &fk~1623545778~4795) (if (&identifier?~1623545778~2336 &x~1623545778~4793) ((lambda (&x~1623545778~4798 &sk~1623545778~4799 &fk~1623545778~4800) (&sk~1623545778~4799 &x~1623545778~4798)) &x~1623545778~4793 &sk~1623545778~4794 &fk~1623545778~4795) (&fk~1623545778~4795))) (car &x~1623545778~4788) (lambda (&ys~1623545778~4802) ((lambda (&x~1623545778~4804 &sk~1623545778~4805 &fk~1623545778~4806) (if (null? &x~1623545778~4804) (&sk~1623545778~4805) (&fk~1623545778~4806))) (cdr &x~1623545778~4788) (lambda () (&sk~1623545778~4789 &ys~1623545778~4802)) &fk~1623545778~4790)) &fk~1623545778~4790) (&fk~1623545778~4790))) (cdr &x~1623545778~4772) (lambda (&ys~1623545778~4810) (&sk~1623545778~4773 &xs~1623545778~4786 &ys~1623545778~4810)) &fk~1623545778~4774)) &fk~1623545778~4774) (&fk~1623545778~4774))) (car &x~1623545778~4763) (lambda &car-vars~1623545778~4812 (&loop~1623545778~4755 (cdr &x~1623545778~4763) (cons &car-vars~1623545778~4812 &result~1623545778~4764))) &match-tail~1623545778~4765)) (begin (&fk~1623545778~4749))))) ex:undefined)))) ex:undefined) &x~1623545778~4747 (quote ()))) (cdr &x~1623545778~4736) (lambda (&xs~1623545778~4842 &ys~1623545778~4843) (&sk~1623545778~4737 &set~1623545778~4745 &xs~1623545778~4842 &ys~1623545778~4843)) &fk~1623545778~4738)) &fk~1623545778~4738) (&fk~1623545778~4738))) (cdr &x~1623545778~4724) (lambda (&set~1623545778~4845 &xs~1623545778~4846 &ys~1623545778~4847) (&sk~1623545778~4725 &set~1623545778~4845 &xs~1623545778~4846 &ys~1623545778~4847)) &fk~1623545778~4726)) &fk~1623545778~4726) (&fk~1623545778~4726))) &import-set~1623545778~4284 (lambda (&set~1623545778~4849 &xs~1623545778~4850 &ys~1623545778~4851) ((lambda (&args~1623545778~4854) (&loop~1623545778~4276 &set~1623545778~4849 (&compose~1623545778~2468 &adjuster~1623545778~4285 (lambda (&mappings~1623545778~4856) (&check-presence~1623545778~4286 (map car &args~1623545778~4854) &mappings~1623545778~4856 (quote rename)) (map (lambda (&mapping~1623545778~4858) (cons ((lambda (&t~1623545778~4862) (if &t~1623545778~4862 (cadr &t~1623545778~4862) (begin (car &mapping~1623545778~4858)))) (assq (car &mapping~1623545778~4858) &args~1623545778~4854)) (cdr &mapping~1623545778~4858))) &mappings~1623545778~4856))))) (&syntax->datum~1623545778~2375 (cddr &import-set~1623545778~4284)))) (lambda () ((lambda (&x~1623545778~4875 &sk~1623545778~4876 &fk~1623545778~4877) (if (pair? &x~1623545778~4875) ((lambda (&x~1623545778~4880 &sk~1623545778~4881 &fk~1623545778~4882) (if (ex:free=? &x~1623545778~4880 (quote primitives)) (&sk~1623545778~4881) (&fk~1623545778~4882))) (car &x~1623545778~4875) (lambda () ((lambda (&x~1623545778~4887 &sk~1623545778~4888 &fk~1623545778~4889) (&sk~1623545778~4888)) (cdr &x~1623545778~4875) (lambda () (&sk~1623545778~4876)) &fk~1623545778~4877)) &fk~1623545778~4877) (&fk~1623545778~4877))) &import-set~1623545778~4284 (lambda () (&invalid-form~1623545778~2470 &import-set~1623545778~4284)) (lambda () ((lambda (&x~1623545778~4901 &sk~1623545778~4902 &fk~1623545778~4903) (if (pair? &x~1623545778~4901) ((lambda (&x~1623545778~4906 &sk~1623545778~4907 &fk~1623545778~4908) (if (ex:free=? &x~1623545778~4906 (quote only)) (&sk~1623545778~4907) (&fk~1623545778~4908))) (car &x~1623545778~4901) (lambda () ((lambda (&x~1623545778~4913 &sk~1623545778~4914 &fk~1623545778~4915) (&sk~1623545778~4914)) (cdr &x~1623545778~4901) (lambda () (&sk~1623545778~4902)) &fk~1623545778~4903)) &fk~1623545778~4903) (&fk~1623545778~4903))) &import-set~1623545778~4284 (lambda () (&invalid-form~1623545778~2470 &import-set~1623545778~4284)) (lambda () ((lambda (&x~1623545778~4927 &sk~1623545778~4928 &fk~1623545778~4929) (if (pair? &x~1623545778~4927) ((lambda (&x~1623545778~4932 &sk~1623545778~4933 &fk~1623545778~4934) (if (ex:free=? &x~1623545778~4932 (quote except)) (&sk~1623545778~4933) (&fk~1623545778~4934))) (car &x~1623545778~4927) (lambda () ((lambda (&x~1623545778~4939 &sk~1623545778~4940 &fk~1623545778~4941) (&sk~1623545778~4940)) (cdr &x~1623545778~4927) (lambda () (&sk~1623545778~4928)) &fk~1623545778~4929)) &fk~1623545778~4929) (&fk~1623545778~4929))) &import-set~1623545778~4284 (lambda () (&invalid-form~1623545778~2470 &import-set~1623545778~4284)) (lambda () ((lambda (&x~1623545778~4953 &sk~1623545778~4954 &fk~1623545778~4955) (if (pair? &x~1623545778~4953) ((lambda (&x~1623545778~4958 &sk~1623545778~4959 &fk~1623545778~4960) (if (ex:free=? &x~1623545778~4958 (quote prefix)) (&sk~1623545778~4959) (&fk~1623545778~4960))) (car &x~1623545778~4953) (lambda () ((lambda (&x~1623545778~4965 &sk~1623545778~4966 &fk~1623545778~4967) (&sk~1623545778~4966)) (cdr &x~1623545778~4953) (lambda () (&sk~1623545778~4954)) &fk~1623545778~4955)) &fk~1623545778~4955) (&fk~1623545778~4955))) &import-set~1623545778~4284 (lambda () (&invalid-form~1623545778~2470 &import-set~1623545778~4284)) (lambda () ((lambda (&x~1623545778~4979 &sk~1623545778~4980 &fk~1623545778~4981) (if (pair? &x~1623545778~4979) ((lambda (&x~1623545778~4984 &sk~1623545778~4985 &fk~1623545778~4986) (if (ex:free=? &x~1623545778~4984 (quote rename)) (&sk~1623545778~4985) (&fk~1623545778~4986))) (car &x~1623545778~4979) (lambda () ((lambda (&x~1623545778~4991 &sk~1623545778~4992 &fk~1623545778~4993) (&sk~1623545778~4992)) (cdr &x~1623545778~4979) (lambda () (&sk~1623545778~4980)) &fk~1623545778~4981)) &fk~1623545778~4981) (&fk~1623545778~4981))) &import-set~1623545778~4284 (lambda () (&invalid-form~1623545778~2470 &import-set~1623545778~4284)) (lambda () ((lambda (&x~1623545778~5001 &sk~1623545778~5002 &fk~1623545778~5003) (&sk~1623545778~5002)) &import-set~1623545778~4284 (lambda () ((lambda (&library-ref~1623545778~5007) (if &library-ref~1623545778~5007 ((lambda (&library~1623545778~5012) ((lambda (&exports~1623545778~5015) ((lambda (&imports~1623545778~5018) (values (&syntax->datum~1623545778~2375 &library-ref~1623545778~5007) &levels~1623545778~4269 &imports~1623545778~5018)) (map (lambda (&mapping~1623545778~5020) (cons (car &mapping~1623545778~5020) ((lambda (&binding~1623545778~5023) (&make-binding~1623545778~2349 (&binding-type~1623545778~2350 &binding~1623545778~5023) (&binding-name~1623545778~2351 &binding~1623545778~5023) (&compose-levels~1623545778~2435 &levels~1623545778~4269 (&binding-levels~1623545778~2352 &binding~1623545778~5023)) (&binding-mutable?~1623545778~2353 &binding~1623545778~5023) (&binding-library~1623545778~2355 &binding~1623545778~5023))) (cdr (assq (cdr &mapping~1623545778~5020) &exports~1623545778~5015))))) (&adjuster~1623545778~4285 (map (lambda (&name~1623545778~5025) (cons &name~1623545778~5025 &name~1623545778~5025)) (map car &exports~1623545778~5015)))))) (ex:library-exports &library~1623545778~5012))) (ex:lookup-library (&syntax->datum~1623545778~2375 &library-ref~1623545778~5007))) (&syntax-violation~1623545778~2445 (quote import) "Invalid import set" &import-set~1623545778~4284))) (&library-ref~1623545778~2438 &import-set~1623545778~4284))) (lambda () (ex:invalid-form &import-set~1623545778~4284)))))))))))))))))))))))) ex:undefined)))) ex:undefined) &import-set~1623545778~4270 (lambda (&set~1623545778~5038) &set~1623545778~5038)))))) (set! &scan-levels~1623545778~2434 (lambda (&spec~1623545778~4056) ((lambda (&x~1623545778~4071 &sk~1623545778~4072 &fk~1623545778~4073) (if (pair? &x~1623545778~4071) ((lambda (&x~1623545778~4076 &sk~1623545778~4077 &fk~1623545778~4078) (if (ex:free=? &x~1623545778~4076 (quote for)) (&sk~1623545778~4077) (&fk~1623545778~4078))) (car &x~1623545778~4071) (lambda () ((lambda (&x~1623545778~4083 &sk~1623545778~4084 &fk~1623545778~4085) (if (pair? &x~1623545778~4083) ((lambda (&x~1623545778~4088 &sk~1623545778~4089 &fk~1623545778~4090) (&sk~1623545778~4089 &x~1623545778~4088)) (car &x~1623545778~4083) (lambda (&set~1623545778~4092) ((lambda (&x~1623545778~4094 &sk~1623545778~4095 &fk~1623545778~4096) (((lambda (&loop~1623545778~4102) ((lambda (&temp~1623545778~4105) (set! &loop~1623545778~4102 &temp~1623545778~4105) ((lambda () &loop~1623545778~4102))) (lambda (&x~1623545778~4110 &result~1623545778~4111) ((lambda (&match-tail~1623545778~4112) (set! &match-tail~1623545778~4112 (lambda () ((lambda (&x~1623545778~4130 &sk~1623545778~4131 &fk~1623545778~4132) (if (null? &x~1623545778~4130) (&sk~1623545778~4131) (&fk~1623545778~4132))) &x~1623545778~4110 (lambda () (apply &sk~1623545778~4095 (if (null? &result~1623545778~4111) (map (lambda (&ignore~1623545778~4137) (quote ())) (quote (levels))) (apply map list (reverse &result~1623545778~4111))))) (lambda () ((lambda (&x~1623545778~4145 &sk~1623545778~4146 &fk~1623545778~4147) (&sk~1623545778~4146)) &x~1623545778~4110 (lambda () (&fk~1623545778~4096)) (lambda () (ex:invalid-form &x~1623545778~4110))))))) (if (null? &x~1623545778~4110) (begin (&match-tail~1623545778~4112)) (if (pair? &x~1623545778~4110) (begin ((lambda (&x~1623545778~4119 &sk~1623545778~4120 &fk~1623545778~4121) (&sk~1623545778~4120 &x~1623545778~4119)) (car &x~1623545778~4110) (lambda &car-vars~1623545778~4123 (&loop~1623545778~4102 (cdr &x~1623545778~4110) (cons &car-vars~1623545778~4123 &result~1623545778~4111))) &match-tail~1623545778~4112)) (begin (&fk~1623545778~4096))))) ex:undefined)))) ex:undefined) &x~1623545778~4094 (quote ()))) (cdr &x~1623545778~4083) (lambda (&levels~1623545778~4153) (&sk~1623545778~4084 &set~1623545778~4092 &levels~1623545778~4153)) &fk~1623545778~4085)) &fk~1623545778~4085) (&fk~1623545778~4085))) (cdr &x~1623545778~4071) (lambda (&set~1623545778~4155 &levels~1623545778~4156) (&sk~1623545778~4072 &set~1623545778~4155 &levels~1623545778~4156)) &fk~1623545778~4073)) &fk~1623545778~4073) (&fk~1623545778~4073))) &spec~1623545778~4056 (lambda (&set~1623545778~4158 &levels~1623545778~4159) ((lambda (&levels~1623545778~4162) (&check-set?~1623545778~2464 &levels~1623545778~4162 = (lambda (&dup~1623545778~4164) (&syntax-violation~1623545778~2445 (quote for) "Repeated level in for spec" &spec~1623545778~4056 &dup~1623545778~4164))) (values &levels~1623545778~4162 &set~1623545778~4158)) (map (lambda (&level~1623545778~4167) ((lambda (&x~1623545778~4172 &sk~1623545778~4173 &fk~1623545778~4174) (if (ex:free=? &x~1623545778~4172 (quote run)) (&sk~1623545778~4173) (&fk~1623545778~4174))) &level~1623545778~4167 (lambda () 0) (lambda () ((lambda (&x~1623545778~4183 &sk~1623545778~4184 &fk~1623545778~4185) (if (ex:free=? &x~1623545778~4183 (quote expand)) (&sk~1623545778~4184) (&fk~1623545778~4185))) &level~1623545778~4167 (lambda () 1) (lambda () ((lambda (&x~1623545778~4204 &sk~1623545778~4205 &fk~1623545778~4206) (if (pair? &x~1623545778~4204) ((lambda (&x~1623545778~4209 &sk~1623545778~4210 &fk~1623545778~4211) (if (ex:free=? &x~1623545778~4209 (quote meta)) (&sk~1623545778~4210) (&fk~1623545778~4211))) (car &x~1623545778~4204) (lambda () ((lambda (&x~1623545778~4216 &sk~1623545778~4217 &fk~1623545778~4218) (if (pair? &x~1623545778~4216) ((lambda (&x~1623545778~4221 &sk~1623545778~4222 &fk~1623545778~4223) (if (integer? &x~1623545778~4221) ((lambda (&x~1623545778~4226 &sk~1623545778~4227 &fk~1623545778~4228) (&sk~1623545778~4227 &x~1623545778~4226)) &x~1623545778~4221 &sk~1623545778~4222 &fk~1623545778~4223) (&fk~1623545778~4223))) (car &x~1623545778~4216) (lambda (&n~1623545778~4230) ((lambda (&x~1623545778~4232 &sk~1623545778~4233 &fk~1623545778~4234) (if (null? &x~1623545778~4232) (&sk~1623545778~4233) (&fk~1623545778~4234))) (cdr &x~1623545778~4216) (lambda () (&sk~1623545778~4217 &n~1623545778~4230)) &fk~1623545778~4218)) &fk~1623545778~4218) (&fk~1623545778~4218))) (cdr &x~1623545778~4204) (lambda (&n~1623545778~4238) (&sk~1623545778~4205 &n~1623545778~4238)) &fk~1623545778~4206)) &fk~1623545778~4206) (&fk~1623545778~4206))) &level~1623545778~4167 (lambda (&n~1623545778~4240) &n~1623545778~4240) (lambda () ((lambda (&x~1623545778~4246 &sk~1623545778~4247 &fk~1623545778~4248) (&sk~1623545778~4247)) &level~1623545778~4167 (lambda () (&syntax-violation~1623545778~2445 (quote for) "Invalid level in for spec" &spec~1623545778~4056 &level~1623545778~4167)) (lambda () (ex:invalid-form &level~1623545778~4167)))))))))) &levels~1623545778~4159))) (lambda () ((lambda (&x~1623545778~4258 &sk~1623545778~4259 &fk~1623545778~4260) (&sk~1623545778~4259)) &spec~1623545778~4056 (lambda () (values (quote (0)) &spec~1623545778~4056)) (lambda () (ex:invalid-form &spec~1623545778~4056))))))) (set! &compose-levels~1623545778~2435 (lambda (&levels~1623545778~4049 &levels*~1623545778~4050) (apply &unionv~1623545778~2465 (map (lambda (&level~1623545778~4052) (map (lambda (&level*~1623545778~4054) (+ &level~1623545778~4052 &level*~1623545778~4054)) &levels*~1623545778~4050)) &levels~1623545778~4049)))) (set! &unify-imports~1623545778~2436 (lambda (&imports~1623545778~4015) ((lambda (&seen~1623545778~4018) (((lambda (&loop~1623545778~4024) ((lambda (&temp~1623545778~4027) (set! &loop~1623545778~4024 &temp~1623545778~4027) ((lambda () &loop~1623545778~4024))) (lambda (&imports~1623545778~4032) (if (null? &imports~1623545778~4032) &seen~1623545778~4018 ((lambda (&mapping~1623545778~4037) ((lambda (&probe~1623545778~4040) (if &probe~1623545778~4040 (begin (let ((x (eq? (&binding-name~1623545778~2351 (cdr &mapping~1623545778~4037)) (&binding-name~1623545778~2351 (cdr &probe~1623545778~4040))))) (if x x (&syntax-violation~1623545778~2445 (quote import) (string-append "Different bindings for identifier imported from libraries (" (&list->string~1623545778~2467 (&binding-library~1623545778~2355 (cdr &mapping~1623545778~4037)) " ") ") and (" (&list->string~1623545778~2467 (&binding-library~1623545778~2355 (cdr &probe~1623545778~4040)) " ") ")") (car &mapping~1623545778~4037)))) (set-cdr! &probe~1623545778~4040 (&make-binding~1623545778~2349 (&binding-type~1623545778~2350 (cdr &probe~1623545778~4040)) (&binding-name~1623545778~2351 (cdr &probe~1623545778~4040)) (&unionv~1623545778~2465 (&binding-levels~1623545778~2352 (cdr &probe~1623545778~4040)) (&binding-levels~1623545778~2352 (cdr &mapping~1623545778~4037))) (&binding-mutable?~1623545778~2353 (cdr &probe~1623545778~4040)) (&binding-library~1623545778~2355 (cdr &probe~1623545778~4040))))) (set! &seen~1623545778~4018 (cons &mapping~1623545778~4037 &seen~1623545778~4018))) (&loop~1623545778~4024 (cdr &imports~1623545778~4032))) (assq (car &mapping~1623545778~4037) &seen~1623545778~4018))) (car &imports~1623545778~4032)))))) ex:undefined) &imports~1623545778~4015)) (quote ())))) (set! &scan-library-name~1623545778~2437 (lambda (&e~1623545778~4013) (&library-ref-helper~1623545778~2439 &e~1623545778~4013 &version?~1623545778~2440))) (set! &library-ref~1623545778~2438 (lambda (&e~1623545778~3930) (&library-ref-helper~1623545778~2439 ((lambda (&x~1623545778~3943 &sk~1623545778~3944 &fk~1623545778~3945) (if (pair? &x~1623545778~3943) ((lambda (&x~1623545778~3948 &sk~1623545778~3949 &fk~1623545778~3950) (if (ex:free=? &x~1623545778~3948 (quote library)) (&sk~1623545778~3949) (&fk~1623545778~3950))) (car &x~1623545778~3943) (lambda () ((lambda (&x~1623545778~3955 &sk~1623545778~3956 &fk~1623545778~3957) (if (pair? &x~1623545778~3955) ((lambda (&x~1623545778~3960 &sk~1623545778~3961 &fk~1623545778~3962) (&sk~1623545778~3961 &x~1623545778~3960)) (car &x~1623545778~3955) (lambda (&name~1623545778~3964) ((lambda (&x~1623545778~3966 &sk~1623545778~3967 &fk~1623545778~3968) (if (null? &x~1623545778~3966) (&sk~1623545778~3967) (&fk~1623545778~3968))) (cdr &x~1623545778~3955) (lambda () (&sk~1623545778~3956 &name~1623545778~3964)) &fk~1623545778~3957)) &fk~1623545778~3957) (&fk~1623545778~3957))) (cdr &x~1623545778~3943) (lambda (&name~1623545778~3972) (&sk~1623545778~3944 &name~1623545778~3972)) &fk~1623545778~3945)) &fk~1623545778~3945) (&fk~1623545778~3945))) &e~1623545778~3930 (lambda (&name~1623545778~3974) &name~1623545778~3974) (lambda () ((lambda (&x~1623545778~3984 &sk~1623545778~3985 &fk~1623545778~3986) (if (pair? &x~1623545778~3984) ((lambda (&x~1623545778~3989 &sk~1623545778~3990 &fk~1623545778~3991) (if (ex:free=? &x~1623545778~3989 (quote library)) (&sk~1623545778~3990) (&fk~1623545778~3991))) (car &x~1623545778~3984) (lambda () ((lambda (&x~1623545778~3996 &sk~1623545778~3997 &fk~1623545778~3998) (&sk~1623545778~3997)) (cdr &x~1623545778~3984) (lambda () (&sk~1623545778~3985)) &fk~1623545778~3986)) &fk~1623545778~3986) (&fk~1623545778~3986))) &e~1623545778~3930 (lambda () (&invalid-form~1623545778~2470 &e~1623545778~3930)) (lambda () ((lambda (&x~1623545778~4006 &sk~1623545778~4007 &fk~1623545778~4008) (&sk~1623545778~4007)) &e~1623545778~3930 (lambda () &e~1623545778~3930) (lambda () (ex:invalid-form &e~1623545778~3930))))))) &version-reference?~1623545778~2442))) (set! &library-ref-helper~1623545778~2439 (lambda (&e~1623545778~3746 &version?~1623545778~3747) ((lambda (&x~1623545778~3756 &sk~1623545778~3757 &fk~1623545778~3758) (((lambda (&loop~1623545778~3764) ((lambda (&temp~1623545778~3767) (set! &loop~1623545778~3764 &temp~1623545778~3767) ((lambda () &loop~1623545778~3764))) (lambda (&x~1623545778~3772 &result~1623545778~3773) ((lambda (&match-tail~1623545778~3774) (set! &match-tail~1623545778~3774 (lambda () ((lambda (&x~1623545778~3797 &sk~1623545778~3798 &fk~1623545778~3799) (if (null? &x~1623545778~3797) (&sk~1623545778~3798) (&fk~1623545778~3799))) &x~1623545778~3772 (lambda () (apply &sk~1623545778~3757 (if (null? &result~1623545778~3773) (map (lambda (&ignore~1623545778~3804) (quote ())) (quote (ids))) (apply map list (reverse &result~1623545778~3773))))) (lambda () ((lambda (&x~1623545778~3812 &sk~1623545778~3813 &fk~1623545778~3814) (&sk~1623545778~3813)) &x~1623545778~3772 (lambda () (&fk~1623545778~3758)) (lambda () (ex:invalid-form &x~1623545778~3772))))))) (if (null? &x~1623545778~3772) (begin (&match-tail~1623545778~3774)) (if (pair? &x~1623545778~3772) (begin ((lambda (&x~1623545778~3781 &sk~1623545778~3782 &fk~1623545778~3783) (if (&identifier?~1623545778~2336 &x~1623545778~3781) ((lambda (&x~1623545778~3786 &sk~1623545778~3787 &fk~1623545778~3788) (&sk~1623545778~3787 &x~1623545778~3786)) &x~1623545778~3781 &sk~1623545778~3782 &fk~1623545778~3783) (&fk~1623545778~3783))) (car &x~1623545778~3772) (lambda &car-vars~1623545778~3790 (&loop~1623545778~3764 (cdr &x~1623545778~3772) (cons &car-vars~1623545778~3790 &result~1623545778~3773))) &match-tail~1623545778~3774)) (begin (&fk~1623545778~3758))))) ex:undefined)))) ex:undefined) &x~1623545778~3756 (quote ()))) &e~1623545778~3746 (lambda (&ids~1623545778~3820) &ids~1623545778~3820) (lambda () ((lambda (&x~1623545778~3830 &sk~1623545778~3831 &fk~1623545778~3832) (((lambda (&loop~1623545778~3838) ((lambda (&temp~1623545778~3841) (set! &loop~1623545778~3838 &temp~1623545778~3841) ((lambda () &loop~1623545778~3838))) (lambda (&x~1623545778~3846 &result~1623545778~3847) ((lambda (&match-tail~1623545778~3848) (set! &match-tail~1623545778~3848 (lambda () ((lambda (&x~1623545778~3877 &sk~1623545778~3878 &fk~1623545778~3879) (if (pair? &x~1623545778~3877) ((lambda (&x~1623545778~3882 &sk~1623545778~3883 &fk~1623545778~3884) (if (&version?~1623545778~3747 &x~1623545778~3882) ((lambda (&x~1623545778~3887 &sk~1623545778~3888 &fk~1623545778~3889) (&sk~1623545778~3888)) &x~1623545778~3882 &sk~1623545778~3883 &fk~1623545778~3884) (&fk~1623545778~3884))) (car &x~1623545778~3877) (lambda () ((lambda (&x~1623545778~3892 &sk~1623545778~3893 &fk~1623545778~3894) (if (null? &x~1623545778~3892) (&sk~1623545778~3893) (&fk~1623545778~3894))) (cdr &x~1623545778~3877) (lambda () (&sk~1623545778~3878)) &fk~1623545778~3879)) &fk~1623545778~3879) (&fk~1623545778~3879))) &x~1623545778~3846 (lambda () (apply &sk~1623545778~3831 (if (null? &result~1623545778~3847) (map (lambda (&ignore~1623545778~3900) (quote ())) (quote (ids))) (apply map list (reverse &result~1623545778~3847))))) (lambda () ((lambda (&x~1623545778~3908 &sk~1623545778~3909 &fk~1623545778~3910) (&sk~1623545778~3909)) &x~1623545778~3846 (lambda () (&fk~1623545778~3832)) (lambda () (ex:invalid-form &x~1623545778~3846))))))) (if (null? &x~1623545778~3846) (begin (&match-tail~1623545778~3848)) (if (pair? &x~1623545778~3846) (begin ((lambda (&x~1623545778~3855 &sk~1623545778~3856 &fk~1623545778~3857) (if (&identifier?~1623545778~2336 &x~1623545778~3855) ((lambda (&x~1623545778~3860 &sk~1623545778~3861 &fk~1623545778~3862) (&sk~1623545778~3861 &x~1623545778~3860)) &x~1623545778~3855 &sk~1623545778~3856 &fk~1623545778~3857) (&fk~1623545778~3857))) (car &x~1623545778~3846) (lambda &car-vars~1623545778~3864 (&loop~1623545778~3838 (cdr &x~1623545778~3846) (cons &car-vars~1623545778~3864 &result~1623545778~3847))) &match-tail~1623545778~3848)) (begin (&fk~1623545778~3832))))) ex:undefined)))) ex:undefined) &x~1623545778~3830 (quote ()))) &e~1623545778~3746 (lambda (&ids~1623545778~3916) &ids~1623545778~3916) (lambda () ((lambda (&x~1623545778~3922 &sk~1623545778~3923 &fk~1623545778~3924) (&sk~1623545778~3923)) &e~1623545778~3746 (lambda () (&syntax-violation~1623545778~2445 (quote library) "Invalid library reference" &e~1623545778~3746)) (lambda () (ex:invalid-form &e~1623545778~3746))))))))) (set! &version?~1623545778~2440 (lambda (&e~1623545778~3742) (if (list? &e~1623545778~3742) (for-all &subversion?~1623545778~2441 &e~1623545778~3742) #f))) (set! &subversion?~1623545778~2441 (lambda (&x~1623545778~3738) (if (integer? &x~1623545778~3738) (>= &x~1623545778~3738 0) #f))) (set! &version-reference?~1623545778~2442 (lambda (&e~1623545778~3424) ((lambda (&x~1623545778~3437 &sk~1623545778~3438 &fk~1623545778~3439) (if (pair? &x~1623545778~3437) ((lambda (&x~1623545778~3442 &sk~1623545778~3443 &fk~1623545778~3444) (if (ex:free=? &x~1623545778~3442 (quote and)) (&sk~1623545778~3443) (&fk~1623545778~3444))) (car &x~1623545778~3437) (lambda () ((lambda (&x~1623545778~3449 &sk~1623545778~3450 &fk~1623545778~3451) (((lambda (&loop~1623545778~3457) ((lambda (&temp~1623545778~3460) (set! &loop~1623545778~3457 &temp~1623545778~3460) ((lambda () &loop~1623545778~3457))) (lambda (&x~1623545778~3465 &result~1623545778~3466) ((lambda (&match-tail~1623545778~3467) (set! &match-tail~1623545778~3467 (lambda () ((lambda (&x~1623545778~3490 &sk~1623545778~3491 &fk~1623545778~3492) (if (null? &x~1623545778~3490) (&sk~1623545778~3491) (&fk~1623545778~3492))) &x~1623545778~3465 (lambda () (apply &sk~1623545778~3450 (if (null? &result~1623545778~3466) (map (lambda (&ignore~1623545778~3497) (quote ())) (quote ())) (apply map list (reverse &result~1623545778~3466))))) (lambda () ((lambda (&x~1623545778~3505 &sk~1623545778~3506 &fk~1623545778~3507) (&sk~1623545778~3506)) &x~1623545778~3465 (lambda () (&fk~1623545778~3451)) (lambda () (ex:invalid-form &x~1623545778~3465))))))) (if (null? &x~1623545778~3465) (begin (&match-tail~1623545778~3467)) (if (pair? &x~1623545778~3465) (begin ((lambda (&x~1623545778~3474 &sk~1623545778~3475 &fk~1623545778~3476) (if (&version-reference?~1623545778~2442 &x~1623545778~3474) ((lambda (&x~1623545778~3479 &sk~1623545778~3480 &fk~1623545778~3481) (&sk~1623545778~3480)) &x~1623545778~3474 &sk~1623545778~3475 &fk~1623545778~3476) (&fk~1623545778~3476))) (car &x~1623545778~3465) (lambda &car-vars~1623545778~3483 (&loop~1623545778~3457 (cdr &x~1623545778~3465) (cons &car-vars~1623545778~3483 &result~1623545778~3466))) &match-tail~1623545778~3467)) (begin (&fk~1623545778~3451))))) ex:undefined)))) ex:undefined) &x~1623545778~3449 (quote ()))) (cdr &x~1623545778~3437) (lambda () (&sk~1623545778~3438)) &fk~1623545778~3439)) &fk~1623545778~3439) (&fk~1623545778~3439))) &e~1623545778~3424 (lambda () #t) (lambda () ((lambda (&x~1623545778~3527 &sk~1623545778~3528 &fk~1623545778~3529) (if (pair? &x~1623545778~3527) ((lambda (&x~1623545778~3532 &sk~1623545778~3533 &fk~1623545778~3534) (if (ex:free=? &x~1623545778~3532 (quote or)) (&sk~1623545778~3533) (&fk~1623545778~3534))) (car &x~1623545778~3527) (lambda () ((lambda (&x~1623545778~3539 &sk~1623545778~3540 &fk~1623545778~3541) (((lambda (&loop~1623545778~3547) ((lambda (&temp~1623545778~3550) (set! &loop~1623545778~3547 &temp~1623545778~3550) ((lambda () &loop~1623545778~3547))) (lambda (&x~1623545778~3555 &result~1623545778~3556) ((lambda (&match-tail~1623545778~3557) (set! &match-tail~1623545778~3557 (lambda () ((lambda (&x~1623545778~3580 &sk~1623545778~3581 &fk~1623545778~3582) (if (null? &x~1623545778~3580) (&sk~1623545778~3581) (&fk~1623545778~3582))) &x~1623545778~3555 (lambda () (apply &sk~1623545778~3540 (if (null? &result~1623545778~3556) (map (lambda (&ignore~1623545778~3587) (quote ())) (quote ())) (apply map list (reverse &result~1623545778~3556))))) (lambda () ((lambda (&x~1623545778~3595 &sk~1623545778~3596 &fk~1623545778~3597) (&sk~1623545778~3596)) &x~1623545778~3555 (lambda () (&fk~1623545778~3541)) (lambda () (ex:invalid-form &x~1623545778~3555))))))) (if (null? &x~1623545778~3555) (begin (&match-tail~1623545778~3557)) (if (pair? &x~1623545778~3555) (begin ((lambda (&x~1623545778~3564 &sk~1623545778~3565 &fk~1623545778~3566) (if (&version-reference?~1623545778~2442 &x~1623545778~3564) ((lambda (&x~1623545778~3569 &sk~1623545778~3570 &fk~1623545778~3571) (&sk~1623545778~3570)) &x~1623545778~3564 &sk~1623545778~3565 &fk~1623545778~3566) (&fk~1623545778~3566))) (car &x~1623545778~3555) (lambda &car-vars~1623545778~3573 (&loop~1623545778~3547 (cdr &x~1623545778~3555) (cons &car-vars~1623545778~3573 &result~1623545778~3556))) &match-tail~1623545778~3557)) (begin (&fk~1623545778~3541))))) ex:undefined)))) ex:undefined) &x~1623545778~3539 (quote ()))) (cdr &x~1623545778~3527) (lambda () (&sk~1623545778~3528)) &fk~1623545778~3529)) &fk~1623545778~3529) (&fk~1623545778~3529))) &e~1623545778~3424 (lambda () #t) (lambda () ((lambda (&x~1623545778~3619 &sk~1623545778~3620 &fk~1623545778~3621) (if (pair? &x~1623545778~3619) ((lambda (&x~1623545778~3624 &sk~1623545778~3625 &fk~1623545778~3626) (if (ex:free=? &x~1623545778~3624 (quote not)) (&sk~1623545778~3625) (&fk~1623545778~3626))) (car &x~1623545778~3619) (lambda () ((lambda (&x~1623545778~3631 &sk~1623545778~3632 &fk~1623545778~3633) (if (pair? &x~1623545778~3631) ((lambda (&x~1623545778~3636 &sk~1623545778~3637 &fk~1623545778~3638) (if (&version-reference?~1623545778~2442 &x~1623545778~3636) ((lambda (&x~1623545778~3641 &sk~1623545778~3642 &fk~1623545778~3643) (&sk~1623545778~3642)) &x~1623545778~3636 &sk~1623545778~3637 &fk~1623545778~3638) (&fk~1623545778~3638))) (car &x~1623545778~3631) (lambda () ((lambda (&x~1623545778~3646 &sk~1623545778~3647 &fk~1623545778~3648) (if (null? &x~1623545778~3646) (&sk~1623545778~3647) (&fk~1623545778~3648))) (cdr &x~1623545778~3631) (lambda () (&sk~1623545778~3632)) &fk~1623545778~3633)) &fk~1623545778~3633) (&fk~1623545778~3633))) (cdr &x~1623545778~3619) (lambda () (&sk~1623545778~3620)) &fk~1623545778~3621)) &fk~1623545778~3621) (&fk~1623545778~3621))) &e~1623545778~3424 (lambda () #t) (lambda () ((lambda (&x~1623545778~3662 &sk~1623545778~3663 &fk~1623545778~3664) (((lambda (&loop~1623545778~3670) ((lambda (&temp~1623545778~3673) (set! &loop~1623545778~3670 &temp~1623545778~3673) ((lambda () &loop~1623545778~3670))) (lambda (&x~1623545778~3678 &result~1623545778~3679) ((lambda (&match-tail~1623545778~3680) (set! &match-tail~1623545778~3680 (lambda () ((lambda (&x~1623545778~3703 &sk~1623545778~3704 &fk~1623545778~3705) (if (null? &x~1623545778~3703) (&sk~1623545778~3704) (&fk~1623545778~3705))) &x~1623545778~3678 (lambda () (apply &sk~1623545778~3663 (if (null? &result~1623545778~3679) (map (lambda (&ignore~1623545778~3710) (quote ())) (quote ())) (apply map list (reverse &result~1623545778~3679))))) (lambda () ((lambda (&x~1623545778~3718 &sk~1623545778~3719 &fk~1623545778~3720) (&sk~1623545778~3719)) &x~1623545778~3678 (lambda () (&fk~1623545778~3664)) (lambda () (ex:invalid-form &x~1623545778~3678))))))) (if (null? &x~1623545778~3678) (begin (&match-tail~1623545778~3680)) (if (pair? &x~1623545778~3678) (begin ((lambda (&x~1623545778~3687 &sk~1623545778~3688 &fk~1623545778~3689) (if (&subversion-reference?~1623545778~2443 &x~1623545778~3687) ((lambda (&x~1623545778~3692 &sk~1623545778~3693 &fk~1623545778~3694) (&sk~1623545778~3693)) &x~1623545778~3687 &sk~1623545778~3688 &fk~1623545778~3689) (&fk~1623545778~3689))) (car &x~1623545778~3678) (lambda &car-vars~1623545778~3696 (&loop~1623545778~3670 (cdr &x~1623545778~3678) (cons &car-vars~1623545778~3696 &result~1623545778~3679))) &match-tail~1623545778~3680)) (begin (&fk~1623545778~3664))))) ex:undefined)))) ex:undefined) &x~1623545778~3662 (quote ()))) &e~1623545778~3424 (lambda () #t) (lambda () ((lambda (&x~1623545778~3731 &sk~1623545778~3732 &fk~1623545778~3733) (&sk~1623545778~3732)) &e~1623545778~3424 (lambda () #f) (lambda () (ex:invalid-form &e~1623545778~3424))))))))))))) (set! &subversion-reference?~1623545778~2443 (lambda (&e~1623545778~3420) (let ((x (&subversion?~1623545778~2441 &e~1623545778~3420))) (if x x (&subversion-condition?~1623545778~2444 &e~1623545778~3420))))) (set! &subversion-condition?~1623545778~2444 (lambda (&e~1623545778~3081) ((lambda (&x~1623545778~3096 &sk~1623545778~3097 &fk~1623545778~3098) (if (pair? &x~1623545778~3096) ((lambda (&x~1623545778~3101 &sk~1623545778~3102 &fk~1623545778~3103) (if (ex:free=? &x~1623545778~3101 (quote >=)) (&sk~1623545778~3102) (&fk~1623545778~3103))) (car &x~1623545778~3096) (lambda () ((lambda (&x~1623545778~3108 &sk~1623545778~3109 &fk~1623545778~3110) (if (pair? &x~1623545778~3108) ((lambda (&x~1623545778~3113 &sk~1623545778~3114 &fk~1623545778~3115) (if (&subversion?~1623545778~2441 &x~1623545778~3113) ((lambda (&x~1623545778~3118 &sk~1623545778~3119 &fk~1623545778~3120) (&sk~1623545778~3119)) &x~1623545778~3113 &sk~1623545778~3114 &fk~1623545778~3115) (&fk~1623545778~3115))) (car &x~1623545778~3108) (lambda () ((lambda (&x~1623545778~3123 &sk~1623545778~3124 &fk~1623545778~3125) (if (null? &x~1623545778~3123) (&sk~1623545778~3124) (&fk~1623545778~3125))) (cdr &x~1623545778~3108) (lambda () (&sk~1623545778~3109)) &fk~1623545778~3110)) &fk~1623545778~3110) (&fk~1623545778~3110))) (cdr &x~1623545778~3096) (lambda () (&sk~1623545778~3097)) &fk~1623545778~3098)) &fk~1623545778~3098) (&fk~1623545778~3098))) &e~1623545778~3081 (lambda () #t) (lambda () ((lambda (&x~1623545778~3145 &sk~1623545778~3146 &fk~1623545778~3147) (if (pair? &x~1623545778~3145) ((lambda (&x~1623545778~3150 &sk~1623545778~3151 &fk~1623545778~3152) (if (ex:free=? &x~1623545778~3150 (quote <=)) (&sk~1623545778~3151) (&fk~1623545778~3152))) (car &x~1623545778~3145) (lambda () ((lambda (&x~1623545778~3157 &sk~1623545778~3158 &fk~1623545778~3159) (if (pair? &x~1623545778~3157) ((lambda (&x~1623545778~3162 &sk~1623545778~3163 &fk~1623545778~3164) (if (&subversion?~1623545778~2441 &x~1623545778~3162) ((lambda (&x~1623545778~3167 &sk~1623545778~3168 &fk~1623545778~3169) (&sk~1623545778~3168)) &x~1623545778~3162 &sk~1623545778~3163 &fk~1623545778~3164) (&fk~1623545778~3164))) (car &x~1623545778~3157) (lambda () ((lambda (&x~1623545778~3172 &sk~1623545778~3173 &fk~1623545778~3174) (if (null? &x~1623545778~3172) (&sk~1623545778~3173) (&fk~1623545778~3174))) (cdr &x~1623545778~3157) (lambda () (&sk~1623545778~3158)) &fk~1623545778~3159)) &fk~1623545778~3159) (&fk~1623545778~3159))) (cdr &x~1623545778~3145) (lambda () (&sk~1623545778~3146)) &fk~1623545778~3147)) &fk~1623545778~3147) (&fk~1623545778~3147))) &e~1623545778~3081 (lambda () #t) (lambda () ((lambda (&x~1623545778~3194 &sk~1623545778~3195 &fk~1623545778~3196) (if (pair? &x~1623545778~3194) ((lambda (&x~1623545778~3199 &sk~1623545778~3200 &fk~1623545778~3201) (if (ex:free=? &x~1623545778~3199 (quote not)) (&sk~1623545778~3200) (&fk~1623545778~3201))) (car &x~1623545778~3194) (lambda () ((lambda (&x~1623545778~3206 &sk~1623545778~3207 &fk~1623545778~3208) (if (pair? &x~1623545778~3206) ((lambda (&x~1623545778~3211 &sk~1623545778~3212 &fk~1623545778~3213) (if (&subversion?~1623545778~2441 &x~1623545778~3211) ((lambda (&x~1623545778~3216 &sk~1623545778~3217 &fk~1623545778~3218) (&sk~1623545778~3217)) &x~1623545778~3211 &sk~1623545778~3212 &fk~1623545778~3213) (&fk~1623545778~3213))) (car &x~1623545778~3206) (lambda () ((lambda (&x~1623545778~3221 &sk~1623545778~3222 &fk~1623545778~3223) (if (null? &x~1623545778~3221) (&sk~1623545778~3222) (&fk~1623545778~3223))) (cdr &x~1623545778~3206) (lambda () (&sk~1623545778~3207)) &fk~1623545778~3208)) &fk~1623545778~3208) (&fk~1623545778~3208))) (cdr &x~1623545778~3194) (lambda () (&sk~1623545778~3195)) &fk~1623545778~3196)) &fk~1623545778~3196) (&fk~1623545778~3196))) &e~1623545778~3081 (lambda () #t) (lambda () ((lambda (&x~1623545778~3241 &sk~1623545778~3242 &fk~1623545778~3243) (if (pair? &x~1623545778~3241) ((lambda (&x~1623545778~3246 &sk~1623545778~3247 &fk~1623545778~3248) (if (ex:free=? &x~1623545778~3246 (quote and)) (&sk~1623545778~3247) (&fk~1623545778~3248))) (car &x~1623545778~3241) (lambda () ((lambda (&x~1623545778~3253 &sk~1623545778~3254 &fk~1623545778~3255) (((lambda (&loop~1623545778~3261) ((lambda (&temp~1623545778~3264) (set! &loop~1623545778~3261 &temp~1623545778~3264) ((lambda () &loop~1623545778~3261))) (lambda (&x~1623545778~3269 &result~1623545778~3270) ((lambda (&match-tail~1623545778~3271) (set! &match-tail~1623545778~3271 (lambda () ((lambda (&x~1623545778~3294 &sk~1623545778~3295 &fk~1623545778~3296) (if (null? &x~1623545778~3294) (&sk~1623545778~3295) (&fk~1623545778~3296))) &x~1623545778~3269 (lambda () (apply &sk~1623545778~3254 (if (null? &result~1623545778~3270) (map (lambda (&ignore~1623545778~3301) (quote ())) (quote ())) (apply map list (reverse &result~1623545778~3270))))) (lambda () ((lambda (&x~1623545778~3309 &sk~1623545778~3310 &fk~1623545778~3311) (&sk~1623545778~3310)) &x~1623545778~3269 (lambda () (&fk~1623545778~3255)) (lambda () (ex:invalid-form &x~1623545778~3269))))))) (if (null? &x~1623545778~3269) (begin (&match-tail~1623545778~3271)) (if (pair? &x~1623545778~3269) (begin ((lambda (&x~1623545778~3278 &sk~1623545778~3279 &fk~1623545778~3280) (if (&subversion-reference?~1623545778~2443 &x~1623545778~3278) ((lambda (&x~1623545778~3283 &sk~1623545778~3284 &fk~1623545778~3285) (&sk~1623545778~3284)) &x~1623545778~3278 &sk~1623545778~3279 &fk~1623545778~3280) (&fk~1623545778~3280))) (car &x~1623545778~3269) (lambda &car-vars~1623545778~3287 (&loop~1623545778~3261 (cdr &x~1623545778~3269) (cons &car-vars~1623545778~3287 &result~1623545778~3270))) &match-tail~1623545778~3271)) (begin (&fk~1623545778~3255))))) ex:undefined)))) ex:undefined) &x~1623545778~3253 (quote ()))) (cdr &x~1623545778~3241) (lambda () (&sk~1623545778~3242)) &fk~1623545778~3243)) &fk~1623545778~3243) (&fk~1623545778~3243))) &e~1623545778~3081 (lambda () #t) (lambda () ((lambda (&x~1623545778~3331 &sk~1623545778~3332 &fk~1623545778~3333) (if (pair? &x~1623545778~3331) ((lambda (&x~1623545778~3336 &sk~1623545778~3337 &fk~1623545778~3338) (if (ex:free=? &x~1623545778~3336 (quote or)) (&sk~1623545778~3337) (&fk~1623545778~3338))) (car &x~1623545778~3331) (lambda () ((lambda (&x~1623545778~3343 &sk~1623545778~3344 &fk~1623545778~3345) (((lambda (&loop~1623545778~3351) ((lambda (&temp~1623545778~3354) (set! &loop~1623545778~3351 &temp~1623545778~3354) ((lambda () &loop~1623545778~3351))) (lambda (&x~1623545778~3359 &result~1623545778~3360) ((lambda (&match-tail~1623545778~3361) (set! &match-tail~1623545778~3361 (lambda () ((lambda (&x~1623545778~3384 &sk~1623545778~3385 &fk~1623545778~3386) (if (null? &x~1623545778~3384) (&sk~1623545778~3385) (&fk~1623545778~3386))) &x~1623545778~3359 (lambda () (apply &sk~1623545778~3344 (if (null? &result~1623545778~3360) (map (lambda (&ignore~1623545778~3391) (quote ())) (quote ())) (apply map list (reverse &result~1623545778~3360))))) (lambda () ((lambda (&x~1623545778~3399 &sk~1623545778~3400 &fk~1623545778~3401) (&sk~1623545778~3400)) &x~1623545778~3359 (lambda () (&fk~1623545778~3345)) (lambda () (ex:invalid-form &x~1623545778~3359))))))) (if (null? &x~1623545778~3359) (begin (&match-tail~1623545778~3361)) (if (pair? &x~1623545778~3359) (begin ((lambda (&x~1623545778~3368 &sk~1623545778~3369 &fk~1623545778~3370) (if (&subversion-reference?~1623545778~2443 &x~1623545778~3368) ((lambda (&x~1623545778~3373 &sk~1623545778~3374 &fk~1623545778~3375) (&sk~1623545778~3374)) &x~1623545778~3368 &sk~1623545778~3369 &fk~1623545778~3370) (&fk~1623545778~3370))) (car &x~1623545778~3359) (lambda &car-vars~1623545778~3377 (&loop~1623545778~3351 (cdr &x~1623545778~3359) (cons &car-vars~1623545778~3377 &result~1623545778~3360))) &match-tail~1623545778~3361)) (begin (&fk~1623545778~3345))))) ex:undefined)))) ex:undefined) &x~1623545778~3343 (quote ()))) (cdr &x~1623545778~3331) (lambda () (&sk~1623545778~3332)) &fk~1623545778~3333)) &fk~1623545778~3333) (&fk~1623545778~3333))) &e~1623545778~3081 (lambda () #t) (lambda () ((lambda (&x~1623545778~3413 &sk~1623545778~3414 &fk~1623545778~3415) (&sk~1623545778~3414)) &e~1623545778~3081 (lambda () #f) (lambda () (ex:invalid-form &e~1623545778~3081))))))))))))))) (set! &syntax-violation~1623545778~2445 (lambda (&who~1623545778~3049 &message~1623545778~3050 &form~1623545778~3051 . &maybe-subform~1623545778~3052) (newline) (display "Syntax violation: ") ((lambda (&who~1623545778~3055 &subform~1623545778~3056) (display &who~1623545778~3055) (newline) (newline) (display &message~1623545778~3050) (newline) (newline) (if &subform~1623545778~3056 (begin (display "Subform: ") (pretty-print (&syntax-debug~1623545778~2446 &subform~1623545778~3056)) (newline))) (display "Form: ") (pretty-print (&syntax-debug~1623545778~2446 &form~1623545778~3051)) (newline) (display "Trace: ") (newline) (newline) (for-each (lambda (&exp~1623545778~3059) (display "  ") (pretty-print (&syntax-debug~1623545778~2446 &exp~1623545778~3059)) (newline)) &*trace*~1623545778~2326) (error (quote syntax-violation) "Integrate with host error handling here")) (if &who~1623545778~3049 &who~1623545778~3049 (if (&identifier?~1623545778~2336 &form~1623545778~3051) (begin (&syntax->datum~1623545778~2375 &form~1623545778~3051)) (if (if (list? &form~1623545778~3051) (&identifier?~1623545778~2336 (car &form~1623545778~3051)) #f) (begin (&syntax->datum~1623545778~2375 (car &form~1623545778~3051))) (begin "")))) (if (null? &maybe-subform~1623545778~3052) (begin #f) (if (if (pair? &maybe-subform~1623545778~3052) (null? (cdr &maybe-subform~1623545778~3052)) #f) (begin (car &maybe-subform~1623545778~3052)) (begin (assertion-violation (quote syntax-violation) "Invalid subform in syntax violation" &maybe-subform~1623545778~3052))))))) (set! &syntax-debug~1623545778~2446 (lambda (&exp~1623545778~3041) (&sexp-map~1623545778~2457 (lambda (&leaf~1623545778~3043) (if (&identifier?~1623545778~2336 &leaf~1623545778~3043) (begin (&id-name~1623545778~2337 &leaf~1623545778~3043)) (begin &leaf~1623545778~3043))) &exp~1623545778~3041))) (set! &eval-template~1623545778~2447 (&make-identifier~1623545778~2335 (quote eval-template) (quote ()) (quote ()) 0 (quote (anonymous)))) (set! &make-r6rs-environment~1623545778~2448 (lambda (&imported-libraries~1623545778~3033 &env~1623545778~3034) (cons &imported-libraries~1623545778~3033 &env~1623545778~3034))) (set! &r6rs-environment-imported-libraries~1623545778~2449 car) (set! &r6rs-environment-env~1623545778~2450 cdr) (set! &r7rs-interaction-environment~1623545778~2451 (lambda () (&make-r6rs-environment~1623545778~2448 (quote ()) &*usage-env*~1623545778~2305))) (set! &environment~1623545778~2452 (lambda &import-specs~1623545778~3000 ((lambda (&saved~1623545778~3004) (set! &*usage-env*~1623545778~2305 (&make-unit-env~1623545778~2363)) (call-with-values (lambda () (&env-import!~1623545778~2427 &eval-template~1623545778~2447 (&make-library-language~1623545778~2485) &*usage-env*~1623545778~2305) (call-with-values (lambda () ((lambda (&saved~1623545778~3011) (set! &*phase*~1623545778~2308 0) (call-with-values (lambda () (&scan-imports~1623545778~2432 (map (lambda (&spec~1623545778~3015) (&datum->syntax~1623545778~2374 &eval-template~1623545778~2447 &spec~1623545778~3015)) &import-specs~1623545778~3000))) (lambda &results~1623545778~3017 (set! &*phase*~1623545778~2308 &saved~1623545778~3011) (apply values &results~1623545778~3017)))) &*phase*~1623545778~2308)) (lambda (&imported-libraries~1623545778~3021 &imports~1623545778~3022) (&make-r6rs-environment~1623545778~2448 &imported-libraries~1623545778~3021 ((lambda (&env~1623545778~3025) (&env-import!~1623545778~2427 &eval-template~1623545778~2447 &imports~1623545778~3022 &env~1623545778~3025) &env~1623545778~3025) (&make-unit-env~1623545778~2363)))))) (lambda &results~1623545778~3027 (set! &*usage-env*~1623545778~2305 &saved~1623545778~3004) (apply values &results~1623545778~3027)))) &*usage-env*~1623545778~2305))) (set! &r6rs-eval~1623545778~2453 (lambda (&exp~1623545778~2980 &env~1623545778~2981) ((lambda (&saved~1623545778~2985) (set! &*usage-env*~1623545778~2305 (&r6rs-environment-env~1623545778~2450 &env~1623545778~2981)) (call-with-values (lambda () ((lambda (&exp~1623545778~2990 &imported-libraries~1623545778~2991) (&import-libraries-for-expand~1623545778~2429 (&r6rs-environment-imported-libraries~1623545778~2449 &env~1623545778~2981) (map not &imported-libraries~1623545778~2991) 0) (ex:import-libraries-for-run (&r6rs-environment-imported-libraries~1623545778~2449 &env~1623545778~2981) (map not &imported-libraries~1623545778~2991) 0) (eval (&expand-begin~1623545778~2395 (list (&rename~1623545778~2377 (quote macro) (quote begin)) &exp~1623545778~2990)) (interaction-environment))) (&datum->syntax~1623545778~2374 &eval-template~1623545778~2447 &exp~1623545778~2980) (&r6rs-environment-imported-libraries~1623545778~2449 &env~1623545778~2981))) (lambda &results~1623545778~2996 (set! &*usage-env*~1623545778~2305 &saved~1623545778~2985) (apply values &results~1623545778~2996)))) &*usage-env*~1623545778~2305))) (set! &environment-bindings~1623545778~2454 (lambda (&r6rs-env~1623545778~2978) (map &format-mapping~1623545778~2455 (caar (&r6rs-environment-env~1623545778~2450 &r6rs-env~1623545778~2978))))) (set! &format-mapping~1623545778~2455 (lambda (&mapping~1623545778~2971) (list (list (quote name) (caar &mapping~1623545778~2971)) (list (quote type) (&binding-type~1623545778~2350 (cdr &mapping~1623545778~2971))) (list (quote from) (&binding-library~1623545778~2355 (cdr &mapping~1623545778~2971))) (list (quote levels) (&binding-levels~1623545778~2352 (cdr &mapping~1623545778~2971)))))) (set! &flatten~1623545778~2456 (lambda (&l~1623545778~2963) (if (null? &l~1623545778~2963) (begin &l~1623545778~2963) (if (pair? &l~1623545778~2963) (begin (cons (car &l~1623545778~2963) (&flatten~1623545778~2456 (cdr &l~1623545778~2963)))) (begin (list &l~1623545778~2963)))))) (set! &sexp-map~1623545778~2457 (lambda (&f~1623545778~2951 &s~1623545778~2952) (if (null? &s~1623545778~2952) (begin (quote ())) (if (pair? &s~1623545778~2952) (begin (cons (&sexp-map~1623545778~2457 &f~1623545778~2951 (car &s~1623545778~2952)) (&sexp-map~1623545778~2457 &f~1623545778~2951 (cdr &s~1623545778~2952)))) (if (vector? &s~1623545778~2952) (begin (apply vector (&sexp-map~1623545778~2457 &f~1623545778~2951 (vector->list &s~1623545778~2952)))) (begin (&f~1623545778~2951 &s~1623545778~2952))))))) (set! &dotted-memp~1623545778~2458 (lambda (&proc~1623545778~2939 &ls~1623545778~2940) (if (null? &ls~1623545778~2940) (begin #f) (if (pair? &ls~1623545778~2940) (begin (if (&proc~1623545778~2939 (car &ls~1623545778~2940)) &ls~1623545778~2940 (&dotted-memp~1623545778~2458 &proc~1623545778~2939 (cdr &ls~1623545778~2940)))) (begin (if (&proc~1623545778~2939 &ls~1623545778~2940) &ls~1623545778~2940 #f)))))) (set! &dotted-map~1623545778~2459 (lambda (&f~1623545778~2929 &lst~1623545778~2930) (if (null? &lst~1623545778~2930) (begin (quote ())) (if (pair? &lst~1623545778~2930) (begin (cons (&f~1623545778~2929 (car &lst~1623545778~2930)) (&dotted-map~1623545778~2459 &f~1623545778~2929 (cdr &lst~1623545778~2930)))) (begin (&f~1623545778~2929 &lst~1623545778~2930)))))) (set! &dotted-length~1623545778~2460 (lambda (&dl~1623545778~2921) (if (null? &dl~1623545778~2921) (begin 0) (if (pair? &dl~1623545778~2921) (begin (+ 1 (&dotted-length~1623545778~2460 (cdr &dl~1623545778~2921)))) (begin 0))))) (set! &dotted-butlast~1623545778~2461 (lambda (&ls~1623545778~2895 &n~1623545778~2896) (((lambda (&recurse~1623545778~2902) ((lambda (&temp~1623545778~2905) (set! &recurse~1623545778~2902 &temp~1623545778~2905) ((lambda () &recurse~1623545778~2902))) (lambda (&ls~1623545778~2910 &length-left~1623545778~2911) (if (< &length-left~1623545778~2911 &n~1623545778~2896) (begin (assertion-violation (quote dotted-butlast) "List too short" &ls~1623545778~2910 &n~1623545778~2896)) (if (= &length-left~1623545778~2911 &n~1623545778~2896) (begin (quote ())) (begin (cons (car &ls~1623545778~2910) (&recurse~1623545778~2902 (cdr &ls~1623545778~2910) (- &length-left~1623545778~2911 1))))))))) ex:undefined) &ls~1623545778~2895 (&dotted-length~1623545778~2460 &ls~1623545778~2895)))) (set! &dotted-last~1623545778~2462 (lambda (&ls~1623545778~2870 &n~1623545778~2871) (((lambda (&recurse~1623545778~2877) ((lambda (&temp~1623545778~2880) (set! &recurse~1623545778~2877 &temp~1623545778~2880) ((lambda () &recurse~1623545778~2877))) (lambda (&ls~1623545778~2885 &length-left~1623545778~2886) (if (< &length-left~1623545778~2886 &n~1623545778~2871) (begin (assertion-violation (quote dotted-last) "List too short" &ls~1623545778~2885 &n~1623545778~2871)) (if (= &length-left~1623545778~2886 &n~1623545778~2871) (begin &ls~1623545778~2885) (begin (&recurse~1623545778~2877 (cdr &ls~1623545778~2885) (- &length-left~1623545778~2886 1)))))))) ex:undefined) &ls~1623545778~2870 (&dotted-length~1623545778~2460 &ls~1623545778~2870)))) (set! &map-while~1623545778~2463 (lambda (&f~1623545778~2849 &lst~1623545778~2850 &k~1623545778~2851) (if (null? &lst~1623545778~2850) (begin (&k~1623545778~2851 (quote ()) (quote ()))) (if (pair? &lst~1623545778~2850) (begin ((lambda (&head~1623545778~2861) (if &head~1623545778~2861 (&map-while~1623545778~2463 &f~1623545778~2849 (cdr &lst~1623545778~2850) (lambda (&answer~1623545778~2864 &rest~1623545778~2865) (&k~1623545778~2851 (cons &head~1623545778~2861 &answer~1623545778~2864) &rest~1623545778~2865))) (&k~1623545778~2851 (quote ()) &lst~1623545778~2850))) (&f~1623545778~2849 (car &lst~1623545778~2850)))) (begin (&k~1623545778~2851 (quote ()) &lst~1623545778~2850)))))) (set! &check-set?~1623545778~2464 (lambda (&ls~1623545778~2840 &=~1623545778~2841 &fail~1623545778~2842) (let ((x (null? &ls~1623545778~2840))) (if x x (if (memp (lambda (&x~1623545778~2847) (&=~1623545778~2841 &x~1623545778~2847 (car &ls~1623545778~2840))) (cdr &ls~1623545778~2840)) (&fail~1623545778~2842 (car &ls~1623545778~2840)) (&check-set?~1623545778~2464 (cdr &ls~1623545778~2840) &=~1623545778~2841 &fail~1623545778~2842)))))) (set! &unionv~1623545778~2465 (lambda &sets~1623545778~2827 (if (null? &sets~1623545778~2827) (begin (quote ())) (if (null? (car &sets~1623545778~2827)) (begin (apply &unionv~1623545778~2465 (cdr &sets~1623545778~2827))) (begin ((lambda (&rest~1623545778~2837) (if (memv (car (car &sets~1623545778~2827)) &rest~1623545778~2837) &rest~1623545778~2837 (cons (car (car &sets~1623545778~2827)) &rest~1623545778~2837))) (apply &unionv~1623545778~2465 (cdr (car &sets~1623545778~2827)) (cdr &sets~1623545778~2827)))))))) (set! &drop-tail~1623545778~2466 (lambda (&list~1623545778~2816 &tail~1623545778~2817) (if (null? &list~1623545778~2816) (begin (quote ())) (if (eq? &list~1623545778~2816 &tail~1623545778~2817) (begin (quote ())) (begin (cons (car &list~1623545778~2816) (&drop-tail~1623545778~2466 (cdr &list~1623545778~2816) &tail~1623545778~2817))))))) (set! &list->string~1623545778~2467 (lambda (&e~1623545778~2800 &separator~1623545778~2801) ((lambda (&tostring~1623545778~2802) (set! &tostring~1623545778~2802 (lambda (&x~1623545778~2807) (if (symbol? &x~1623545778~2807) (begin (symbol->string &x~1623545778~2807)) (if (number? &x~1623545778~2807) (begin (number->string &x~1623545778~2807)) (begin (assertion-violation (quote list->string) "Invalid argument" &e~1623545778~2800)))))) (if (null? &e~1623545778~2800) "" (string-append (&tostring~1623545778~2802 (car &e~1623545778~2800)) (apply string-append (map (lambda (&x~1623545778~2805) (string-append &separator~1623545778~2801 (&tostring~1623545778~2802 &x~1623545778~2805))) (cdr &e~1623545778~2800)))))) ex:undefined))) (set! &compose~1623545778~2468 (lambda (&f~1623545778~2795 &g~1623545778~2796) (lambda (&x~1623545778~2798) (&f~1623545778~2795 (&g~1623545778~2796 &x~1623545778~2798))))) (set! &check~1623545778~2469 (lambda (&x~1623545778~2789 &p?~1623545778~2790 &from~1623545778~2791) (let ((x (&p?~1623545778~2790 &x~1623545778~2789))) (if x x (&syntax-violation~1623545778~2445 &from~1623545778~2791 "Invalid argument" &x~1623545778~2789))))) (set! &invalid-form~1623545778~2470 (lambda (&exp~1623545778~2787) (&syntax-violation~1623545778~2445 #f "Invalid form" &exp~1623545778~2787))) (set! &repl~1623545778~2471 (lambda (&exps~1623545778~2774) (&with-toplevel-parameters~1623545778~2474 (lambda () ((lambda (&results~1623545778~2776) (set! &results~1623545778~2776 (quote ())) (for-each (lambda (&exp~1623545778~2778) (for-each (lambda (&exp~1623545778~2780) (for-each (lambda (&result~1623545778~2782) (set! &results~1623545778~2776 (cons &result~1623545778~2782 &results~1623545778~2776))) (call-with-values (lambda () (eval &exp~1623545778~2780 (interaction-environment))) list))) (&expand-toplevel-sequence~1623545778~2475 (list &exp~1623545778~2778)))) &exps~1623545778~2774) (apply values (reverse &results~1623545778~2776))) ex:undefined))))) (set! &run-r6rs-sequence~1623545778~2472 (lambda (&forms~1623545778~2769) (&with-toplevel-parameters~1623545778~2474 (lambda () (for-each (lambda (&exp~1623545778~2772) (eval &exp~1623545778~2772 (interaction-environment))) (&expand-toplevel-sequence~1623545778~2475 (&normalize~1623545778~2479 &forms~1623545778~2769))))))) (set! &run-r6rs-program~1623545778~2473 (lambda (&filename~1623545778~2767) (&run-r6rs-sequence~1623545778~2472 (&read-file~1623545778~2480 &filename~1623545778~2767)))) (set! &with-toplevel-parameters~1623545778~2474 (lambda (&thunk~1623545778~2698) ((lambda (&saved~1623545778~2702) (set! &*trace*~1623545778~2326 (quote ())) (call-with-values (lambda () ((lambda (&saved~1623545778~2707) (set! &*current-library*~1623545778~2320 (quote ())) (call-with-values (lambda () ((lambda (&saved~1623545778~2712) (set! &*phase*~1623545778~2308 0) (call-with-values (lambda () ((lambda (&saved~1623545778~2717) (set! &*used*~1623545778~2323 (list (quote ()))) (call-with-values (lambda () ((lambda (&saved~1623545778~2722) (set! &*color*~1623545778~2311 (&generate-color~1623545778~2348)) (call-with-values (lambda () ((lambda (&saved~1623545778~2727) (set! &*usage-env*~1623545778~2305 &*toplevel-env*~1623545778~2302) (call-with-values (lambda () ((lambda (&saved~1623545778~2732) (set! &*syntax-reflected*~1623545778~2329 #f) (call-with-values (lambda () (&thunk~1623545778~2698)) (lambda &results~1623545778~2736 (set! &*syntax-reflected*~1623545778~2329 &saved~1623545778~2732) (apply values &results~1623545778~2736)))) &*syntax-reflected*~1623545778~2329)) (lambda &results~1623545778~2740 (set! &*usage-env*~1623545778~2305 &saved~1623545778~2727) (apply values &results~1623545778~2740)))) &*usage-env*~1623545778~2305)) (lambda &results~1623545778~2744 (set! &*color*~1623545778~2311 &saved~1623545778~2722) (apply values &results~1623545778~2744)))) &*color*~1623545778~2311)) (lambda &results~1623545778~2748 (set! &*used*~1623545778~2323 &saved~1623545778~2717) (apply values &results~1623545778~2748)))) &*used*~1623545778~2323)) (lambda &results~1623545778~2753 (set! &*phase*~1623545778~2308 &saved~1623545778~2712) (apply values &results~1623545778~2753)))) &*phase*~1623545778~2308)) (lambda &results~1623545778~2757 (set! &*current-library*~1623545778~2320 &saved~1623545778~2707) (apply values &results~1623545778~2757)))) &*current-library*~1623545778~2320)) (lambda &results~1623545778~2762 (set! &*trace*~1623545778~2326 &saved~1623545778~2702) (apply values &results~1623545778~2762)))) &*trace*~1623545778~2326))) (set! &expand-toplevel-sequence~1623545778~2475 (lambda (&forms~1623545778~2690) (&scan-sequence~1623545778~2404 (quote toplevel) &make-toplevel-mapping~1623545778~2359 (&source->syntax~1623545778~2483 &forms~1623545778~2690) (lambda (&forms~1623545778~2693 &syntax-definitions~1623545778~2694 &bound-variables~1623545778~2695) (&emit-body~1623545778~2405 &forms~1623545778~2693 (quote define)))))) (set! &r6rs-load~1623545778~2476 (lambda (&filename~1623545778~2683) (&with-toplevel-parameters~1623545778~2474 (lambda () (for-each (lambda (&exp~1623545778~2686) (for-each (lambda (&exp~1623545778~2688) (eval &exp~1623545778~2688 (interaction-environment))) (&expand-toplevel-sequence~1623545778~2475 (list &exp~1623545778~2686)))) (&read-file~1623545778~2480 &filename~1623545778~2683)))))) (set! &expand-file~1623545778~2477 (lambda (&filename~1623545778~2679 &target-filename~1623545778~2680) (&with-toplevel-parameters~1623545778~2474 (lambda () (&write-file~1623545778~2481 (&expand-toplevel-sequence~1623545778~2475 (&normalize~1623545778~2479 (&read-file~1623545778~2480 &filename~1623545778~2679))) &target-filename~1623545778~2680))))) (set! &expand-r5rs-file~1623545778~2478 (lambda (&filename~1623545778~2636 &target-filename~1623545778~2637 &r6rs-env~1623545778~2638) (&with-toplevel-parameters~1623545778~2474 (lambda () ((lambda (&saved~1623545778~2643) (set! &make-free-name~1623545778~2347 (lambda (&symbol~1623545778~2677) &symbol~1623545778~2677)) (call-with-values (lambda () ((lambda (&saved~1623545778~2648) (set! &*usage-env*~1623545778~2305 (&r6rs-environment-env~1623545778~2450 &r6rs-env~1623545778~2638)) (call-with-values (lambda () ((lambda (&saved~1623545778~2653) (set! &*macro-table*~1623545778~2314 &*macro-table*~1623545778~2314) (call-with-values (lambda () ((lambda (&imported-libraries~1623545778~2658) (&import-libraries-for-expand~1623545778~2429 (&r6rs-environment-imported-libraries~1623545778~2449 &r6rs-env~1623545778~2638) (map not &imported-libraries~1623545778~2658) 0) (&write-file~1623545778~2481 (cons (cons (quote ex:import-libraries-for-run) (cons (list (quote quote) (&r6rs-environment-imported-libraries~1623545778~2449 &r6rs-env~1623545778~2638)) (cons (list (quote quote) (&current-builds~1623545778~2428 &imported-libraries~1623545778~2658)) (quote (0))))) (&expand-toplevel-sequence~1623545778~2475 (&read-file~1623545778~2480 &filename~1623545778~2636))) &target-filename~1623545778~2637)) (&r6rs-environment-imported-libraries~1623545778~2449 &r6rs-env~1623545778~2638))) (lambda &results~1623545778~2665 (set! &*macro-table*~1623545778~2314 &saved~1623545778~2653) (apply values &results~1623545778~2665)))) &*macro-table*~1623545778~2314)) (lambda &results~1623545778~2669 (set! &*usage-env*~1623545778~2305 &saved~1623545778~2648) (apply values &results~1623545778~2669)))) &*usage-env*~1623545778~2305)) (lambda &results~1623545778~2673 (set! &make-free-name~1623545778~2347 &saved~1623545778~2643) (apply values &results~1623545778~2673)))) &make-free-name~1623545778~2347))))) (set! &normalize~1623545778~2479 (lambda (&exps~1623545778~2597) ((lambda (&error~1623545778~2598) (set! &error~1623545778~2598 (lambda () ((lambda (&newline~1623545778~2633) (&syntax-violation~1623545778~2445 (quote expand-file) (string-append "File should be of the form:" &newline~1623545778~2633 "      <library>*" &newline~1623545778~2633 "    | <library>* <toplevel program>") &exps~1623545778~2597)) (string #\newline)))) (((lambda (&loop~1623545778~2604) ((lambda (&temp~1623545778~2607) (set! &loop~1623545778~2604 &temp~1623545778~2607) ((lambda () &loop~1623545778~2604))) (lambda (&exps~1623545778~2612 &normalized~1623545778~2613) (if (null? &exps~1623545778~2612) (reverse &normalized~1623545778~2613) (if (pair? (car &exps~1623545778~2612)) ((lambda (&t~1623545778~2619) (if (memv &t~1623545778~2619 (quote (library))) (begin (&loop~1623545778~2604 (cdr &exps~1623545778~2612) (cons (car &exps~1623545778~2612) &normalized~1623545778~2613))) (if (memv &t~1623545778~2619 (quote (import))) (begin (&loop~1623545778~2604 (quote ()) (cons (cons (quote program) &exps~1623545778~2612) &normalized~1623545778~2613))) (begin (&error~1623545778~2598))))) (caar &exps~1623545778~2612)) (&error~1623545778~2598)))))) ex:undefined) &exps~1623545778~2597 (quote ()))) ex:undefined))) (set! &read-file~1623545778~2480 (lambda (&fn~1623545778~2575) ((lambda (&p~1623545778~2578) (((lambda (&f~1623545778~2584) ((lambda (&temp~1623545778~2587) (set! &f~1623545778~2584 &temp~1623545778~2587) ((lambda () &f~1623545778~2584))) (lambda (&x~1623545778~2592) (if (eof-object? &x~1623545778~2592) (begin (close-input-port &p~1623545778~2578) (quote ())) (cons &x~1623545778~2592 (&f~1623545778~2584 (read &p~1623545778~2578))))))) ex:undefined) (read &p~1623545778~2578))) (open-input-file &fn~1623545778~2575)))) (set! &write-file~1623545778~2481 (lambda (&exps~1623545778~2566 &fn~1623545778~2567) (if (file-exists? &fn~1623545778~2567) (delete-file &fn~1623545778~2567)) ((lambda (&p~1623545778~2570) (for-each (lambda (&exp~1623545778~2572) (write &exp~1623545778~2572 &p~1623545778~2570) (newline &p~1623545778~2570)) &exps~1623545778~2566) (close-output-port &p~1623545778~2570)) (open-output-file &fn~1623545778~2567)))) (set! &toplevel-template~1623545778~2482 (&make-identifier~1623545778~2335 (quote toplevel-template) (quote ()) (quote ()) 0 #f)) (set! &source->syntax~1623545778~2483 (lambda (&datum~1623545778~2561) (&datum->syntax~1623545778~2374 &toplevel-template~1623545778~2482 &datum~1623545778~2561))) (set! &library-language-names~1623545778~2484 (quote (program library export import for run expand meta only except prefix rename primitives >= <= and or not))) (set! &make-library-language~1623545778~2485 (lambda () (map (lambda (&name~1623545778~2554) (cons &name~1623545778~2554 (&make-binding~1623545778~2349 (quote macro) &name~1623545778~2554 (quote (0)) #f (quote ())))) &library-language-names~1623545778~2484))) (ex:register-library! ((lambda (&primitive-macro-mapping~1623545778~2520) (ex:make-library (quote (core primitive-macros)) (lambda () (quote ())) (map (lambda (&mapping~1623545778~2525) (cons (car &mapping~1623545778~2525) (&make-binding~1623545778~2349 (quote macro) (car &mapping~1623545778~2525) (quote (0)) #f (quote ())))) &primitive-macro-mapping~1623545778~2520) (quote ()) (quote ()) (lambda () (for-each (lambda (&mapping~1623545778~2533) (&register-macro!~1623545778~2386 (car &mapping~1623545778~2533) (&make-expander~1623545778~2381 (cdr &mapping~1623545778~2533)))) &primitive-macro-mapping~1623545778~2520) (values)) (lambda () (values)) (quote system))) (list (cons (quote lambda) &expand-lambda~1623545778~2399) (cons (quote if) &expand-if~1623545778~2393) (cons (quote set!) &expand-set!~1623545778~2394) (cons (quote begin) &expand-begin~1623545778~2395) (cons (quote syntax) &expand-syntax~1623545778~2414) (cons (quote quote) &expand-quote~1623545778~2392) (cons (quote let-syntax) &expand-local-syntax~1623545778~2396) (cons (quote letrec-syntax) &expand-local-syntax~1623545778~2396) (cons (quote syntax-case) &expand-syntax-case~1623545778~2412) (cons (quote and) &expand-and~1623545778~2397) (cons (quote or) &expand-or~1623545778~2398) (cons (quote define) &invalid-form~1623545778~2470) (cons (quote define-syntax) &invalid-form~1623545778~2470) (cons (quote _) &invalid-form~1623545778~2470) (cons (quote ...) &invalid-form~1623545778~2470)))) (set! &*toplevel-env*~1623545778~2302 (&make-unit-env~1623545778~2363)) (set! &*usage-env*~1623545778~2305 &*toplevel-env*~1623545778~2302) (&env-import!~1623545778~2427 &toplevel-template~1623545778~2482 (&make-library-language~1623545778~2485) &*toplevel-env*~1623545778~2302) (&register-macro!~1623545778~2386 (quote library) (&make-expander~1623545778~2381 &invalid-form~1623545778~2470)) (&register-macro!~1623545778~2386 (quote program) (&make-expander~1623545778~2381 &invalid-form~1623545778~2470)) (&register-macro!~1623545778~2386 (quote import) (&make-expander~1623545778~2381 &invalid-form~1623545778~2470)) (set! ex:make-variable-transformer &make-variable-transformer~1623545778~2383) (set! ex:identifier? &identifier?~1623545778~2336) (set! ex:bound-identifier=? &bound-identifier=?~1623545778~2343) (set! ex:free-identifier=? &free-identifier=?~1623545778~2344) (set! ex:generate-temporaries &generate-temporaries~1623545778~2376) (set! ex:datum->syntax &datum->syntax~1623545778~2374) (set! ex:syntax->datum &syntax->datum~1623545778~2375) (set! ex:environment &environment~1623545778~2452) (set! ex:environment-bindings &environment-bindings~1623545778~2454) (set! ex:eval &r6rs-eval~1623545778~2453) (set! ex:interaction-environment &r7rs-interaction-environment~1623545778~2451) (set! ex:load &r6rs-load~1623545778~2476) (set! ex:syntax-violation &syntax-violation~1623545778~2445) (set! ex:expand-file &expand-file~1623545778~2477) (set! ex:repl &repl~1623545778~2471) (set! ex:expand-r5rs-file &expand-r5rs-file~1623545778~2478) (set! ex:run-r6rs-sequence &run-r6rs-sequence~1623545778~2472) (set! ex:run-r6rs-program &run-r6rs-program~1623545778~2473) (set! ex:invalid-form &invalid-form~1623545778~2470) (set! ex:register-macro! &register-macro!~1623545778~2386) (set! ex:syntax-rename &syntax-rename~1623545778~2373) (set! ex:map-while &map-while~1623545778~2463) (set! ex:dotted-length &dotted-length~1623545778~2460) (set! ex:dotted-butlast &dotted-butlast~1623545778~2461) (set! ex:dotted-last &dotted-last~1623545778~2462) (set! ex:uncompress &uncompress~1623545778~2371) (set! ex:free=? &free=?~1623545778~2345)) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)) (record-constructor (make-record-constructor-descriptor &:identifier~1623545778~2332 #f #f)))) (make-record-type-descriptor (quote identifier) #f #f #f #f (quote #((immutable name) (immutable colors) (immutable transformer-envs) (immutable displacement) (immutable maybe-library)))))) #f)) (quote ()))) (list (quote ())))) (quote ()))) (quote ()))) (quote ()))) #f)) 0)) #f)) #f)
