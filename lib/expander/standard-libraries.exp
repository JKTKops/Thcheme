(begin (ex:register-library! (ex:make-library (quote (core primitives)) (lambda () (quote ())) (quote ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (0) #f ()) (... macro ... (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0) #f ()) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (free-identifier=? variable ex:free-identifier=? (0) #f ()) (generate-temporaries variable ex:generate-temporaries (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()) (syntax->datum variable ex:syntax->datum (0) #f ()) (syntax-violation variable ex:syntax-violation (0) #f ()) (environment variable ex:environment (0) #f ()) (environment-bindings variable ex:environment-bindings (0) #f ()) (eval variable ex:eval (0) #f ()) (undefined variable ex:undefined (0) #f ()))) (quote (((core primitive-macros) 0))) (quote (system)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~3))) (values))
(begin (ex:register-library! (ex:make-library (quote (core with-syntax)) (lambda () (ex:uncompress (quote (((&env~1622177385~51 0 1 2 3) (&env~1622177385~35 4 1 2 3) (&env~1622177385~17 5 1 2 3)) (5 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (4 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (3 (((with-syntax) macro &with-syntax~1622177385~4 (0) #f (core with-syntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((list) variable list (0) #f ()))) (2 (((x) variable &x~1622177385~6 (1) #f (core with-syntax)))) (1 ()) (0 (((e1) . #f) ((e2) . #f))))))) (quote ((with-syntax macro &with-syntax~1622177385~4 (0) #f (core with-syntax)))) (quote (((core primitives) 0 1))) (quote (&build~1622177385~3)) (lambda () (ex:register-macro! (quote &with-syntax~1622177385~4) (lambda (&x~1622177385~6) (let ((&input~1622177385~8 &x~1622177385~6)) (let ((&fail~1622177385~9 (lambda () (let ((&fail~1622177385~10 (lambda () (let ((&fail~1622177385~11 (lambda () (ex:invalid-form &input~1622177385~8)))) (if (pair? &input~1622177385~8) (let ((&temp~1622177385~29 (car &input~1622177385~8))) (let ((&temp~1622177385~18 (cdr &input~1622177385~8))) (if (pair? &temp~1622177385~18) (let ((&temp~1622177385~22 (car &temp~1622177385~18))) (ex:map-while (lambda (&temp~1622177385~22) (if (pair? &temp~1622177385~22) (let ((&temp~1622177385~28 (car &temp~1622177385~22))) (let ((&out~1622177385~12 &temp~1622177385~28)) (let ((&temp~1622177385~25 (cdr &temp~1622177385~22))) (if (pair? &temp~1622177385~25) (let ((&temp~1622177385~27 (car &temp~1622177385~25))) (let ((&in~1622177385~13 &temp~1622177385~27)) (let ((&temp~1622177385~26 (cdr &temp~1622177385~25))) (if (null? &temp~1622177385~26) (list &out~1622177385~12 &in~1622177385~13) #f)))) #f)))) #f)) &temp~1622177385~22 (lambda (&cols~1622177385~23 &rest~1622177385~24) (if (null? &rest~1622177385~24) (apply (lambda (&out~1622177385~12 &in~1622177385~13) (let ((&temp~1622177385~19 (cdr &temp~1622177385~18))) (if (pair? &temp~1622177385~19) (let ((&temp~1622177385~21 (car &temp~1622177385~19))) (let ((&e1~1622177385~14 &temp~1622177385~21)) (let ((&temp~1622177385~20 (cdr &temp~1622177385~19))) (if (list? &temp~1622177385~20) (let ((&e2~1622177385~15 &temp~1622177385~20)) (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1622177385~17)) 0 (quote (core with-syntax))) (cons (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1622177385~17)) 0 (quote (core with-syntax))) &in~1622177385~13) (cons (quote ()) (cons (cons &out~1622177385~12 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~17)) 0 (quote (core with-syntax))) (cons &e1~1622177385~14 &e2~1622177385~15)) (quote ()))) (quote ())))))) (&fail~1622177385~11))))) (&fail~1622177385~11)))) (if (null? &cols~1622177385~23) (quote (() ())) (apply map list &cols~1622177385~23))) (&fail~1622177385~11))))) (&fail~1622177385~11)))) (&fail~1622177385~11)))))) (if (pair? &input~1622177385~8) (let ((&temp~1622177385~47 (car &input~1622177385~8))) (let ((&temp~1622177385~36 (cdr &input~1622177385~8))) (if (pair? &temp~1622177385~36) (let ((&temp~1622177385~40 (car &temp~1622177385~36))) (if (pair? &temp~1622177385~40) (let ((&temp~1622177385~42 (car &temp~1622177385~40))) (if (pair? &temp~1622177385~42) (let ((&temp~1622177385~46 (car &temp~1622177385~42))) (let ((&out~1622177385~30 &temp~1622177385~46)) (let ((&temp~1622177385~43 (cdr &temp~1622177385~42))) (if (pair? &temp~1622177385~43) (let ((&temp~1622177385~45 (car &temp~1622177385~43))) (let ((&in~1622177385~31 &temp~1622177385~45)) (let ((&temp~1622177385~44 (cdr &temp~1622177385~43))) (if (null? &temp~1622177385~44) (let ((&temp~1622177385~41 (cdr &temp~1622177385~40))) (if (null? &temp~1622177385~41) (let ((&temp~1622177385~37 (cdr &temp~1622177385~36))) (if (pair? &temp~1622177385~37) (let ((&temp~1622177385~39 (car &temp~1622177385~37))) (let ((&e1~1622177385~32 &temp~1622177385~39)) (let ((&temp~1622177385~38 (cdr &temp~1622177385~37))) (if (list? &temp~1622177385~38) (let ((&e2~1622177385~33 &temp~1622177385~38)) (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1622177385~35)) 0 (quote (core with-syntax))) (cons &in~1622177385~31 (cons (quote ()) (cons (cons &out~1622177385~30 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~35)) 0 (quote (core with-syntax))) (cons &e1~1622177385~32 &e2~1622177385~33)) (quote ()))) (quote ())))))) (&fail~1622177385~10))))) (&fail~1622177385~10))) (&fail~1622177385~10))) (&fail~1622177385~10))))) (&fail~1622177385~10))))) (&fail~1622177385~10))) (&fail~1622177385~10))) (&fail~1622177385~10)))) (&fail~1622177385~10)))))) (if (pair? &input~1622177385~8) (let ((&temp~1622177385~57 (car &input~1622177385~8))) (let ((&temp~1622177385~52 (cdr &input~1622177385~8))) (if (pair? &temp~1622177385~52) (let ((&temp~1622177385~56 (car &temp~1622177385~52))) (if (null? &temp~1622177385~56) (let ((&temp~1622177385~53 (cdr &temp~1622177385~52))) (if (pair? &temp~1622177385~53) (let ((&temp~1622177385~55 (car &temp~1622177385~53))) (let ((&e1~1622177385~48 &temp~1622177385~55)) (let ((&temp~1622177385~54 (cdr &temp~1622177385~53))) (if (list? &temp~1622177385~54) (let ((&e2~1622177385~49 &temp~1622177385~54)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~51)) 0 (quote (core with-syntax))) (cons &e1~1622177385~48 &e2~1622177385~49))) (&fail~1622177385~9))))) (&fail~1622177385~9))) (&fail~1622177385~9))) (&fail~1622177385~9)))) (&fail~1622177385~9)))))) (values)) (lambda () (values)) (quote &build~1622177385~58))) (values))
(begin (ex:register-library! (ex:make-library (quote (core syntax-rules)) (lambda () (ex:uncompress (quote (((&env~1622177385~93 0 1 2 3 4 5) (&env~1622177385~77 6 7 3 4 5)) (7 (((k) . #f) ((cl) . #f))) (6 (((cl) . #f))) (5 (((syntax-rules) macro &syntax-rules~1622177385~59 (0) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro &with-syntax~1622177385~4 (1) #f (core with-syntax)) ((map) variable map (1) #f ()) ((for-all) variable for-all (1) #f ()))) (4 (((x) variable &x~1622177385~61 (1) #f (core syntax-rules)))) (3 (((clause) variable &clause~1622177385~62 (1) #f (core syntax-rules)))) (2 (((y) variable &y~1622177385~83 (1) #f (core syntax-rules)))) (1 ()) (0 (((keyword) . #f) ((pattern) . #f) ((template) . #f))))))) (quote ((syntax-rules macro &syntax-rules~1622177385~59 (0) #f (core syntax-rules)))) (quote (((core with-syntax) 1) ((core primitives) 1 0))) (quote (&build~1622177385~58 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &syntax-rules~1622177385~59) (lambda (&x~1622177385~61) ((lambda (&clause~1622177385~62) (set! &clause~1622177385~62 (lambda (&y~1622177385~83) (let ((&input~1622177385~85 &y~1622177385~83)) (let ((&fail~1622177385~86 (lambda () (let ((&fail~1622177385~87 (lambda () (ex:invalid-form &input~1622177385~85)))) (ex:syntax-violation (quote syntax-rules) "Invalid expression" &x~1622177385~61))))) (if (pair? &input~1622177385~85) (let ((&temp~1622177385~97 (car &input~1622177385~85))) (if (pair? &temp~1622177385~97) (let ((&temp~1622177385~99 (car &temp~1622177385~97))) (let ((&keyword~1622177385~89 &temp~1622177385~99)) (let ((&temp~1622177385~98 (cdr &temp~1622177385~97))) (let ((&pattern~1622177385~90 &temp~1622177385~98)) (let ((&temp~1622177385~94 (cdr &input~1622177385~85))) (if (pair? &temp~1622177385~94) (let ((&temp~1622177385~96 (car &temp~1622177385~94))) (let ((&template~1622177385~91 &temp~1622177385~96)) (let ((&temp~1622177385~95 (cdr &temp~1622177385~94))) (if (null? &temp~1622177385~95) (cons (cons (ex:syntax-rename (quote dummy) (quote ()) (quote (&env~1622177385~93)) 0 (quote (core syntax-rules))) &pattern~1622177385~90) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~93)) 0 (quote (core syntax-rules))) (cons &template~1622177385~91 (quote ()))) (quote ()))) (&fail~1622177385~86))))) (&fail~1622177385~86))))))) (&fail~1622177385~86))) (&fail~1622177385~86)))))) (let ((&input~1622177385~64 &x~1622177385~61)) (let ((&fail~1622177385~65 (lambda () (ex:invalid-form &input~1622177385~64)))) (if (pair? &input~1622177385~64) (let ((&temp~1622177385~81 (car &input~1622177385~64))) (let ((&temp~1622177385~78 (cdr &input~1622177385~64))) (if (pair? &temp~1622177385~78) (let ((&temp~1622177385~80 (car &temp~1622177385~78))) (if (list? &temp~1622177385~80) (let ((&k~1622177385~66 &temp~1622177385~80)) (let ((&temp~1622177385~79 (cdr &temp~1622177385~78))) (if (list? &temp~1622177385~79) (let ((&cl~1622177385~67 &temp~1622177385~79)) (if (for-all ex:identifier? &k~1622177385~66) (let ((&input~1622177385~71 (map &clause~1622177385~62 &cl~1622177385~67))) (let ((&fail~1622177385~73 (lambda () (ex:invalid-form &input~1622177385~71)))) (if (list? &input~1622177385~71) (let ((&cl~1622177385~74 &input~1622177385~71)) (begin (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~77)) 0 (quote (core syntax-rules))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~77)) 0 (quote (core syntax-rules))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1622177385~77)) 0 (quote (core syntax-rules))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~77)) 0 (quote (core syntax-rules))) (cons &k~1622177385~66 &cl~1622177385~74))) (quote ())))))) (&fail~1622177385~73)))) (&fail~1622177385~65))) (&fail~1622177385~65)))) (&fail~1622177385~65))) (&fail~1622177385~65)))) (&fail~1622177385~65))))) ex:undefined))) (values)) (lambda () (values)) (quote &build~1622177385~100))) (values))
(begin (ex:register-library! (ex:make-library (quote (core let)) (lambda () (ex:uncompress (quote (((&env~1622177385~191 0 1 2 3) (&env~1622177385~167 4 5 6 7 3) (&env~1622177385~136 8 9 10 3) (&env~1622177385~115 11 9 10 3)) (11 (((f) . #f) ((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (10 (((x) variable &x~1622177385~103 (1) #f (core let)))) (9 ()) (8 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (7 (((x) variable &x~1622177385~151 (1) #f (core let)))) (6 ()) (5 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (4 (((t) . #f))) (3 (((letrec*) macro &letrec*~1622177385~180 (0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0) #f (core let)) ((let) macro &let~1622177385~101 (0) #f (core let)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro &with-syntax~1622177385~4 (1) #f (core with-syntax)) ((for-all) variable for-all (1) #f ()))) (2 (((x) variable &x~1622177385~182 (1) #f (core let)))) (1 ()) (0 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))))))) (quote ((let macro &let~1622177385~101 (0) #f (core let)) (letrec macro &letrec~1622177385~149 (0) #f (core let)) (letrec* macro &letrec*~1622177385~180 (0) #f (core let)))) (quote (((core with-syntax) 1) ((core primitives) 1 0))) (quote (&build~1622177385~58 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &let~1622177385~101) (lambda (&x~1622177385~103) (let ((&input~1622177385~105 &x~1622177385~103)) (let ((&fail~1622177385~106 (lambda () (let ((&fail~1622177385~107 (lambda () (ex:invalid-form &input~1622177385~105)))) (if (pair? &input~1622177385~105) (let ((&temp~1622177385~129 (car &input~1622177385~105))) (let ((&temp~1622177385~116 (cdr &input~1622177385~105))) (if (pair? &temp~1622177385~116) (let ((&temp~1622177385~128 (car &temp~1622177385~116))) (let ((&f~1622177385~108 &temp~1622177385~128)) (let ((&temp~1622177385~117 (cdr &temp~1622177385~116))) (if (pair? &temp~1622177385~117) (let ((&temp~1622177385~121 (car &temp~1622177385~117))) (ex:map-while (lambda (&temp~1622177385~121) (if (pair? &temp~1622177385~121) (let ((&temp~1622177385~127 (car &temp~1622177385~121))) (let ((&x~1622177385~109 &temp~1622177385~127)) (let ((&temp~1622177385~124 (cdr &temp~1622177385~121))) (if (pair? &temp~1622177385~124) (let ((&temp~1622177385~126 (car &temp~1622177385~124))) (let ((&v~1622177385~110 &temp~1622177385~126)) (let ((&temp~1622177385~125 (cdr &temp~1622177385~124))) (if (null? &temp~1622177385~125) (list &x~1622177385~109 &v~1622177385~110) #f)))) #f)))) #f)) &temp~1622177385~121 (lambda (&cols~1622177385~122 &rest~1622177385~123) (if (null? &rest~1622177385~123) (apply (lambda (&x~1622177385~109 &v~1622177385~110) (let ((&temp~1622177385~118 (cdr &temp~1622177385~117))) (if (pair? &temp~1622177385~118) (let ((&temp~1622177385~120 (car &temp~1622177385~118))) (let ((&e1~1622177385~111 &temp~1622177385~120)) (let ((&temp~1622177385~119 (cdr &temp~1622177385~118))) (if (list? &temp~1622177385~119) (let ((&e2~1622177385~112 &temp~1622177385~119)) (if (for-all ex:identifier? (cons &f~1622177385~108 &x~1622177385~109)) (cons (cons (ex:syntax-rename (quote letrec) (quote ()) (quote (&env~1622177385~115)) 0 (quote (core let))) (cons (cons (cons &f~1622177385~108 (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~115)) 0 (quote (core let))) (cons &x~1622177385~109 (cons &e1~1622177385~111 &e2~1622177385~112))) (quote ()))) (quote ())) (cons &f~1622177385~108 (quote ())))) &v~1622177385~110) (&fail~1622177385~107))) (&fail~1622177385~107))))) (&fail~1622177385~107)))) (if (null? &cols~1622177385~122) (quote (() ())) (apply map list &cols~1622177385~122))) (&fail~1622177385~107))))) (&fail~1622177385~107))))) (&fail~1622177385~107)))) (&fail~1622177385~107)))))) (if (pair? &input~1622177385~105) (let ((&temp~1622177385~148 (car &input~1622177385~105))) (let ((&temp~1622177385~137 (cdr &input~1622177385~105))) (if (pair? &temp~1622177385~137) (let ((&temp~1622177385~141 (car &temp~1622177385~137))) (ex:map-while (lambda (&temp~1622177385~141) (if (pair? &temp~1622177385~141) (let ((&temp~1622177385~147 (car &temp~1622177385~141))) (let ((&x~1622177385~130 &temp~1622177385~147)) (let ((&temp~1622177385~144 (cdr &temp~1622177385~141))) (if (pair? &temp~1622177385~144) (let ((&temp~1622177385~146 (car &temp~1622177385~144))) (let ((&v~1622177385~131 &temp~1622177385~146)) (let ((&temp~1622177385~145 (cdr &temp~1622177385~144))) (if (null? &temp~1622177385~145) (list &x~1622177385~130 &v~1622177385~131) #f)))) #f)))) #f)) &temp~1622177385~141 (lambda (&cols~1622177385~142 &rest~1622177385~143) (if (null? &rest~1622177385~143) (apply (lambda (&x~1622177385~130 &v~1622177385~131) (let ((&temp~1622177385~138 (cdr &temp~1622177385~137))) (if (pair? &temp~1622177385~138) (let ((&temp~1622177385~140 (car &temp~1622177385~138))) (let ((&e1~1622177385~132 &temp~1622177385~140)) (let ((&temp~1622177385~139 (cdr &temp~1622177385~138))) (if (list? &temp~1622177385~139) (let ((&e2~1622177385~133 &temp~1622177385~139)) (if (for-all ex:identifier? &x~1622177385~130) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~136)) 0 (quote (core let))) (cons &x~1622177385~130 (cons &e1~1622177385~132 &e2~1622177385~133))) &v~1622177385~131) (&fail~1622177385~106))) (&fail~1622177385~106))))) (&fail~1622177385~106)))) (if (null? &cols~1622177385~142) (quote (() ())) (apply map list &cols~1622177385~142))) (&fail~1622177385~106))))) (&fail~1622177385~106)))) (&fail~1622177385~106)))))) (ex:register-macro! (quote &letrec~1622177385~149) (lambda (&x~1622177385~151) (let ((&input~1622177385~153 &x~1622177385~151)) (let ((&fail~1622177385~154 (lambda () (ex:invalid-form &input~1622177385~153)))) (if (pair? &input~1622177385~153) (let ((&temp~1622177385~179 (car &input~1622177385~153))) (let ((&temp~1622177385~168 (cdr &input~1622177385~153))) (if (pair? &temp~1622177385~168) (let ((&temp~1622177385~172 (car &temp~1622177385~168))) (ex:map-while (lambda (&temp~1622177385~172) (if (pair? &temp~1622177385~172) (let ((&temp~1622177385~178 (car &temp~1622177385~172))) (let ((&i~1622177385~155 &temp~1622177385~178)) (let ((&temp~1622177385~175 (cdr &temp~1622177385~172))) (if (pair? &temp~1622177385~175) (let ((&temp~1622177385~177 (car &temp~1622177385~175))) (let ((&v~1622177385~156 &temp~1622177385~177)) (let ((&temp~1622177385~176 (cdr &temp~1622177385~175))) (if (null? &temp~1622177385~176) (list &i~1622177385~155 &v~1622177385~156) #f)))) #f)))) #f)) &temp~1622177385~172 (lambda (&cols~1622177385~173 &rest~1622177385~174) (if (null? &rest~1622177385~174) (apply (lambda (&i~1622177385~155 &v~1622177385~156) (let ((&temp~1622177385~169 (cdr &temp~1622177385~168))) (if (pair? &temp~1622177385~169) (let ((&temp~1622177385~171 (car &temp~1622177385~169))) (let ((&e1~1622177385~157 &temp~1622177385~171)) (let ((&temp~1622177385~170 (cdr &temp~1622177385~169))) (if (list? &temp~1622177385~170) (let ((&e2~1622177385~158 &temp~1622177385~170)) (let ((&input~1622177385~161 (ex:generate-temporaries &i~1622177385~155))) (let ((&fail~1622177385~163 (lambda () (ex:invalid-form &input~1622177385~161)))) (if (list? &input~1622177385~161) (let ((&t~1622177385~164 &input~1622177385~161)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~167)) 0 (quote (core let))) (cons (map (lambda (&i~1622177385~155) (cons &i~1622177385~155 (cons (ex:syntax-rename (quote undefined) (quote ()) (quote (&env~1622177385~167)) 0 (quote (core let))) (quote ())))) &i~1622177385~155) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~167)) 0 (quote (core let))) (cons (if (= (length &t~1622177385~164) (length &v~1622177385~156)) (map (lambda (&t~1622177385~164 &v~1622177385~156) (cons &t~1622177385~164 (cons &v~1622177385~156 (quote ())))) &t~1622177385~164 &v~1622177385~156) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((t v) ...)) (list &t~1622177385~164 &v~1622177385~156))) (append (if (= (length &i~1622177385~155) (length &t~1622177385~164)) (map (lambda (&i~1622177385~155 &t~1622177385~164) (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1622177385~167)) 0 (quote (core let))) (cons &i~1622177385~155 (cons &t~1622177385~164 (quote ()))))) &i~1622177385~155 &t~1622177385~164) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((set! i t) ... (let () e1 e2 ...))) (list &i~1622177385~155 &t~1622177385~164))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~167)) 0 (quote (core let))) (cons (quote ()) (cons &e1~1622177385~157 &e2~1622177385~158))) (quote ()))))) (quote ())))))) (&fail~1622177385~163))))) (&fail~1622177385~154))))) (&fail~1622177385~154)))) (if (null? &cols~1622177385~173) (quote (() ())) (apply map list &cols~1622177385~173))) (&fail~1622177385~154))))) (&fail~1622177385~154)))) (&fail~1622177385~154)))))) (ex:register-macro! (quote &letrec*~1622177385~180) (lambda (&x~1622177385~182) (let ((&input~1622177385~184 &x~1622177385~182)) (let ((&fail~1622177385~185 (lambda () (ex:invalid-form &input~1622177385~184)))) (if (pair? &input~1622177385~184) (let ((&temp~1622177385~203 (car &input~1622177385~184))) (let ((&temp~1622177385~192 (cdr &input~1622177385~184))) (if (pair? &temp~1622177385~192) (let ((&temp~1622177385~196 (car &temp~1622177385~192))) (ex:map-while (lambda (&temp~1622177385~196) (if (pair? &temp~1622177385~196) (let ((&temp~1622177385~202 (car &temp~1622177385~196))) (let ((&i~1622177385~186 &temp~1622177385~202)) (let ((&temp~1622177385~199 (cdr &temp~1622177385~196))) (if (pair? &temp~1622177385~199) (let ((&temp~1622177385~201 (car &temp~1622177385~199))) (let ((&v~1622177385~187 &temp~1622177385~201)) (let ((&temp~1622177385~200 (cdr &temp~1622177385~199))) (if (null? &temp~1622177385~200) (list &i~1622177385~186 &v~1622177385~187) #f)))) #f)))) #f)) &temp~1622177385~196 (lambda (&cols~1622177385~197 &rest~1622177385~198) (if (null? &rest~1622177385~198) (apply (lambda (&i~1622177385~186 &v~1622177385~187) (let ((&temp~1622177385~193 (cdr &temp~1622177385~192))) (if (pair? &temp~1622177385~193) (let ((&temp~1622177385~195 (car &temp~1622177385~193))) (let ((&e1~1622177385~188 &temp~1622177385~195)) (let ((&temp~1622177385~194 (cdr &temp~1622177385~193))) (if (list? &temp~1622177385~194) (let ((&e2~1622177385~189 &temp~1622177385~194)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~191)) 0 (quote (core let))) (cons (quote ()) (append (if (= (length &i~1622177385~186) (length &v~1622177385~187)) (map (lambda (&i~1622177385~186 &v~1622177385~187) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1622177385~191)) 0 (quote (core let))) (cons &i~1622177385~186 (cons &v~1622177385~187 (quote ()))))) &i~1622177385~186 &v~1622177385~187) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((define i v) ... (let () e1 e2 ...))) (list &i~1622177385~186 &v~1622177385~187))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~191)) 0 (quote (core let))) (cons (quote ()) (cons &e1~1622177385~188 &e2~1622177385~189))) (quote ())))))) (&fail~1622177385~185))))) (&fail~1622177385~185)))) (if (null? &cols~1622177385~197) (quote (() ())) (apply map list &cols~1622177385~197))) (&fail~1622177385~185))))) (&fail~1622177385~185)))) (&fail~1622177385~185)))))) (values)) (lambda () (values)) (quote &build~1622177385~204))) (values))
(begin (ex:register-library! (ex:make-library (quote (core derived)) (lambda () (ex:uncompress (quote (((&env~1622177385~475 0 1 2 3 4) (&env~1622177385~464 5 6 7 8 9 10 1 2 3 4) (&env~1622177385~446 11 7 8 9 10 1 2 3 4) (&env~1622177385~438 12 7 8 9 10 1 2 3 4) (&env~1622177385~391 13 14 15 16 17 18 19 20 21 4) (&env~1622177385~385 22 14 15 16 17 18 19 20 21 4) (&env~1622177385~376 23 14 15 16 17 18 19 20 21 4) (&env~1622177385~368 24 14 15 16 17 18 19 20 21 4) (&env~1622177385~351 25 26 27 15 16 17 18 19 20 21 4) (&env~1622177385~342 28 26 27 15 16 17 18 19 20 21 4) (&env~1622177385~334 29 26 27 15 16 17 18 19 20 21 4) (&env~1622177385~279 30 31 32 4) (&env~1622177385~256 33 34 35 36 37 38 31 32 4) (&env~1622177385~246 39 40 34 35 36 37 38 31 32 4)) (40 (((x) . #f) ((v) . #f) ((rest) . #f))) (39 (((body) . #f))) (38 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (37 (((f) variable &f~1622177385~222 (1) #t (core derived)))) (36 ()) (35 (((bindings) variable &bindings~1622177385~230 (1) #f (core derived)))) (34 ()) (33 (((x) . #f) ((v) . #f))) (32 (((x) variable &x~1622177385~207 (1) #f (core derived)))) (31 ()) (30 (((e1) . #f) ((e2) . #f))) (29 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (28 (((e0) . #f) ((e1) . #f))) (27 (((c2) . #f) ((c3) . #f))) (26 (((rest) . #f))) (25 (((e0) . #f))) (24 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (23 (((e0) . #f) ((e1) . #f))) (22 (((e0) . #f))) (21 (((x) variable &x~1622177385~288 (1) #f (core derived)))) (20 ()) (19 (((c1) . #f) ((c2) . #f))) (18 (((f) variable &f~1622177385~299 (1) #t (core derived)))) (17 ()) (16 (((c1) variable &c1~1622177385~307 (1) #f (core derived)) ((c2*) variable &c2*~1622177385~308 (1) #f (core derived)))) (15 ()) (14 ()) (13 (((e1) . #f) ((e2) . #f))) (12 (((k) . #f) ((e1) . #f) ((e2) . #f))) (11 (((e1) . #f) ((e2) . #f))) (10 (((f) variable &f~1622177385~419 (1) #t (core derived)))) (9 ()) (8 (((c1) variable &c1~1622177385~427 (1) #f (core derived)) ((cmore) variable &cmore~1622177385~428 (1) #f (core derived)))) (7 ()) (6 (((rest) . #f))) (5 (((k) . #f) ((e1) . #f) ((e2) . #f))) (4 (((else) macro &else~1622177385~486 (0) #f (core derived)) ((=>) macro &=>~1622177385~482 (0) #f (core derived)) ((case) macro &case~1622177385~402 (0) #f (core derived)) ((cond) macro &cond~1622177385~286 (0) #f (core derived)) ((let*) macro &let*~1622177385~205 (0) #f (core derived)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro &letrec*~1622177385~180 (1 0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (1 0) #f (core let)) ((let) macro &let~1622177385~101 (1 0) #f (core let)) ((with-syntax) macro &with-syntax~1622177385~4 (1) #f (core with-syntax)) ((syntax-rules) macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) ((cdr) variable cdr (1 0) #f ()) ((car) variable car (1 0) #f ()) ((memv) variable memv (1 0) #f ()) ((null?) variable null? (1 0) #f ()) ((for-all) variable for-all (1 0) #f ()))) (3 (((x) variable &x~1622177385~404 (1) #f (core derived)))) (2 ()) (1 (((e) . #f) ((c1) . #f) ((c2) . #f))) (0 (((body) . #f))))))) (quote ((let* macro &let*~1622177385~205 (0) #f (core derived)) (cond macro &cond~1622177385~286 (0) #f (core derived)) (case macro &case~1622177385~402 (0) #f (core derived)) (else macro &else~1622177385~486 (0) #f (core derived)) (=> macro &=>~1622177385~482 (0) #f (core derived)))) (quote (((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0))) (quote (&build~1622177385~100 &build~1622177385~58 &build~1622177385~204 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &let*~1622177385~205) (lambda (&x~1622177385~207) (let ((&input~1622177385~209 &x~1622177385~207)) (let ((&fail~1622177385~210 (lambda () (let ((&fail~1622177385~211 (lambda () (ex:invalid-form &input~1622177385~209)))) (if (pair? &input~1622177385~209) (let ((&temp~1622177385~275 (car &input~1622177385~209))) (let ((&temp~1622177385~264 (cdr &input~1622177385~209))) (if (pair? &temp~1622177385~264) (let ((&temp~1622177385~268 (car &temp~1622177385~264))) (ex:map-while (lambda (&temp~1622177385~268) (if (pair? &temp~1622177385~268) (let ((&temp~1622177385~274 (car &temp~1622177385~268))) (let ((&x~1622177385~212 &temp~1622177385~274)) (let ((&temp~1622177385~271 (cdr &temp~1622177385~268))) (if (pair? &temp~1622177385~271) (let ((&temp~1622177385~273 (car &temp~1622177385~271))) (let ((&v~1622177385~213 &temp~1622177385~273)) (let ((&temp~1622177385~272 (cdr &temp~1622177385~271))) (if (null? &temp~1622177385~272) (list &x~1622177385~212 &v~1622177385~213) #f)))) #f)))) #f)) &temp~1622177385~268 (lambda (&cols~1622177385~269 &rest~1622177385~270) (if (null? &rest~1622177385~270) (apply (lambda (&x~1622177385~212 &v~1622177385~213) (let ((&temp~1622177385~265 (cdr &temp~1622177385~264))) (if (pair? &temp~1622177385~265) (let ((&temp~1622177385~267 (car &temp~1622177385~265))) (let ((&e1~1622177385~214 &temp~1622177385~267)) (let ((&temp~1622177385~266 (cdr &temp~1622177385~265))) (if (list? &temp~1622177385~266) (let ((&e2~1622177385~215 &temp~1622177385~266)) (if (for-all ex:identifier? &x~1622177385~212) (((lambda (&f~1622177385~222) ((lambda (&temp~1622177385~225) (set! &f~1622177385~222 &temp~1622177385~225) ((lambda () &f~1622177385~222))) (lambda (&bindings~1622177385~230) (let ((&input~1622177385~232 &bindings~1622177385~230)) (let ((&fail~1622177385~233 (lambda () (let ((&fail~1622177385~234 (lambda () (ex:invalid-form &input~1622177385~232)))) (if (pair? &input~1622177385~232) (let ((&temp~1622177385~248 (car &input~1622177385~232))) (if (pair? &temp~1622177385~248) (let ((&temp~1622177385~252 (car &temp~1622177385~248))) (let ((&x~1622177385~235 &temp~1622177385~252)) (let ((&temp~1622177385~249 (cdr &temp~1622177385~248))) (if (pair? &temp~1622177385~249) (let ((&temp~1622177385~251 (car &temp~1622177385~249))) (let ((&v~1622177385~236 &temp~1622177385~251)) (let ((&temp~1622177385~250 (cdr &temp~1622177385~249))) (if (null? &temp~1622177385~250) (let ((&temp~1622177385~247 (cdr &input~1622177385~232))) (let ((&rest~1622177385~237 &temp~1622177385~247)) (let ((&input~1622177385~240 (&f~1622177385~222 &rest~1622177385~237))) (let ((&fail~1622177385~242 (lambda () (ex:invalid-form &input~1622177385~240)))) (let ((&body~1622177385~243 &input~1622177385~240)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~246)) 0 (quote (core derived))) (cons (cons (cons &x~1622177385~235 (cons &v~1622177385~236 (quote ()))) (quote ())) (cons &body~1622177385~243 (quote ())))))))))) (&fail~1622177385~234))))) (&fail~1622177385~234))))) (&fail~1622177385~234))) (&fail~1622177385~234)))))) (if (pair? &input~1622177385~232) (let ((&temp~1622177385~258 (car &input~1622177385~232))) (if (pair? &temp~1622177385~258) (let ((&temp~1622177385~262 (car &temp~1622177385~258))) (let ((&x~1622177385~253 &temp~1622177385~262)) (let ((&temp~1622177385~259 (cdr &temp~1622177385~258))) (if (pair? &temp~1622177385~259) (let ((&temp~1622177385~261 (car &temp~1622177385~259))) (let ((&v~1622177385~254 &temp~1622177385~261)) (let ((&temp~1622177385~260 (cdr &temp~1622177385~259))) (if (null? &temp~1622177385~260) (let ((&temp~1622177385~257 (cdr &input~1622177385~232))) (if (null? &temp~1622177385~257) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~256)) 0 (quote (core derived))) (cons (cons (cons &x~1622177385~253 (cons &v~1622177385~254 (quote ()))) (quote ())) (cons &e1~1622177385~214 &e2~1622177385~215))) (&fail~1622177385~233))) (&fail~1622177385~233))))) (&fail~1622177385~233))))) (&fail~1622177385~233))) (&fail~1622177385~233))))))) ex:undefined) (if (= (length &x~1622177385~212) (length &v~1622177385~213)) (map (lambda (&x~1622177385~212 &v~1622177385~213) (cons &x~1622177385~212 (cons &v~1622177385~213 (quote ())))) &x~1622177385~212 &v~1622177385~213) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((x v) ...)) (list &x~1622177385~212 &v~1622177385~213)))) (&fail~1622177385~211))) (&fail~1622177385~211))))) (&fail~1622177385~211)))) (if (null? &cols~1622177385~269) (quote (() ())) (apply map list &cols~1622177385~269))) (&fail~1622177385~211))))) (&fail~1622177385~211)))) (&fail~1622177385~211)))))) (if (pair? &input~1622177385~209) (let ((&temp~1622177385~285 (car &input~1622177385~209))) (let ((&temp~1622177385~280 (cdr &input~1622177385~209))) (if (pair? &temp~1622177385~280) (let ((&temp~1622177385~284 (car &temp~1622177385~280))) (if (null? &temp~1622177385~284) (let ((&temp~1622177385~281 (cdr &temp~1622177385~280))) (if (pair? &temp~1622177385~281) (let ((&temp~1622177385~283 (car &temp~1622177385~281))) (let ((&e1~1622177385~276 &temp~1622177385~283)) (let ((&temp~1622177385~282 (cdr &temp~1622177385~281))) (if (list? &temp~1622177385~282) (let ((&e2~1622177385~277 &temp~1622177385~282)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~279)) 0 (quote (core derived))) (cons (quote ()) (cons &e1~1622177385~276 &e2~1622177385~277)))) (&fail~1622177385~210))))) (&fail~1622177385~210))) (&fail~1622177385~210))) (&fail~1622177385~210)))) (&fail~1622177385~210)))))) (ex:register-macro! (quote &cond~1622177385~286) (lambda (&x~1622177385~288) (let ((&input~1622177385~290 &x~1622177385~288)) (let ((&fail~1622177385~291 (lambda () (ex:invalid-form &input~1622177385~290)))) (if (pair? &input~1622177385~290) (let ((&temp~1622177385~401 (car &input~1622177385~290))) (let ((&temp~1622177385~398 (cdr &input~1622177385~290))) (if (pair? &temp~1622177385~398) (let ((&temp~1622177385~400 (car &temp~1622177385~398))) (let ((&c1~1622177385~292 &temp~1622177385~400)) (let ((&temp~1622177385~399 (cdr &temp~1622177385~398))) (if (list? &temp~1622177385~399) (let ((&c2~1622177385~293 &temp~1622177385~399)) (((lambda (&f~1622177385~299) ((lambda (&temp~1622177385~302) (set! &f~1622177385~299 &temp~1622177385~302) ((lambda () &f~1622177385~299))) (lambda (&c1~1622177385~307 &c2*~1622177385~308) (let ((&input~1622177385~310 &c2*~1622177385~308)) (let ((&fail~1622177385~311 (lambda () (let ((&fail~1622177385~312 (lambda () (ex:invalid-form &input~1622177385~310)))) (if (pair? &input~1622177385~310) (let ((&temp~1622177385~355 (car &input~1622177385~310))) (let ((&c2~1622177385~313 &temp~1622177385~355)) (let ((&temp~1622177385~354 (cdr &input~1622177385~310))) (if (list? &temp~1622177385~354) (let ((&c3~1622177385~314 &temp~1622177385~354)) (let ((&input~1622177385~317 (&f~1622177385~299 &c2~1622177385~313 &c3~1622177385~314))) (let ((&fail~1622177385~320 (lambda () (ex:invalid-form &input~1622177385~317)))) (let ((&rest~1622177385~321 &input~1622177385~317)) (begin (let ((&input~1622177385~324 &c1~1622177385~307)) (let ((&fail~1622177385~325 (lambda () (let ((&fail~1622177385~326 (lambda () (let ((&fail~1622177385~327 (lambda () (let ((&fail~1622177385~328 (lambda () (ex:invalid-form &input~1622177385~324)))) (ex:syntax-violation (quote cond) "Invalid expression" &x~1622177385~288))))) (if (pair? &input~1622177385~324) (let ((&temp~1622177385~338 (car &input~1622177385~324))) (let ((&e0~1622177385~330 &temp~1622177385~338)) (let ((&temp~1622177385~335 (cdr &input~1622177385~324))) (if (pair? &temp~1622177385~335) (let ((&temp~1622177385~337 (car &temp~1622177385~335))) (let ((&e1~1622177385~331 &temp~1622177385~337)) (let ((&temp~1622177385~336 (cdr &temp~1622177385~335))) (if (list? &temp~1622177385~336) (let ((&e2~1622177385~332 &temp~1622177385~336)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~334)) 0 (quote (core derived))) (cons &e0~1622177385~330 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~334)) 0 (quote (core derived))) (cons &e1~1622177385~331 &e2~1622177385~332)) (cons &rest~1622177385~321 (quote ())))))) (&fail~1622177385~327))))) (&fail~1622177385~327))))) (&fail~1622177385~327)))))) (if (pair? &input~1622177385~324) (let ((&temp~1622177385~348 (car &input~1622177385~324))) (let ((&e0~1622177385~339 &temp~1622177385~348)) (let ((&temp~1622177385~343 (cdr &input~1622177385~324))) (if (pair? &temp~1622177385~343) (let ((&temp~1622177385~347 (car &temp~1622177385~343))) (if (and (ex:identifier? &temp~1622177385~347) (ex:free-identifier=? &temp~1622177385~347 (ex:syntax-rename (quote =>) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))))) (let ((&temp~1622177385~344 (cdr &temp~1622177385~343))) (if (pair? &temp~1622177385~344) (let ((&temp~1622177385~346 (car &temp~1622177385~344))) (let ((&e1~1622177385~340 &temp~1622177385~346)) (let ((&temp~1622177385~345 (cdr &temp~1622177385~344))) (if (null? &temp~1622177385~345) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))) (cons &e0~1622177385~339 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))) (cons (cons &e1~1622177385~340 (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~342)) 0 (quote (core derived))) (quote ()))) (cons &rest~1622177385~321 (quote ()))))) (quote ())))) (&fail~1622177385~326))))) (&fail~1622177385~326))) (&fail~1622177385~326))) (&fail~1622177385~326))))) (&fail~1622177385~326)))))) (if (pair? &input~1622177385~324) (let ((&temp~1622177385~353 (car &input~1622177385~324))) (let ((&e0~1622177385~349 &temp~1622177385~353)) (let ((&temp~1622177385~352 (cdr &input~1622177385~324))) (if (null? &temp~1622177385~352) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~351)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~351)) 0 (quote (core derived))) (cons &e0~1622177385~349 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~351)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~351)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~351)) 0 (quote (core derived))) (cons &rest~1622177385~321 (quote ()))))) (quote ())))) (&fail~1622177385~325))))) (&fail~1622177385~325))))))))) (&fail~1622177385~312))))) (&fail~1622177385~312)))))) (if (null? &input~1622177385~310) (let ((&input~1622177385~357 &c1~1622177385~307)) (let ((&fail~1622177385~358 (lambda () (let ((&fail~1622177385~359 (lambda () (let ((&fail~1622177385~360 (lambda () (let ((&fail~1622177385~361 (lambda () (let ((&fail~1622177385~362 (lambda () (ex:invalid-form &input~1622177385~357)))) (ex:syntax-violation (quote cond) "Invalid expression" &x~1622177385~288))))) (if (pair? &input~1622177385~357) (let ((&temp~1622177385~372 (car &input~1622177385~357))) (let ((&e0~1622177385~364 &temp~1622177385~372)) (let ((&temp~1622177385~369 (cdr &input~1622177385~357))) (if (pair? &temp~1622177385~369) (let ((&temp~1622177385~371 (car &temp~1622177385~369))) (let ((&e1~1622177385~365 &temp~1622177385~371)) (let ((&temp~1622177385~370 (cdr &temp~1622177385~369))) (if (list? &temp~1622177385~370) (let ((&e2~1622177385~366 &temp~1622177385~370)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~368)) 0 (quote (core derived))) (cons &e0~1622177385~364 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~368)) 0 (quote (core derived))) (cons &e1~1622177385~365 &e2~1622177385~366)) (quote ()))))) (&fail~1622177385~361))))) (&fail~1622177385~361))))) (&fail~1622177385~361)))))) (if (pair? &input~1622177385~357) (let ((&temp~1622177385~382 (car &input~1622177385~357))) (let ((&e0~1622177385~373 &temp~1622177385~382)) (let ((&temp~1622177385~377 (cdr &input~1622177385~357))) (if (pair? &temp~1622177385~377) (let ((&temp~1622177385~381 (car &temp~1622177385~377))) (if (and (ex:identifier? &temp~1622177385~381) (ex:free-identifier=? &temp~1622177385~381 (ex:syntax-rename (quote =>) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))))) (let ((&temp~1622177385~378 (cdr &temp~1622177385~377))) (if (pair? &temp~1622177385~378) (let ((&temp~1622177385~380 (car &temp~1622177385~378))) (let ((&e1~1622177385~374 &temp~1622177385~380)) (let ((&temp~1622177385~379 (cdr &temp~1622177385~378))) (if (null? &temp~1622177385~379) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))) (cons &e0~1622177385~373 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))) (cons (cons &e1~1622177385~374 (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~376)) 0 (quote (core derived))) (quote ()))) (quote ())))) (quote ())))) (&fail~1622177385~360))))) (&fail~1622177385~360))) (&fail~1622177385~360))) (&fail~1622177385~360))))) (&fail~1622177385~360)))))) (if (pair? &input~1622177385~357) (let ((&temp~1622177385~387 (car &input~1622177385~357))) (let ((&e0~1622177385~383 &temp~1622177385~387)) (let ((&temp~1622177385~386 (cdr &input~1622177385~357))) (if (null? &temp~1622177385~386) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~385)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~385)) 0 (quote (core derived))) (cons &e0~1622177385~383 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~385)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~385)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~385)) 0 (quote (core derived))) (quote ())))) (quote ())))) (&fail~1622177385~359))))) (&fail~1622177385~359)))))) (if (pair? &input~1622177385~357) (let ((&temp~1622177385~395 (car &input~1622177385~357))) (if (and (ex:identifier? &temp~1622177385~395) (ex:free-identifier=? &temp~1622177385~395 (ex:syntax-rename (quote else) (quote ()) (quote (&env~1622177385~391)) 0 (quote (core derived))))) (let ((&temp~1622177385~392 (cdr &input~1622177385~357))) (if (pair? &temp~1622177385~392) (let ((&temp~1622177385~394 (car &temp~1622177385~392))) (let ((&e1~1622177385~388 &temp~1622177385~394)) (let ((&temp~1622177385~393 (cdr &temp~1622177385~392))) (if (list? &temp~1622177385~393) (let ((&e2~1622177385~389 &temp~1622177385~393)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~391)) 0 (quote (core derived))) (cons &e1~1622177385~388 &e2~1622177385~389))) (&fail~1622177385~358))))) (&fail~1622177385~358))) (&fail~1622177385~358))) (&fail~1622177385~358)))) (&fail~1622177385~311))))))) ex:undefined) &c1~1622177385~292 &c2~1622177385~293)) (&fail~1622177385~291))))) (&fail~1622177385~291)))) (&fail~1622177385~291)))))) (ex:register-macro! (quote &case~1622177385~402) (lambda (&x~1622177385~404) (let ((&input~1622177385~406 &x~1622177385~404)) (let ((&fail~1622177385~407 (lambda () (ex:invalid-form &input~1622177385~406)))) (if (pair? &input~1622177385~406) (let ((&temp~1622177385~481 (car &input~1622177385~406))) (let ((&temp~1622177385~476 (cdr &input~1622177385~406))) (if (pair? &temp~1622177385~476) (let ((&temp~1622177385~480 (car &temp~1622177385~476))) (let ((&e~1622177385~408 &temp~1622177385~480)) (let ((&temp~1622177385~477 (cdr &temp~1622177385~476))) (if (pair? &temp~1622177385~477) (let ((&temp~1622177385~479 (car &temp~1622177385~477))) (let ((&c1~1622177385~409 &temp~1622177385~479)) (let ((&temp~1622177385~478 (cdr &temp~1622177385~477))) (if (list? &temp~1622177385~478) (let ((&c2~1622177385~410 &temp~1622177385~478)) (let ((&input~1622177385~413 (((lambda (&f~1622177385~419) ((lambda (&temp~1622177385~422) (set! &f~1622177385~419 &temp~1622177385~422) ((lambda () &f~1622177385~419))) (lambda (&c1~1622177385~427 &cmore~1622177385~428) (if (null? &cmore~1622177385~428) (let ((&input~1622177385~431 &c1~1622177385~427)) (let ((&fail~1622177385~432 (lambda () (let ((&fail~1622177385~433 (lambda () (ex:invalid-form &input~1622177385~431)))) (if (pair? &input~1622177385~431) (let ((&temp~1622177385~442 (car &input~1622177385~431))) (if (list? &temp~1622177385~442) (let ((&k~1622177385~434 &temp~1622177385~442)) (let ((&temp~1622177385~439 (cdr &input~1622177385~431))) (if (pair? &temp~1622177385~439) (let ((&temp~1622177385~441 (car &temp~1622177385~439))) (let ((&e1~1622177385~435 &temp~1622177385~441)) (let ((&temp~1622177385~440 (cdr &temp~1622177385~439))) (if (list? &temp~1622177385~440) (let ((&e2~1622177385~436 &temp~1622177385~440)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~438)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote memv) (quote ()) (quote (&env~1622177385~438)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~438)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~438)) 0 (quote (core derived))) (cons &k~1622177385~434 (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~438)) 0 (quote (core derived))) (cons &e1~1622177385~435 &e2~1622177385~436)) (quote ()))))) (&fail~1622177385~433))))) (&fail~1622177385~433)))) (&fail~1622177385~433))) (&fail~1622177385~433)))))) (if (pair? &input~1622177385~431) (let ((&temp~1622177385~450 (car &input~1622177385~431))) (if (and (ex:identifier? &temp~1622177385~450) (ex:free-identifier=? &temp~1622177385~450 (ex:syntax-rename (quote else) (quote ()) (quote (&env~1622177385~446)) 0 (quote (core derived))))) (let ((&temp~1622177385~447 (cdr &input~1622177385~431))) (if (pair? &temp~1622177385~447) (let ((&temp~1622177385~449 (car &temp~1622177385~447))) (let ((&e1~1622177385~443 &temp~1622177385~449)) (let ((&temp~1622177385~448 (cdr &temp~1622177385~447))) (if (list? &temp~1622177385~448) (let ((&e2~1622177385~444 &temp~1622177385~448)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~446)) 0 (quote (core derived))) (cons &e1~1622177385~443 &e2~1622177385~444))) (&fail~1622177385~432))))) (&fail~1622177385~432))) (&fail~1622177385~432))) (&fail~1622177385~432)))) (let ((&input~1622177385~453 (&f~1622177385~419 (car &cmore~1622177385~428) (cdr &cmore~1622177385~428)))) (let ((&fail~1622177385~454 (lambda () (ex:invalid-form &input~1622177385~453)))) (let ((&rest~1622177385~455 &input~1622177385~453)) (begin (let ((&input~1622177385~458 &c1~1622177385~427)) (let ((&fail~1622177385~459 (lambda () (ex:invalid-form &input~1622177385~458)))) (if (pair? &input~1622177385~458) (let ((&temp~1622177385~468 (car &input~1622177385~458))) (if (list? &temp~1622177385~468) (let ((&k~1622177385~460 &temp~1622177385~468)) (let ((&temp~1622177385~465 (cdr &input~1622177385~458))) (if (pair? &temp~1622177385~465) (let ((&temp~1622177385~467 (car &temp~1622177385~465))) (let ((&e1~1622177385~461 &temp~1622177385~467)) (let ((&temp~1622177385~466 (cdr &temp~1622177385~465))) (if (list? &temp~1622177385~466) (let ((&e2~1622177385~462 &temp~1622177385~466)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~464)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote memv) (quote ()) (quote (&env~1622177385~464)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~464)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~464)) 0 (quote (core derived))) (cons &k~1622177385~460 (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~464)) 0 (quote (core derived))) (cons &e1~1622177385~461 &e2~1622177385~462)) (cons &rest~1622177385~455 (quote ())))))) (&fail~1622177385~459))))) (&fail~1622177385~459)))) (&fail~1622177385~459))) (&fail~1622177385~459)))))))))))) ex:undefined) &c1~1622177385~409 &c2~1622177385~410))) (let ((&fail~1622177385~471 (lambda () (ex:invalid-form &input~1622177385~413)))) (let ((&body~1622177385~472 &input~1622177385~413)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~475)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1622177385~475)) 0 (quote (core derived))) (cons &e~1622177385~408 (quote ()))) (quote ())) (cons &body~1622177385~472 (quote ()))))))))) (&fail~1622177385~407))))) (&fail~1622177385~407))))) (&fail~1622177385~407)))) (&fail~1622177385~407)))))) (ex:register-macro! (quote &=>~1622177385~482) (lambda (&x~1622177385~484) (ex:syntax-violation (quote =>) "Invalid expression" &x~1622177385~484))) (ex:register-macro! (quote &else~1622177385~486) (lambda (&x~1622177385~488) (ex:syntax-violation (quote else) "Invalid expression" &x~1622177385~488))) (values)) (lambda () (values)) (quote &build~1622177385~490))) (values))
(begin (ex:register-library! (ex:make-library (quote (core identifier-syntax)) (lambda () (ex:uncompress (quote (((&env~1622177385~531 0 1 2 3) (&env~1622177385~508 4 1 2 3)) (4 (((id) . #f) ((exp1) . #f) ((var) . #f) ((val) . #f) ((exp2) . #f))) (3 (((identifier-syntax) macro &identifier-syntax~1622177385~491 (0) #f (core identifier-syntax)) ((undefined) variable ex:undefined (1 0 -1) #f ()) ((eval) variable ex:eval (1 0 -1) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0 -1) #f ()) ((environment) variable ex:environment (1 0 -1) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0 -1) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0 -1) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0 -1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0 -1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0 -1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0 -1) #f ()) ((identifier?) variable ex:identifier? (1 0 -1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0 -1) #f ()) ((syntax-case) macro syntax-case (1 0 -1) #f ()) ((syntax) macro syntax (1 0 -1) #f ()) ((...) macro ... (1 0 -1) #f ()) ((_) macro _ (1 0 -1) #f ()) ((letrec-syntax) macro letrec-syntax (1 0 -1) #f ()) ((let-syntax) macro let-syntax (1 0 -1) #f ()) ((define-syntax) macro define-syntax (1 0 -1) #f ()) ((define) macro define (1 0 -1) #f ()) ((or) macro or (1 0 -1) #f ()) ((and) macro and (1 0 -1) #f ()) ((set!) macro set! (1 0 -1) #f ()) ((quote) macro quote (1 0 -1) #f ()) ((lambda) macro lambda (1 0 -1) #f ()) ((if) macro if (1 0 -1) #f ()) ((begin) macro begin (1 0 -1) #f ()))) (2 (((x) variable &x~1622177385~493 (1) #f (core identifier-syntax)))) (1 ()) (0 (((e) . #f))))))) (quote ((identifier-syntax macro &identifier-syntax~1622177385~491 (0) #f (core identifier-syntax)))) (quote (((core primitives) 1 0 -1))) (quote (&build~1622177385~3)) (lambda () (ex:register-macro! (quote &identifier-syntax~1622177385~491) (lambda (&x~1622177385~493) (let ((&input~1622177385~495 &x~1622177385~493)) (let ((&fail~1622177385~496 (lambda () (let ((&fail~1622177385~497 (lambda () (ex:invalid-form &input~1622177385~495)))) (if (pair? &input~1622177385~495) (let ((&temp~1622177385~528 (car &input~1622177385~495))) (let ((&temp~1622177385~509 (cdr &input~1622177385~495))) (if (pair? &temp~1622177385~509) (let ((&temp~1622177385~523 (car &temp~1622177385~509))) (if (pair? &temp~1622177385~523) (let ((&temp~1622177385~527 (car &temp~1622177385~523))) (let ((&id~1622177385~498 &temp~1622177385~527)) (let ((&temp~1622177385~524 (cdr &temp~1622177385~523))) (if (pair? &temp~1622177385~524) (let ((&temp~1622177385~526 (car &temp~1622177385~524))) (let ((&exp1~1622177385~499 &temp~1622177385~526)) (let ((&temp~1622177385~525 (cdr &temp~1622177385~524))) (if (null? &temp~1622177385~525) (let ((&temp~1622177385~510 (cdr &temp~1622177385~509))) (if (pair? &temp~1622177385~510) (let ((&temp~1622177385~512 (car &temp~1622177385~510))) (if (pair? &temp~1622177385~512) (let ((&temp~1622177385~516 (car &temp~1622177385~512))) (if (pair? &temp~1622177385~516) (let ((&temp~1622177385~522 (car &temp~1622177385~516))) (if (and (ex:identifier? &temp~1622177385~522) (ex:free-identifier=? &temp~1622177385~522 (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))))) (let ((&temp~1622177385~517 (cdr &temp~1622177385~516))) (if (pair? &temp~1622177385~517) (let ((&temp~1622177385~521 (car &temp~1622177385~517))) (let ((&var~1622177385~500 &temp~1622177385~521)) (let ((&temp~1622177385~518 (cdr &temp~1622177385~517))) (if (pair? &temp~1622177385~518) (let ((&temp~1622177385~520 (car &temp~1622177385~518))) (let ((&val~1622177385~501 &temp~1622177385~520)) (let ((&temp~1622177385~519 (cdr &temp~1622177385~518))) (if (null? &temp~1622177385~519) (let ((&temp~1622177385~513 (cdr &temp~1622177385~512))) (if (pair? &temp~1622177385~513) (let ((&temp~1622177385~515 (car &temp~1622177385~513))) (let ((&exp2~1622177385~502 &temp~1622177385~515)) (let ((&temp~1622177385~514 (cdr &temp~1622177385~513))) (if (null? &temp~1622177385~514) (let ((&temp~1622177385~511 (cdr &temp~1622177385~510))) (if (null? &temp~1622177385~511) (if (if (ex:identifier? &id~1622177385~498) (ex:identifier? &var~1622177385~500) #f) (cons (ex:syntax-rename (quote make-variable-transformer) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons &var~1622177385~500 (cons &val~1622177385~501 (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons &exp2~1622177385~502 (quote ()))) (quote ()))) (cons (cons (cons &id~1622177385~498 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (cons &exp1~1622177385~499 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (quote ())))) (quote ()))) (quote ()))) (cons (cons &id~1622177385~498 (cons (cons (ex:syntax-rename (quote identifier?) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons &id~1622177385~498 (quote ()))) (quote ()))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~508)) 0 (quote (core identifier-syntax))) (cons &exp1~1622177385~499 (quote ()))) (quote ())))) (quote ()))))))) (quote ())))) (quote ()))) (&fail~1622177385~497)) (&fail~1622177385~497))) (&fail~1622177385~497))))) (&fail~1622177385~497))) (&fail~1622177385~497))))) (&fail~1622177385~497))))) (&fail~1622177385~497))) (&fail~1622177385~497))) (&fail~1622177385~497))) (&fail~1622177385~497))) (&fail~1622177385~497))) (&fail~1622177385~497))))) (&fail~1622177385~497))))) (&fail~1622177385~497))) (&fail~1622177385~497)))) (&fail~1622177385~497)))))) (if (pair? &input~1622177385~495) (let ((&temp~1622177385~535 (car &input~1622177385~495))) (let ((&temp~1622177385~532 (cdr &input~1622177385~495))) (if (pair? &temp~1622177385~532) (let ((&temp~1622177385~534 (car &temp~1622177385~532))) (let ((&e~1622177385~529 &temp~1622177385~534)) (let ((&temp~1622177385~533 (cdr &temp~1622177385~532))) (if (null? &temp~1622177385~533) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (quote ()) (cons (cons (ex:syntax-rename (quote id) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote identifier?) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote id) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (quote ()))) (quote ()))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons &e~1622177385~529 (quote ()))) (quote ())))) (cons (cons (cons (ex:syntax-rename (quote _) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (cons &e~1622177385~529 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1622177385~531)) 0 (quote (core identifier-syntax))) (quote ())))) (quote ()))) (quote ()))) (quote ())))))) (quote ())))) (&fail~1622177385~496))))) (&fail~1622177385~496)))) (&fail~1622177385~496)))))) (values)) (lambda () (values)) (quote &build~1622177385~536))) (values))
(begin (ex:register-library! (ex:make-library (quote (core quasisyntax)) (lambda () (ex:uncompress (quote (((&env~1622177385~754 0 1 2 3 4 5) (&env~1622177385~726 6 1 2 3 4 5) (&env~1622177385~710 7 1 2 3 4 5) (&env~1622177385~684 8 1 2 3 4 5) (&env~1622177385~665 9 8 1 2 3 4 5) (&env~1622177385~630 10 1 2 3 4 5) (&env~1622177385~554 11 12 3 4 5)) (12 (((template) . #f))) (11 (((template*) . #f) ((replacements) . #f))) (10 (((k) . #f) ((r) . #f))) (9 (((r*) . #f) ((rep) . #f) ((t) . #f))) (8 (((e) . #f) ((r) . #f))) (7 (((e) . #f) ((r) . #f))) (6 (((e) . #f))) (5 (((unsyntax-splicing) macro &unsyntax-splicing~1622177385~759 (0) #f (core quasisyntax)) ((unsyntax) macro &unsyntax~1622177385~755 (0) #f (core quasisyntax)) ((quasisyntax) macro &quasisyntax~1622177385~537 (0) #f (core quasisyntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro &letrec*~1622177385~180 (0 1) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0 1) #f (core let)) ((let) macro &let~1622177385~101 (0 1) #f (core let)) ((=>) macro &=>~1622177385~482 (0 1) #f (core derived)) ((else) macro &else~1622177385~486 (0 1) #f (core derived)) ((case) macro &case~1622177385~402 (0 1) #f (core derived)) ((cond) macro &cond~1622177385~286 (0 1) #f (core derived)) ((let*) macro &let*~1622177385~205 (0 1) #f (core derived)) ((with-syntax) macro &with-syntax~1622177385~4 (0 1) #f (core with-syntax)) ((vector->list) variable vector->list (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((>) variable > (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 (((e) variable &e~1622177385~539 (1) #f (core quasisyntax)))) (3 (((expand) variable &expand~1622177385~540 (1) #f (core quasisyntax)))) (2 (((x) variable &x~1622177385~564 (1) #f (core quasisyntax)) ((level) variable &level~1622177385~565 (1) #f (core quasisyntax)))) (1 ()) (0 (((e) . #f))))))) (quote ((quasisyntax macro &quasisyntax~1622177385~537 (0) #f (core quasisyntax)) (unsyntax macro &unsyntax~1622177385~755 (0) #f (core quasisyntax)) (unsyntax-splicing macro &unsyntax-splicing~1622177385~759 (0) #f (core quasisyntax)))) (quote (((core with-syntax) 0 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1))) (quote (&build~1622177385~58 &build~1622177385~490 &build~1622177385~204 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &quasisyntax~1622177385~537) (lambda (&e~1622177385~539) ((lambda (&expand~1622177385~540) (set! &expand~1622177385~540 (lambda (&x~1622177385~564 &level~1622177385~565) (let ((&input~1622177385~567 &x~1622177385~564)) (let ((&fail~1622177385~568 (lambda () (let ((&fail~1622177385~569 (lambda () (let ((&fail~1622177385~570 (lambda () (let ((&fail~1622177385~571 (lambda () (let ((&fail~1622177385~572 (lambda () (let ((&fail~1622177385~573 (lambda () (let ((&fail~1622177385~574 (lambda () (let ((&fail~1622177385~575 (lambda () (ex:invalid-form &input~1622177385~567)))) (let ((&other~1622177385~576 &input~1622177385~567)) (cons &other~1622177385~576 (cons (quote ()) (quote ())))))))) (if (vector? &input~1622177385~567) (let ((&temp~1622177385~592 (vector->list &input~1622177385~567))) (if (list? &temp~1622177385~592) (let ((&e~1622177385~578 &temp~1622177385~592)) (let ((&input~1622177385~581 (&expand~1622177385~540 (vector->list (list->vector &e~1622177385~578)) &level~1622177385~565))) (let ((&fail~1622177385~583 (lambda () (ex:invalid-form &input~1622177385~581)))) (if (pair? &input~1622177385~581) (let ((&temp~1622177385~591 (car &input~1622177385~581))) (if (list? &temp~1622177385~591) (let ((&e*~1622177385~584 &temp~1622177385~591)) (let ((&temp~1622177385~588 (cdr &input~1622177385~581))) (if (pair? &temp~1622177385~588) (let ((&temp~1622177385~590 (car &temp~1622177385~588))) (let ((&reps~1622177385~585 &temp~1622177385~590)) (let ((&temp~1622177385~589 (cdr &temp~1622177385~588))) (if (null? &temp~1622177385~589) (begin (cons (list->vector &e*~1622177385~584) (cons &reps~1622177385~585 (quote ())))) (&fail~1622177385~583))))) (&fail~1622177385~583)))) (&fail~1622177385~583))) (&fail~1622177385~583))))) (&fail~1622177385~574))) (&fail~1622177385~574)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~620 (car &input~1622177385~567))) (let ((&h~1622177385~593 &temp~1622177385~620)) (let ((&temp~1622177385~619 (cdr &input~1622177385~567))) (let ((&t~1622177385~594 &temp~1622177385~619)) (let ((&input~1622177385~597 (list (&expand~1622177385~540 &h~1622177385~593 &level~1622177385~565) (&expand~1622177385~540 &t~1622177385~594 &level~1622177385~565)))) (let ((&fail~1622177385~600 (lambda () (ex:invalid-form &input~1622177385~597)))) (if (pair? &input~1622177385~597) (let ((&temp~1622177385~614 (car &input~1622177385~597))) (if (pair? &temp~1622177385~614) (let ((&temp~1622177385~618 (car &temp~1622177385~614))) (let ((&h*~1622177385~601 &temp~1622177385~618)) (let ((&temp~1622177385~615 (cdr &temp~1622177385~614))) (if (pair? &temp~1622177385~615) (let ((&temp~1622177385~617 (car &temp~1622177385~615))) (if (list? &temp~1622177385~617) (let ((&rep1~1622177385~602 &temp~1622177385~617)) (let ((&temp~1622177385~616 (cdr &temp~1622177385~615))) (if (null? &temp~1622177385~616) (let ((&temp~1622177385~607 (cdr &input~1622177385~597))) (if (pair? &temp~1622177385~607) (let ((&temp~1622177385~609 (car &temp~1622177385~607))) (if (pair? &temp~1622177385~609) (let ((&temp~1622177385~613 (car &temp~1622177385~609))) (let ((&t*~1622177385~603 &temp~1622177385~613)) (let ((&temp~1622177385~610 (cdr &temp~1622177385~609))) (if (pair? &temp~1622177385~610) (let ((&temp~1622177385~612 (car &temp~1622177385~610))) (if (list? &temp~1622177385~612) (let ((&rep2~1622177385~604 &temp~1622177385~612)) (let ((&temp~1622177385~611 (cdr &temp~1622177385~610))) (if (null? &temp~1622177385~611) (let ((&temp~1622177385~608 (cdr &temp~1622177385~607))) (if (null? &temp~1622177385~608) (begin (cons (cons &h*~1622177385~601 &t*~1622177385~603) (cons (append &rep1~1622177385~602 &rep2~1622177385~604) (quote ())))) (&fail~1622177385~600))) (&fail~1622177385~600)))) (&fail~1622177385~600))) (&fail~1622177385~600))))) (&fail~1622177385~600))) (&fail~1622177385~600))) (&fail~1622177385~600)))) (&fail~1622177385~600))) (&fail~1622177385~600))))) (&fail~1622177385~600))) (&fail~1622177385~600)))))))) (&fail~1622177385~573)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~648 (car &input~1622177385~567))) (let ((&k~1622177385~621 &temp~1622177385~648)) (let ((&temp~1622177385~647 (cdr &input~1622177385~567))) (let ((&r~1622177385~622 &temp~1622177385~647)) (if (if (> &level~1622177385~565 0) (if (ex:identifier? &k~1622177385~621) (let ((x (ex:free-identifier=? &k~1622177385~621 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1622177385~630)) 0 (quote (core quasisyntax)))))) (if x x (ex:free-identifier=? &k~1622177385~621 (ex:syntax-rename (quote unsyntax-splicing) (quote ()) (quote (&env~1622177385~630)) 0 (quote (core quasisyntax)))))) #f) #f) (let ((&input~1622177385~636 (&expand~1622177385~540 &r~1622177385~622 (- &level~1622177385~565 1)))) (let ((&fail~1622177385~638 (lambda () (ex:invalid-form &input~1622177385~636)))) (if (pair? &input~1622177385~636) (let ((&temp~1622177385~646 (car &input~1622177385~636))) (let ((&r*~1622177385~639 &temp~1622177385~646)) (let ((&temp~1622177385~643 (cdr &input~1622177385~636))) (if (pair? &temp~1622177385~643) (let ((&temp~1622177385~645 (car &temp~1622177385~643))) (let ((&reps~1622177385~640 &temp~1622177385~645)) (let ((&temp~1622177385~644 (cdr &temp~1622177385~643))) (if (null? &temp~1622177385~644) (begin (cons (cons &k~1622177385~621 &r*~1622177385~639) (cons &reps~1622177385~640 (quote ())))) (&fail~1622177385~638))))) (&fail~1622177385~638))))) (&fail~1622177385~638)))) (&fail~1622177385~572)))))) (&fail~1622177385~572)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~681 (car &input~1622177385~567))) (if (pair? &temp~1622177385~681) (let ((&temp~1622177385~683 (car &temp~1622177385~681))) (if (and (ex:identifier? &temp~1622177385~683) (ex:free-identifier=? &temp~1622177385~683 (ex:syntax-rename (quote unsyntax-splicing) (quote ()) (quote (&env~1622177385~684)) 0 (quote (core quasisyntax))))) (let ((&temp~1622177385~682 (cdr &temp~1622177385~681))) (if (list? &temp~1622177385~682) (let ((&e~1622177385~649 &temp~1622177385~682)) (let ((&temp~1622177385~680 (cdr &input~1622177385~567))) (let ((&r~1622177385~650 &temp~1622177385~680)) (if (= &level~1622177385~565 0) (let ((&input~1622177385~653 (list (&expand~1622177385~540 &r~1622177385~650 0) (ex:generate-temporaries &e~1622177385~649)))) (let ((&fail~1622177385~656 (lambda () (ex:invalid-form &input~1622177385~653)))) (if (pair? &input~1622177385~653) (let ((&temp~1622177385~675 (car &input~1622177385~653))) (if (pair? &temp~1622177385~675) (let ((&temp~1622177385~679 (car &temp~1622177385~675))) (let ((&r*~1622177385~657 &temp~1622177385~679)) (let ((&temp~1622177385~676 (cdr &temp~1622177385~675))) (if (pair? &temp~1622177385~676) (let ((&temp~1622177385~678 (car &temp~1622177385~676))) (if (list? &temp~1622177385~678) (let ((&rep~1622177385~658 &temp~1622177385~678)) (let ((&temp~1622177385~677 (cdr &temp~1622177385~676))) (if (null? &temp~1622177385~677) (let ((&temp~1622177385~672 (cdr &input~1622177385~653))) (if (pair? &temp~1622177385~672) (let ((&temp~1622177385~674 (car &temp~1622177385~672))) (if (list? &temp~1622177385~674) (let ((&t~1622177385~659 &temp~1622177385~674)) (let ((&temp~1622177385~673 (cdr &temp~1622177385~672))) (if (null? &temp~1622177385~673) (begin (let ((&input~1622177385~663 (map (lambda (&t~1622177385~659) (cons &t~1622177385~659 (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1622177385~665)) 0 (quote (core quasisyntax))) (quote ())))) &t~1622177385~659))) (let ((&fail~1622177385~666 (lambda () (ex:invalid-form &input~1622177385~663)))) (ex:map-while (lambda (&input~1622177385~663) (if (list? &input~1622177385~663) (let ((&t~1622177385~667 &input~1622177385~663)) (list &t~1622177385~667)) #f)) &input~1622177385~663 (lambda (&cols~1622177385~670 &rest~1622177385~671) (if (null? &rest~1622177385~671) (apply (lambda (&t~1622177385~667) (begin (cons (append (apply append &t~1622177385~667) &r*~1622177385~657) (cons (append (if (= (length &t~1622177385~667) (length &e~1622177385~649)) (map (lambda (&t~1622177385~667 &e~1622177385~649) (cons &t~1622177385~667 (cons &e~1622177385~649 (quote ())))) &t~1622177385~667 &e~1622177385~649) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote (((t ...) e) ... rep ...)) (list &t~1622177385~667 &e~1622177385~649))) &rep~1622177385~658) (quote ()))))) (if (null? &cols~1622177385~670) (quote (())) (apply map list &cols~1622177385~670))) (&fail~1622177385~666))))))) (&fail~1622177385~656)))) (&fail~1622177385~656))) (&fail~1622177385~656))) (&fail~1622177385~656)))) (&fail~1622177385~656))) (&fail~1622177385~656))))) (&fail~1622177385~656))) (&fail~1622177385~656)))) (&fail~1622177385~571))))) (&fail~1622177385~571))) (&fail~1622177385~571))) (&fail~1622177385~571))) (&fail~1622177385~571)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~707 (car &input~1622177385~567))) (if (pair? &temp~1622177385~707) (let ((&temp~1622177385~709 (car &temp~1622177385~707))) (if (and (ex:identifier? &temp~1622177385~709) (ex:free-identifier=? &temp~1622177385~709 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1622177385~710)) 0 (quote (core quasisyntax))))) (let ((&temp~1622177385~708 (cdr &temp~1622177385~707))) (if (list? &temp~1622177385~708) (let ((&e~1622177385~685 &temp~1622177385~708)) (let ((&temp~1622177385~706 (cdr &input~1622177385~567))) (let ((&r~1622177385~686 &temp~1622177385~706)) (if (= &level~1622177385~565 0) (let ((&input~1622177385~689 (list (&expand~1622177385~540 &r~1622177385~686 0) (ex:generate-temporaries &e~1622177385~685)))) (let ((&fail~1622177385~692 (lambda () (ex:invalid-form &input~1622177385~689)))) (if (pair? &input~1622177385~689) (let ((&temp~1622177385~701 (car &input~1622177385~689))) (if (pair? &temp~1622177385~701) (let ((&temp~1622177385~705 (car &temp~1622177385~701))) (let ((&r*~1622177385~693 &temp~1622177385~705)) (let ((&temp~1622177385~702 (cdr &temp~1622177385~701))) (if (pair? &temp~1622177385~702) (let ((&temp~1622177385~704 (car &temp~1622177385~702))) (if (list? &temp~1622177385~704) (let ((&rep~1622177385~694 &temp~1622177385~704)) (let ((&temp~1622177385~703 (cdr &temp~1622177385~702))) (if (null? &temp~1622177385~703) (let ((&temp~1622177385~698 (cdr &input~1622177385~689))) (if (pair? &temp~1622177385~698) (let ((&temp~1622177385~700 (car &temp~1622177385~698))) (if (list? &temp~1622177385~700) (let ((&t~1622177385~695 &temp~1622177385~700)) (let ((&temp~1622177385~699 (cdr &temp~1622177385~698))) (if (null? &temp~1622177385~699) (begin (cons (append &t~1622177385~695 &r*~1622177385~693) (cons (append (if (= (length &t~1622177385~695) (length &e~1622177385~685)) (map (lambda (&t~1622177385~695 &e~1622177385~685) (cons &t~1622177385~695 (cons &e~1622177385~685 (quote ())))) &t~1622177385~695 &e~1622177385~685) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((t e) ... rep ...)) (list &t~1622177385~695 &e~1622177385~685))) &rep~1622177385~694) (quote ())))) (&fail~1622177385~692)))) (&fail~1622177385~692))) (&fail~1622177385~692))) (&fail~1622177385~692)))) (&fail~1622177385~692))) (&fail~1622177385~692))))) (&fail~1622177385~692))) (&fail~1622177385~692)))) (&fail~1622177385~570))))) (&fail~1622177385~570))) (&fail~1622177385~570))) (&fail~1622177385~570))) (&fail~1622177385~570)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~725 (car &input~1622177385~567))) (if (and (ex:identifier? &temp~1622177385~725) (ex:free-identifier=? &temp~1622177385~725 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1622177385~726)) 0 (quote (core quasisyntax))))) (let ((&temp~1622177385~722 (cdr &input~1622177385~567))) (if (pair? &temp~1622177385~722) (let ((&temp~1622177385~724 (car &temp~1622177385~722))) (let ((&e~1622177385~711 &temp~1622177385~724)) (let ((&temp~1622177385~723 (cdr &temp~1622177385~722))) (if (null? &temp~1622177385~723) (if (= &level~1622177385~565 0) (let ((&input~1622177385~714 (ex:generate-temporaries (quote (t))))) (let ((&fail~1622177385~716 (lambda () (ex:invalid-form &input~1622177385~714)))) (if (pair? &input~1622177385~714) (let ((&temp~1622177385~721 (car &input~1622177385~714))) (let ((&t~1622177385~717 &temp~1622177385~721)) (let ((&temp~1622177385~720 (cdr &input~1622177385~714))) (if (null? &temp~1622177385~720) (begin (cons &t~1622177385~717 (cons (cons (cons &t~1622177385~717 (cons &e~1622177385~711 (quote ()))) (quote ())) (quote ())))) (&fail~1622177385~716))))) (&fail~1622177385~716)))) (&fail~1622177385~569)) (&fail~1622177385~569))))) (&fail~1622177385~569))) (&fail~1622177385~569))) (&fail~1622177385~569)))))) (if (pair? &input~1622177385~567) (let ((&temp~1622177385~753 (car &input~1622177385~567))) (if (and (ex:identifier? &temp~1622177385~753) (ex:free-identifier=? &temp~1622177385~753 (ex:syntax-rename (quote quasisyntax) (quote ()) (quote (&env~1622177385~754)) 0 (quote (core quasisyntax))))) (let ((&temp~1622177385~750 (cdr &input~1622177385~567))) (if (pair? &temp~1622177385~750) (let ((&temp~1622177385~752 (car &temp~1622177385~750))) (let ((&e~1622177385~727 &temp~1622177385~752)) (let ((&temp~1622177385~751 (cdr &temp~1622177385~750))) (if (null? &temp~1622177385~751) (let ((&input~1622177385~730 (list &x~1622177385~564 (&expand~1622177385~540 &e~1622177385~727 (+ &level~1622177385~565 1))))) (let ((&fail~1622177385~732 (lambda () (ex:invalid-form &input~1622177385~730)))) (if (pair? &input~1622177385~730) (let ((&temp~1622177385~745 (car &input~1622177385~730))) (if (pair? &temp~1622177385~745) (let ((&temp~1622177385~749 (car &temp~1622177385~745))) (let ((&k~1622177385~733 &temp~1622177385~749)) (let ((&temp~1622177385~746 (cdr &temp~1622177385~745))) (if (pair? &temp~1622177385~746) (let ((&temp~1622177385~748 (car &temp~1622177385~746))) (let ((&temp~1622177385~747 (cdr &temp~1622177385~746))) (if (null? &temp~1622177385~747) (let ((&temp~1622177385~738 (cdr &input~1622177385~730))) (if (pair? &temp~1622177385~738) (let ((&temp~1622177385~740 (car &temp~1622177385~738))) (if (pair? &temp~1622177385~740) (let ((&temp~1622177385~744 (car &temp~1622177385~740))) (let ((&e*~1622177385~734 &temp~1622177385~744)) (let ((&temp~1622177385~741 (cdr &temp~1622177385~740))) (if (pair? &temp~1622177385~741) (let ((&temp~1622177385~743 (car &temp~1622177385~741))) (let ((&reps~1622177385~735 &temp~1622177385~743)) (let ((&temp~1622177385~742 (cdr &temp~1622177385~741))) (if (null? &temp~1622177385~742) (let ((&temp~1622177385~739 (cdr &temp~1622177385~738))) (if (null? &temp~1622177385~739) (begin (cons (cons &k~1622177385~733 (cons &e*~1622177385~734 (quote ()))) (cons &reps~1622177385~735 (quote ())))) (&fail~1622177385~732))) (&fail~1622177385~732))))) (&fail~1622177385~732))))) (&fail~1622177385~732))) (&fail~1622177385~732))) (&fail~1622177385~732)))) (&fail~1622177385~732))))) (&fail~1622177385~732))) (&fail~1622177385~732)))) (&fail~1622177385~568))))) (&fail~1622177385~568))) (&fail~1622177385~568))) (&fail~1622177385~568)))))) (let ((&input~1622177385~542 &e~1622177385~539)) (let ((&fail~1622177385~543 (lambda () (ex:invalid-form &input~1622177385~542)))) (if (pair? &input~1622177385~542) (let ((&temp~1622177385~562 (car &input~1622177385~542))) (let ((&temp~1622177385~559 (cdr &input~1622177385~542))) (if (pair? &temp~1622177385~559) (let ((&temp~1622177385~561 (car &temp~1622177385~559))) (let ((&template~1622177385~544 &temp~1622177385~561)) (let ((&temp~1622177385~560 (cdr &temp~1622177385~559))) (if (null? &temp~1622177385~560) (let ((&input~1622177385~547 (&expand~1622177385~540 &template~1622177385~544 0))) (let ((&fail~1622177385~549 (lambda () (ex:invalid-form &input~1622177385~547)))) (if (pair? &input~1622177385~547) (let ((&temp~1622177385~558 (car &input~1622177385~547))) (let ((&template*~1622177385~550 &temp~1622177385~558)) (let ((&temp~1622177385~555 (cdr &input~1622177385~547))) (if (pair? &temp~1622177385~555) (let ((&temp~1622177385~557 (car &temp~1622177385~555))) (let ((&replacements~1622177385~551 &temp~1622177385~557)) (let ((&temp~1622177385~556 (cdr &temp~1622177385~555))) (if (null? &temp~1622177385~556) (begin (cons (ex:syntax-rename (quote with-syntax) (quote ()) (quote (&env~1622177385~554)) 0 (quote (core quasisyntax))) (cons &replacements~1622177385~551 (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~554)) 0 (quote (core quasisyntax))) (cons &template*~1622177385~550 (quote ()))) (quote ()))))) (&fail~1622177385~549))))) (&fail~1622177385~549))))) (&fail~1622177385~549)))) (&fail~1622177385~543))))) (&fail~1622177385~543)))) (&fail~1622177385~543))))) ex:undefined))) (ex:register-macro! (quote &unsyntax~1622177385~755) (lambda (&e~1622177385~757) (ex:syntax-violation (quote unsyntax) "Invalid expression" &e~1622177385~757))) (ex:register-macro! (quote &unsyntax-splicing~1622177385~759) (lambda (&e~1622177385~761) (ex:syntax-violation (quote unsyntax) "Invalid expression" &e~1622177385~761))) (values)) (lambda () (values)) (quote &build~1622177385~763))) (values))
(begin (ex:register-library! (ex:make-library (quote (core quasiquote)) (lambda () (ex:uncompress (quote (((&env~1622177385~1192 0 1 2 3 4 5) (&env~1622177385~1182 6 1 2 3 4 5) (&env~1622177385~1173 7 8 1 2 3 4 5) (&env~1622177385~1163 9 8 1 2 3 4 5) (&env~1622177385~1126 10 11 12 13 3 4 5) (&env~1622177385~1116 14 11 12 13 3 4 5) (&env~1622177385~903 15 16 17 3 4 5) (&env~1622177385~898 18 19 16 17 3 4 5) (&env~1622177385~875 20 21 22 23 24 25 16 17 3 4 5) (&env~1622177385~843 26 27 16 17 3 4 5) (&env~1622177385~829 28 29 16 17 3 4 5) (&env~1622177385~813 30 31 16 17 3 4 5)) (31 (((x) . #f))) (30 (((temp &c~1622177385~804) . #f))) (29 (((x) . #f))) (28 (((temp &c~1622177385~820) . #f))) (27 (((x) . #f))) (26 (((temp &c~1622177385~834) . #f))) (25 (((x) . #f) ((y) . #f))) (24 (((f) variable &f~1622177385~853 (1) #t (core quasiquote)))) (23 ()) (22 (((x*) variable &x*~1622177385~861 (1) #f (core quasiquote)))) (21 ()) (20 (((temp &c~1622177385~866) . #f) ((temp &c~1622177385~865) . #f))) (19 (((x) . #f))) (18 (((temp &c~1622177385~889) . #f))) (17 (((x) variable &x~1622177385~786 (1) #f (core quasiquote)))) (16 ()) (15 (((x) . #f))) (14 (((p) . #f))) (13 (((p) variable &p~1622177385~1094 (1) #f (core quasiquote)) ((lev) variable &lev~1622177385~1095 (1) #f (core quasiquote)))) (12 ()) (11 (((p) . #f) ((q) . #f))) (10 (((p) . #f))) (9 (((p) . #f))) (8 (((p) . #f) ((q) . #f))) (7 (((p) . #f))) (6 (((p) . #f))) (5 (((unquote-splicing) macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)) ((unquote) macro &unquote~1622177385~1198 (0) #f (core quasiquote)) ((quasiquote) macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro &letrec*~1622177385~180 (0 1) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0 1) #f (core let)) ((let) macro &let~1622177385~101 (0 1) #f (core let)) ((=>) macro &=>~1622177385~482 (0 1) #f (core derived)) ((else) macro &else~1622177385~486 (0 1) #f (core derived)) ((case) macro &case~1622177385~402 (0 1) #f (core derived)) ((cond) macro &cond~1622177385~286 (0 1) #f (core derived)) ((let*) macro &let*~1622177385~205 (0 1) #f (core derived)) ((with-syntax) macro &with-syntax~1622177385~4 (1) #f (core with-syntax)) ((unsyntax-splicing) macro &unsyntax-splicing~1622177385~759 (1) #f (core quasisyntax)) ((unsyntax) macro &unsyntax~1622177385~755 (1) #f (core quasisyntax)) ((quasisyntax) macro &quasisyntax~1622177385~537 (1) #f (core quasisyntax)) ((list->vector) variable list->vector (0 1) #f ()) ((vector) variable vector (0 1) #f ()) ((list) variable list (0 1) #f ()) ((map) variable map (0 1) #f ()) ((append) variable append (0 1) #f ()) ((cdr) variable cdr (0 1) #f ()) ((car) variable car (0 1) #f ()) ((cons) variable cons (0 1) #f ()) ((null?) variable null? (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 ()) (3 (((emit) variable &emit~1622177385~773 (1) #f (core quasiquote)) ((quasivector) variable &quasivector~1622177385~772 (1) #f (core quasiquote)) ((quasilist*) variable &quasilist*~1622177385~771 (1) #f (core quasiquote)) ((quasiappend) variable &quasiappend~1622177385~770 (1) #f (core quasiquote)) ((quasicons) variable &quasicons~1622177385~769 (1) #f (core quasiquote)) ((vquasi) variable &vquasi~1622177385~768 (1) #f (core quasiquote)) ((quasi) variable &quasi~1622177385~767 (1) #f (core quasiquote)))) (2 (((p) variable &p~1622177385~1134 (1) #f (core quasiquote)) ((lev) variable &lev~1622177385~1135 (1) #f (core quasiquote)))) (1 ()) (0 (((p) . #f))))))) (quote ((quasiquote macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) (unquote macro &unquote~1622177385~1198 (0) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)))) (quote (((core quasisyntax) 1) ((core with-syntax) 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1))) (quote (&build~1622177385~763 &build~1622177385~58 &build~1622177385~490 &build~1622177385~204 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &quasiquote~1622177385~764) ((lambda () ((lambda (&emit~1622177385~773 &quasivector~1622177385~772 &quasilist*~1622177385~771 &quasiappend~1622177385~770 &quasicons~1622177385~769 &vquasi~1622177385~768 &quasi~1622177385~767) (set! &quasi~1622177385~767 (lambda (&p~1622177385~1134 &lev~1622177385~1135) (let ((&input~1622177385~1137 &p~1622177385~1134)) (let ((&fail~1622177385~1138 (lambda () (let ((&fail~1622177385~1139 (lambda () (let ((&fail~1622177385~1140 (lambda () (let ((&fail~1622177385~1141 (lambda () (let ((&fail~1622177385~1142 (lambda () (ex:invalid-form &input~1622177385~1137)))) (let ((&p~1622177385~1143 &input~1622177385~1137)) (cons (quote "quote") (cons &p~1622177385~1143 (quote ())))))))) (if (vector? &input~1622177385~1137) (let ((&temp~1622177385~1147 (vector->list &input~1622177385~1137))) (if (list? &temp~1622177385~1147) (let ((&x~1622177385~1145 &temp~1622177385~1147)) (&quasivector~1622177385~772 (&vquasi~1622177385~768 &x~1622177385~1145 &lev~1622177385~1135))) (&fail~1622177385~1141))) (&fail~1622177385~1141)))))) (if (pair? &input~1622177385~1137) (let ((&temp~1622177385~1179 (car &input~1622177385~1137))) (let ((&p~1622177385~1148 &temp~1622177385~1179)) (let ((&temp~1622177385~1178 (cdr &input~1622177385~1137))) (let ((&q~1622177385~1149 &temp~1622177385~1178)) (let ((&input~1622177385~1151 &p~1622177385~1148)) (let ((&fail~1622177385~1153 (lambda () (let ((&fail~1622177385~1154 (lambda () (let ((&fail~1622177385~1155 (lambda () (ex:invalid-form &input~1622177385~1151)))) (&quasicons~1622177385~769 (&quasi~1622177385~767 &p~1622177385~1148 &lev~1622177385~1135) (&quasi~1622177385~767 &q~1622177385~1149 &lev~1622177385~1135)))))) (if (pair? &input~1622177385~1151) (let ((&temp~1622177385~1167 (car &input~1622177385~1151))) (if (and (ex:identifier? &temp~1622177385~1167) (ex:free-identifier=? &temp~1622177385~1167 (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1622177385~1163)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1166 (cdr &input~1622177385~1151))) (if (list? &temp~1622177385~1166) (let ((&p~1622177385~1158 &temp~1622177385~1166)) (if (= &lev~1622177385~1135 0) (&quasiappend~1622177385~770 (map (lambda (&p~1622177385~1158) (cons (quote "value") (cons &p~1622177385~1158 (quote ())))) &p~1622177385~1158) (&quasi~1622177385~767 &q~1622177385~1149 &lev~1622177385~1135)) (&quasicons~1622177385~769 (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1622177385~1163)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 &p~1622177385~1158 (- &lev~1622177385~1135 1))) (&quasi~1622177385~767 &q~1622177385~1149 &lev~1622177385~1135)))) (&fail~1622177385~1154))) (&fail~1622177385~1154))) (&fail~1622177385~1154)))))) (if (pair? &input~1622177385~1151) (let ((&temp~1622177385~1177 (car &input~1622177385~1151))) (if (and (ex:identifier? &temp~1622177385~1177) (ex:free-identifier=? &temp~1622177385~1177 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1173)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1176 (cdr &input~1622177385~1151))) (if (list? &temp~1622177385~1176) (let ((&p~1622177385~1168 &temp~1622177385~1176)) (if (= &lev~1622177385~1135 0) (&quasilist*~1622177385~771 (map (lambda (&p~1622177385~1168) (cons (quote "value") (cons &p~1622177385~1168 (quote ())))) &p~1622177385~1168) (&quasi~1622177385~767 &q~1622177385~1149 &lev~1622177385~1135)) (&quasicons~1622177385~769 (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1173)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 &p~1622177385~1168 (- &lev~1622177385~1135 1))) (&quasi~1622177385~767 &q~1622177385~1149 &lev~1622177385~1135)))) (&fail~1622177385~1153))) (&fail~1622177385~1153))) (&fail~1622177385~1153)))))))) (&fail~1622177385~1140)))))) (if (pair? &input~1622177385~1137) (let ((&temp~1622177385~1187 (car &input~1622177385~1137))) (if (and (ex:identifier? &temp~1622177385~1187) (ex:free-identifier=? &temp~1622177385~1187 (ex:syntax-rename (quote quasiquote) (quote ()) (quote (&env~1622177385~1182)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1184 (cdr &input~1622177385~1137))) (if (pair? &temp~1622177385~1184) (let ((&temp~1622177385~1186 (car &temp~1622177385~1184))) (let ((&p~1622177385~1180 &temp~1622177385~1186)) (let ((&temp~1622177385~1185 (cdr &temp~1622177385~1184))) (if (null? &temp~1622177385~1185) (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote quasiquote) (quote ()) (quote (&env~1622177385~1182)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 (cons &p~1622177385~1180 (quote ())) (+ &lev~1622177385~1135 1))) (&fail~1622177385~1139))))) (&fail~1622177385~1139))) (&fail~1622177385~1139))) (&fail~1622177385~1139)))))) (if (pair? &input~1622177385~1137) (let ((&temp~1622177385~1197 (car &input~1622177385~1137))) (if (and (ex:identifier? &temp~1622177385~1197) (ex:free-identifier=? &temp~1622177385~1197 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1192)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1194 (cdr &input~1622177385~1137))) (if (pair? &temp~1622177385~1194) (let ((&temp~1622177385~1196 (car &temp~1622177385~1194))) (let ((&p~1622177385~1188 &temp~1622177385~1196)) (let ((&temp~1622177385~1195 (cdr &temp~1622177385~1194))) (if (null? &temp~1622177385~1195) (if (= &lev~1622177385~1135 0) (cons (quote "value") (cons &p~1622177385~1188 (quote ()))) (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1192)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 (cons &p~1622177385~1188 (quote ())) (- &lev~1622177385~1135 1)))) (&fail~1622177385~1138))))) (&fail~1622177385~1138))) (&fail~1622177385~1138))) (&fail~1622177385~1138)))))) (set! &vquasi~1622177385~768 (lambda (&p~1622177385~1094 &lev~1622177385~1095) (let ((&input~1622177385~1097 &p~1622177385~1094)) (let ((&fail~1622177385~1098 (lambda () (let ((&fail~1622177385~1099 (lambda () (ex:invalid-form &input~1622177385~1097)))) (if (null? &input~1622177385~1097) (cons (quote "quote") (cons (quote ()) (quote ()))) (&fail~1622177385~1099)))))) (if (pair? &input~1622177385~1097) (let ((&temp~1622177385~1132 (car &input~1622177385~1097))) (let ((&p~1622177385~1101 &temp~1622177385~1132)) (let ((&temp~1622177385~1131 (cdr &input~1622177385~1097))) (let ((&q~1622177385~1102 &temp~1622177385~1131)) (let ((&input~1622177385~1104 &p~1622177385~1101)) (let ((&fail~1622177385~1106 (lambda () (let ((&fail~1622177385~1107 (lambda () (let ((&fail~1622177385~1108 (lambda () (ex:invalid-form &input~1622177385~1104)))) (&quasicons~1622177385~769 (&quasi~1622177385~767 &p~1622177385~1101 &lev~1622177385~1095) (&vquasi~1622177385~768 &q~1622177385~1102 &lev~1622177385~1095)))))) (if (pair? &input~1622177385~1104) (let ((&temp~1622177385~1120 (car &input~1622177385~1104))) (if (and (ex:identifier? &temp~1622177385~1120) (ex:free-identifier=? &temp~1622177385~1120 (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1622177385~1116)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1119 (cdr &input~1622177385~1104))) (if (list? &temp~1622177385~1119) (let ((&p~1622177385~1111 &temp~1622177385~1119)) (if (= &lev~1622177385~1095 0) (&quasiappend~1622177385~770 (map (lambda (&p~1622177385~1111) (cons (quote "value") (cons &p~1622177385~1111 (quote ())))) &p~1622177385~1111) (&vquasi~1622177385~768 &q~1622177385~1102 &lev~1622177385~1095)) (&quasicons~1622177385~769 (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1622177385~1116)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 &p~1622177385~1111 (- &lev~1622177385~1095 1))) (&vquasi~1622177385~768 &q~1622177385~1102 &lev~1622177385~1095)))) (&fail~1622177385~1107))) (&fail~1622177385~1107))) (&fail~1622177385~1107)))))) (if (pair? &input~1622177385~1104) (let ((&temp~1622177385~1130 (car &input~1622177385~1104))) (if (and (ex:identifier? &temp~1622177385~1130) (ex:free-identifier=? &temp~1622177385~1130 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1126)) 0 (quote (core quasiquote))))) (let ((&temp~1622177385~1129 (cdr &input~1622177385~1104))) (if (list? &temp~1622177385~1129) (let ((&p~1622177385~1121 &temp~1622177385~1129)) (if (= &lev~1622177385~1095 0) (&quasilist*~1622177385~771 (map (lambda (&p~1622177385~1121) (cons (quote "value") (cons &p~1622177385~1121 (quote ())))) &p~1622177385~1121) (&vquasi~1622177385~768 &q~1622177385~1102 &lev~1622177385~1095)) (&quasicons~1622177385~769 (&quasicons~1622177385~769 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1622177385~1126)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1622177385~767 &p~1622177385~1121 (- &lev~1622177385~1095 1))) (&vquasi~1622177385~768 &q~1622177385~1102 &lev~1622177385~1095)))) (&fail~1622177385~1106))) (&fail~1622177385~1106))) (&fail~1622177385~1106)))))))) (&fail~1622177385~1098)))))) (set! &quasicons~1622177385~769 (lambda (&x~1622177385~1044 &y~1622177385~1045) (let ((&input~1622177385~1048 (list &x~1622177385~1044 &y~1622177385~1045))) (let ((&fail~1622177385~1049 (lambda () (ex:invalid-form &input~1622177385~1048)))) (if (pair? &input~1622177385~1048) (let ((&temp~1622177385~1092 (car &input~1622177385~1048))) (let ((&x~1622177385~1050 &temp~1622177385~1092)) (let ((&temp~1622177385~1089 (cdr &input~1622177385~1048))) (if (pair? &temp~1622177385~1089) (let ((&temp~1622177385~1091 (car &temp~1622177385~1089))) (let ((&y~1622177385~1051 &temp~1622177385~1091)) (let ((&temp~1622177385~1090 (cdr &temp~1622177385~1089))) (if (null? &temp~1622177385~1090) (begin (let ((&input~1622177385~1054 &y~1622177385~1051)) (let ((&fail~1622177385~1056 (lambda () (let ((&fail~1622177385~1057 (lambda () (let ((&fail~1622177385~1058 (lambda () (let ((&fail~1622177385~1059 (lambda () (ex:invalid-form &input~1622177385~1054)))) (cons (quote "list*") (cons &x~1622177385~1050 (cons &y~1622177385~1051 (quote ())))))))) (if (pair? &input~1622177385~1054) (let ((&temp~1622177385~1064 (car &input~1622177385~1054))) (if (equal? &temp~1622177385~1064 (quote "list*")) (let ((&temp~1622177385~1063 (cdr &input~1622177385~1054))) (let ((&stuff~1622177385~1061 &temp~1622177385~1063)) (cons (quote "list*") (cons &x~1622177385~1050 &stuff~1622177385~1061)))) (&fail~1622177385~1058))) (&fail~1622177385~1058)))))) (if (pair? &input~1622177385~1054) (let ((&temp~1622177385~1068 (car &input~1622177385~1054))) (if (equal? &temp~1622177385~1068 (quote "list")) (let ((&temp~1622177385~1067 (cdr &input~1622177385~1054))) (let ((&stuff~1622177385~1065 &temp~1622177385~1067)) (cons (quote "list") (cons &x~1622177385~1050 &stuff~1622177385~1065)))) (&fail~1622177385~1057))) (&fail~1622177385~1057)))))) (if (pair? &input~1622177385~1054) (let ((&temp~1622177385~1088 (car &input~1622177385~1054))) (if (equal? &temp~1622177385~1088 (quote "quote")) (let ((&temp~1622177385~1085 (cdr &input~1622177385~1054))) (if (pair? &temp~1622177385~1085) (let ((&temp~1622177385~1087 (car &temp~1622177385~1085))) (let ((&dy~1622177385~1069 &temp~1622177385~1087)) (let ((&temp~1622177385~1086 (cdr &temp~1622177385~1085))) (if (null? &temp~1622177385~1086) (let ((&input~1622177385~1071 &x~1622177385~1050)) (let ((&fail~1622177385~1073 (lambda () (let ((&fail~1622177385~1074 (lambda () (ex:invalid-form &input~1622177385~1071)))) (if (null? &dy~1622177385~1069) (cons (quote "list") (cons &x~1622177385~1050 (quote ()))) (cons (quote "list*") (cons &x~1622177385~1050 (cons &y~1622177385~1051 (quote ()))))))))) (if (pair? &input~1622177385~1071) (let ((&temp~1622177385~1084 (car &input~1622177385~1071))) (if (equal? &temp~1622177385~1084 (quote "quote")) (let ((&temp~1622177385~1081 (cdr &input~1622177385~1071))) (if (pair? &temp~1622177385~1081) (let ((&temp~1622177385~1083 (car &temp~1622177385~1081))) (let ((&dx~1622177385~1079 &temp~1622177385~1083)) (let ((&temp~1622177385~1082 (cdr &temp~1622177385~1081))) (if (null? &temp~1622177385~1082) (cons (quote "quote") (cons (cons &dx~1622177385~1079 &dy~1622177385~1069) (quote ()))) (&fail~1622177385~1073))))) (&fail~1622177385~1073))) (&fail~1622177385~1073))) (&fail~1622177385~1073)))) (&fail~1622177385~1056))))) (&fail~1622177385~1056))) (&fail~1622177385~1056))) (&fail~1622177385~1056))))) (&fail~1622177385~1049))))) (&fail~1622177385~1049))))) (&fail~1622177385~1049)))))) (set! &quasiappend~1622177385~770 (lambda (&x~1622177385~1003 &y~1622177385~1004) (let ((&input~1622177385~1006 &y~1622177385~1004)) (let ((&fail~1622177385~1007 (lambda () (let ((&fail~1622177385~1008 (lambda () (ex:invalid-form &input~1622177385~1006)))) (if (null? &x~1622177385~1003) (begin &y~1622177385~1004) (begin (let ((&input~1622177385~1015 (list &x~1622177385~1003 &y~1622177385~1004))) (let ((&fail~1622177385~1016 (lambda () (ex:invalid-form &input~1622177385~1015)))) (if (pair? &input~1622177385~1015) (let ((&temp~1622177385~1024 (car &input~1622177385~1015))) (if (list? &temp~1622177385~1024) (let ((&p~1622177385~1017 &temp~1622177385~1024)) (let ((&temp~1622177385~1021 (cdr &input~1622177385~1015))) (if (pair? &temp~1622177385~1021) (let ((&temp~1622177385~1023 (car &temp~1622177385~1021))) (let ((&y~1622177385~1018 &temp~1622177385~1023)) (let ((&temp~1622177385~1022 (cdr &temp~1622177385~1021))) (if (null? &temp~1622177385~1022) (begin (cons (quote "append") (append &p~1622177385~1017 (cons &y~1622177385~1018 (quote ()))))) (&fail~1622177385~1016))))) (&fail~1622177385~1016)))) (&fail~1622177385~1016))) (&fail~1622177385~1016)))))))))) (if (pair? &input~1622177385~1006) (let ((&temp~1622177385~1042 (car &input~1622177385~1006))) (if (equal? &temp~1622177385~1042 (quote "quote")) (let ((&temp~1622177385~1039 (cdr &input~1622177385~1006))) (if (pair? &temp~1622177385~1039) (let ((&temp~1622177385~1041 (car &temp~1622177385~1039))) (if (null? &temp~1622177385~1041) (let ((&temp~1622177385~1040 (cdr &temp~1622177385~1039))) (if (null? &temp~1622177385~1040) (if (null? &x~1622177385~1003) (begin (cons (quote "quote") (cons (quote ()) (quote ())))) (if (null? (cdr &x~1622177385~1003)) (begin (car &x~1622177385~1003)) (begin (let ((&input~1622177385~1034 &x~1622177385~1003)) (let ((&fail~1622177385~1035 (lambda () (ex:invalid-form &input~1622177385~1034)))) (if (list? &input~1622177385~1034) (let ((&p~1622177385~1036 &input~1622177385~1034)) (begin (cons (quote "append") &p~1622177385~1036))) (&fail~1622177385~1035))))))) (&fail~1622177385~1007))) (&fail~1622177385~1007))) (&fail~1622177385~1007))) (&fail~1622177385~1007))) (&fail~1622177385~1007)))))) (set! &quasilist*~1622177385~771 (lambda (&x~1622177385~985 &y~1622177385~986) (((lambda (&f~1622177385~992) ((lambda (&temp~1622177385~995) (set! &f~1622177385~992 &temp~1622177385~995) ((lambda () &f~1622177385~992))) (lambda (&x~1622177385~1000) (if (null? &x~1622177385~1000) &y~1622177385~986 (&quasicons~1622177385~769 (car &x~1622177385~1000) (&f~1622177385~992 (cdr &x~1622177385~1000))))))) ex:undefined) &x~1622177385~985))) (set! &quasivector~1622177385~772 (lambda (&x~1622177385~909) (let ((&input~1622177385~911 &x~1622177385~909)) (let ((&fail~1622177385~912 (lambda () (let ((&fail~1622177385~913 (lambda () (ex:invalid-form &input~1622177385~911)))) (((lambda (&f~1622177385~919) ((lambda (&temp~1622177385~922) (set! &f~1622177385~919 &temp~1622177385~922) ((lambda () &f~1622177385~919))) (lambda (&y~1622177385~927 &k~1622177385~928) (let ((&input~1622177385~930 &y~1622177385~927)) (let ((&fail~1622177385~931 (lambda () (let ((&fail~1622177385~932 (lambda () (let ((&fail~1622177385~933 (lambda () (let ((&fail~1622177385~934 (lambda () (ex:invalid-form &input~1622177385~930)))) (let ((&else~1622177385~935 &input~1622177385~930)) (let ((&input~1622177385~940 &x~1622177385~909)) (let ((&fail~1622177385~941 (lambda () (ex:invalid-form &input~1622177385~940)))) (let ((&temp~1622177385~942 &input~1622177385~940)) (begin (cons (quote "list->vector") (cons &temp~1622177385~942 (quote ())))))))))))) (if (pair? &input~1622177385~930) (let ((&temp~1622177385~956 (car &input~1622177385~930))) (if (equal? &temp~1622177385~956 (quote "list*")) (let ((&temp~1622177385~951 (cdr &input~1622177385~930))) (if (>= (ex:dotted-length &temp~1622177385~951) 1) (let ((&temp~1622177385~955 (ex:dotted-butlast &temp~1622177385~951 1))) (if (list? &temp~1622177385~955) (let ((&y~1622177385~945 &temp~1622177385~955)) (let ((&temp~1622177385~952 (ex:dotted-last &temp~1622177385~951 1))) (if (pair? &temp~1622177385~952) (let ((&temp~1622177385~954 (car &temp~1622177385~952))) (let ((&z~1622177385~946 &temp~1622177385~954)) (let ((&temp~1622177385~953 (cdr &temp~1622177385~952))) (if (null? &temp~1622177385~953) (&f~1622177385~919 &z~1622177385~946 (lambda (&ls~1622177385~949) (&k~1622177385~928 (append &y~1622177385~945 &ls~1622177385~949)))) (&fail~1622177385~933))))) (&fail~1622177385~933)))) (&fail~1622177385~933))) (&fail~1622177385~933))) (&fail~1622177385~933))) (&fail~1622177385~933)))))) (if (pair? &input~1622177385~930) (let ((&temp~1622177385~960 (car &input~1622177385~930))) (if (equal? &temp~1622177385~960 (quote "list")) (let ((&temp~1622177385~959 (cdr &input~1622177385~930))) (if (list? &temp~1622177385~959) (let ((&y~1622177385~957 &temp~1622177385~959)) (&k~1622177385~928 &y~1622177385~957)) (&fail~1622177385~932))) (&fail~1622177385~932))) (&fail~1622177385~932)))))) (if (pair? &input~1622177385~930) (let ((&temp~1622177385~966 (car &input~1622177385~930))) (if (equal? &temp~1622177385~966 (quote "quote")) (let ((&temp~1622177385~963 (cdr &input~1622177385~930))) (if (pair? &temp~1622177385~963) (let ((&temp~1622177385~965 (car &temp~1622177385~963))) (if (list? &temp~1622177385~965) (let ((&y~1622177385~961 &temp~1622177385~965)) (let ((&temp~1622177385~964 (cdr &temp~1622177385~963))) (if (null? &temp~1622177385~964) (&k~1622177385~928 (map (lambda (&y~1622177385~961) (cons (quote "quote") (cons &y~1622177385~961 (quote ())))) &y~1622177385~961)) (&fail~1622177385~931)))) (&fail~1622177385~931))) (&fail~1622177385~931))) (&fail~1622177385~931))) (&fail~1622177385~931))))))) ex:undefined) &x~1622177385~909 (lambda (&ls~1622177385~968) (let ((&input~1622177385~973 &ls~1622177385~968)) (let ((&fail~1622177385~974 (lambda () (ex:invalid-form &input~1622177385~973)))) (if (list? &input~1622177385~973) (let ((&temp~1622177385~975 &input~1622177385~973)) (begin (cons (quote "vector") &temp~1622177385~975))) (&fail~1622177385~974)))))))))) (if (pair? &input~1622177385~911) (let ((&temp~1622177385~983 (car &input~1622177385~911))) (if (equal? &temp~1622177385~983 (quote "quote")) (let ((&temp~1622177385~980 (cdr &input~1622177385~911))) (if (pair? &temp~1622177385~980) (let ((&temp~1622177385~982 (car &temp~1622177385~980))) (if (list? &temp~1622177385~982) (let ((&x~1622177385~978 &temp~1622177385~982)) (let ((&temp~1622177385~981 (cdr &temp~1622177385~980))) (if (null? &temp~1622177385~981) (cons (quote "quote") (cons (list->vector &x~1622177385~978) (quote ()))) (&fail~1622177385~912)))) (&fail~1622177385~912))) (&fail~1622177385~912))) (&fail~1622177385~912))) (&fail~1622177385~912)))))) (set! &emit~1622177385~773 (lambda (&x~1622177385~786) (let ((&input~1622177385~788 &x~1622177385~786)) (let ((&fail~1622177385~789 (lambda () (let ((&fail~1622177385~790 (lambda () (let ((&fail~1622177385~791 (lambda () (let ((&fail~1622177385~792 (lambda () (let ((&fail~1622177385~793 (lambda () (let ((&fail~1622177385~794 (lambda () (let ((&fail~1622177385~795 (lambda () (ex:invalid-form &input~1622177385~788)))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~801 (car &input~1622177385~788))) (if (equal? &temp~1622177385~801 (quote "value")) (let ((&temp~1622177385~798 (cdr &input~1622177385~788))) (if (pair? &temp~1622177385~798) (let ((&temp~1622177385~800 (car &temp~1622177385~798))) (let ((&x~1622177385~796 &temp~1622177385~800)) (let ((&temp~1622177385~799 (cdr &temp~1622177385~798))) (if (null? &temp~1622177385~799) &x~1622177385~796 (&fail~1622177385~795))))) (&fail~1622177385~795))) (&fail~1622177385~795))) (&fail~1622177385~795)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~817 (car &input~1622177385~788))) (if (equal? &temp~1622177385~817 (quote "list->vector")) (let ((&temp~1622177385~814 (cdr &input~1622177385~788))) (if (pair? &temp~1622177385~814) (let ((&temp~1622177385~816 (car &temp~1622177385~814))) (let ((&x~1622177385~802 &temp~1622177385~816)) (let ((&temp~1622177385~815 (cdr &temp~1622177385~814))) (if (null? &temp~1622177385~815) (let ((&input~1622177385~807 (&emit~1622177385~773 &x~1622177385~802))) (let ((&fail~1622177385~809 (lambda () (ex:invalid-form &input~1622177385~807)))) (let ((&temp~1622177385~810 &input~1622177385~807)) (begin (cons (ex:syntax-rename (quote list->vector) (quote ()) (quote (&env~1622177385~813)) 0 (quote (core quasiquote))) (cons &temp~1622177385~810 (quote ()))))))) (&fail~1622177385~794))))) (&fail~1622177385~794))) (&fail~1622177385~794))) (&fail~1622177385~794)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~831 (car &input~1622177385~788))) (if (equal? &temp~1622177385~831 (quote "vector")) (let ((&temp~1622177385~830 (cdr &input~1622177385~788))) (if (list? &temp~1622177385~830) (let ((&x~1622177385~818 &temp~1622177385~830)) (let ((&input~1622177385~823 (map &emit~1622177385~773 &x~1622177385~818))) (let ((&fail~1622177385~825 (lambda () (ex:invalid-form &input~1622177385~823)))) (if (list? &input~1622177385~823) (let ((&temp~1622177385~826 &input~1622177385~823)) (begin (cons (ex:syntax-rename (quote vector) (quote ()) (quote (&env~1622177385~829)) 0 (quote (core quasiquote))) &temp~1622177385~826))) (&fail~1622177385~825))))) (&fail~1622177385~793))) (&fail~1622177385~793))) (&fail~1622177385~793)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~845 (car &input~1622177385~788))) (if (equal? &temp~1622177385~845 (quote "append")) (let ((&temp~1622177385~844 (cdr &input~1622177385~788))) (if (list? &temp~1622177385~844) (let ((&x~1622177385~832 &temp~1622177385~844)) (let ((&input~1622177385~837 (map &emit~1622177385~773 &x~1622177385~832))) (let ((&fail~1622177385~839 (lambda () (ex:invalid-form &input~1622177385~837)))) (if (list? &input~1622177385~837) (let ((&temp~1622177385~840 &input~1622177385~837)) (begin (cons (ex:syntax-rename (quote append) (quote ()) (quote (&env~1622177385~843)) 0 (quote (core quasiquote))) &temp~1622177385~840))) (&fail~1622177385~839))))) (&fail~1622177385~792))) (&fail~1622177385~792))) (&fail~1622177385~792)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~886 (car &input~1622177385~788))) (if (equal? &temp~1622177385~886 (quote "list*")) (let ((&temp~1622177385~881 (cdr &input~1622177385~788))) (if (>= (ex:dotted-length &temp~1622177385~881) 1) (let ((&temp~1622177385~885 (ex:dotted-butlast &temp~1622177385~881 1))) (if (list? &temp~1622177385~885) (let ((&x~1622177385~846 &temp~1622177385~885)) (let ((&temp~1622177385~882 (ex:dotted-last &temp~1622177385~881 1))) (if (pair? &temp~1622177385~882) (let ((&temp~1622177385~884 (car &temp~1622177385~882))) (let ((&y~1622177385~847 &temp~1622177385~884)) (let ((&temp~1622177385~883 (cdr &temp~1622177385~882))) (if (null? &temp~1622177385~883) (((lambda (&f~1622177385~853) ((lambda (&temp~1622177385~856) (set! &f~1622177385~853 &temp~1622177385~856) ((lambda () &f~1622177385~853))) (lambda (&x*~1622177385~861) (if (null? &x*~1622177385~861) (&emit~1622177385~773 &y~1622177385~847) (let ((&input~1622177385~869 (list (&emit~1622177385~773 (car &x*~1622177385~861)) (&f~1622177385~853 (cdr &x*~1622177385~861))))) (let ((&fail~1622177385~870 (lambda () (ex:invalid-form &input~1622177385~869)))) (if (pair? &input~1622177385~869) (let ((&temp~1622177385~879 (car &input~1622177385~869))) (let ((&temp~1622177385~871 &temp~1622177385~879)) (let ((&temp~1622177385~876 (cdr &input~1622177385~869))) (if (pair? &temp~1622177385~876) (let ((&temp~1622177385~878 (car &temp~1622177385~876))) (let ((&temp~1622177385~872 &temp~1622177385~878)) (let ((&temp~1622177385~877 (cdr &temp~1622177385~876))) (if (null? &temp~1622177385~877) (begin (cons (ex:syntax-rename (quote cons) (quote ()) (quote (&env~1622177385~875)) 0 (quote (core quasiquote))) (cons &temp~1622177385~871 (cons &temp~1622177385~872 (quote ()))))) (&fail~1622177385~870))))) (&fail~1622177385~870))))) (&fail~1622177385~870)))))))) ex:undefined) &x~1622177385~846) (&fail~1622177385~791))))) (&fail~1622177385~791)))) (&fail~1622177385~791))) (&fail~1622177385~791))) (&fail~1622177385~791))) (&fail~1622177385~791)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~900 (car &input~1622177385~788))) (if (equal? &temp~1622177385~900 (quote "list")) (let ((&temp~1622177385~899 (cdr &input~1622177385~788))) (if (list? &temp~1622177385~899) (let ((&x~1622177385~887 &temp~1622177385~899)) (let ((&input~1622177385~892 (map &emit~1622177385~773 &x~1622177385~887))) (let ((&fail~1622177385~894 (lambda () (ex:invalid-form &input~1622177385~892)))) (if (list? &input~1622177385~892) (let ((&temp~1622177385~895 &input~1622177385~892)) (begin (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1622177385~898)) 0 (quote (core quasiquote))) &temp~1622177385~895))) (&fail~1622177385~894))))) (&fail~1622177385~790))) (&fail~1622177385~790))) (&fail~1622177385~790)))))) (if (pair? &input~1622177385~788) (let ((&temp~1622177385~907 (car &input~1622177385~788))) (if (equal? &temp~1622177385~907 (quote "quote")) (let ((&temp~1622177385~904 (cdr &input~1622177385~788))) (if (pair? &temp~1622177385~904) (let ((&temp~1622177385~906 (car &temp~1622177385~904))) (let ((&x~1622177385~901 &temp~1622177385~906)) (let ((&temp~1622177385~905 (cdr &temp~1622177385~904))) (if (null? &temp~1622177385~905) (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~903)) 0 (quote (core quasiquote))) (cons &x~1622177385~901 (quote ()))) (&fail~1622177385~789))))) (&fail~1622177385~789))) (&fail~1622177385~789))) (&fail~1622177385~789)))))) (lambda (&x~1622177385~775) (let ((&input~1622177385~777 &x~1622177385~775)) (let ((&fail~1622177385~778 (lambda () (ex:invalid-form &input~1622177385~777)))) (if (pair? &input~1622177385~777) (let ((&temp~1622177385~784 (car &input~1622177385~777))) (let ((&temp~1622177385~781 (cdr &input~1622177385~777))) (if (pair? &temp~1622177385~781) (let ((&temp~1622177385~783 (car &temp~1622177385~781))) (let ((&e~1622177385~779 &temp~1622177385~783)) (let ((&temp~1622177385~782 (cdr &temp~1622177385~781))) (if (null? &temp~1622177385~782) (&emit~1622177385~773 (&quasi~1622177385~767 &e~1622177385~779 0)) (&fail~1622177385~778))))) (&fail~1622177385~778)))) (&fail~1622177385~778)))))) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)))) (ex:register-macro! (quote &unquote~1622177385~1198) (lambda (&e~1622177385~1200) (ex:syntax-violation (quote unquote) "Invalid expression" &e~1622177385~1200))) (ex:register-macro! (quote &unquote-splicing~1622177385~1202) (lambda (&e~1622177385~1204) (ex:syntax-violation (quote unquote-splicing) "Invalid expression" &e~1622177385~1204))) (values)) (lambda () (values)) (quote &build~1622177385~1206))) (values))
(begin (ex:register-library! (ex:make-library (quote (core let-values)) (lambda () (ex:uncompress (quote (((&env~1622177385~1374 0 1 2 3) (&env~1622177385~1361 4 1 2 3) (&env~1622177385~1340 5 6 7 3) (&env~1622177385~1324 8 6 7 3) (&env~1622177385~1303 9 6 7 3) (&env~1622177385~1279 10 6 7 3) (&env~1622177385~1253 11 6 7 3) (&env~1622177385~1227 12 6 7 3)) (12 (((dummy &c~1622177385~1208) . #f) ((?a) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (11 (((dummy &c~1622177385~1208) . #f) ((?a) . #f) ((?b) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (10 (((dummy &c~1622177385~1208) . #f) ((?e0) . #f) ((?args) . #f) ((?bindings) . #f) ((?tmps) . #f) ((?body) . #f))) (9 (((dummy &c~1622177385~1208) . #f) ((?b0) . #f) ((?e0) . #f) ((?binding) . #f) ((?tmps) . #f) ((?body) . #f))) (8 (((dummy &c~1622177385~1208) . #f) ((?tmps) . #f) ((?body) . #f))) (7 (((x &c~1622177385~1208) variable &x~1622177385~1210 (0) #f (core let-values)))) (6 ()) (5 (((dummy &c~1622177385~1208) . #f) ((?binding) . #f) ((?body0) . #f) ((?body1) . #f))) (4 (((dummy &c~1622177385~1348) . #f) ((?binding0) . #f) ((?binding1) . #f) ((?body0) . #f) ((?body1) . #f))) (3 (((let*-values) macro &let*-values~1622177385~1347 (0) #f (core let-values)) ((let-values) macro &let-values~1622177385~1207 (0) #f (core let-values)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((syntax-rules) macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) ((letrec*) macro &letrec*~1622177385~180 (0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0) #f (core let)) ((let) macro &let~1622177385~101 (0) #f (core let)) ((call-with-values) variable call-with-values (0) #f ()))) (2 (((x &c~1622177385~1348) variable &x~1622177385~1350 (0) #f (core let-values)))) (1 ()) (0 (((dummy &c~1622177385~1348) . #f) ((?body0) . #f) ((?body1) . #f))))))) (quote ((let-values macro &let-values~1622177385~1207 (0) #f (core let-values)) (let*-values macro &let*-values~1622177385~1347 (0) #f (core let-values)))) (quote (((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0))) (quote (&build~1622177385~204 &build~1622177385~100 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &let-values~1622177385~1207) (lambda (&x~1622177385~1210) (let ((&input~1622177385~1212 &x~1622177385~1210)) (let ((&fail~1622177385~1213 (lambda () (let ((&fail~1622177385~1214 (lambda () (let ((&fail~1622177385~1215 (lambda () (let ((&fail~1622177385~1216 (lambda () (let ((&fail~1622177385~1217 (lambda () (let ((&fail~1622177385~1218 (lambda () (ex:invalid-form &input~1622177385~1212)))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1243 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1219 &temp~1622177385~1243)) (let ((&temp~1622177385~1228 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1228) (let ((&temp~1622177385~1242 (car &temp~1622177385~1228))) (if (equal? &temp~1622177385~1242 (quote "mktmp")) (let ((&temp~1622177385~1229 (cdr &temp~1622177385~1228))) (if (pair? &temp~1622177385~1229) (let ((&temp~1622177385~1241 (car &temp~1622177385~1229))) (let ((&?a~1622177385~1220 &temp~1622177385~1241)) (let ((&temp~1622177385~1230 (cdr &temp~1622177385~1229))) (if (pair? &temp~1622177385~1230) (let ((&temp~1622177385~1240 (car &temp~1622177385~1230))) (let ((&?e0~1622177385~1221 &temp~1622177385~1240)) (let ((&temp~1622177385~1231 (cdr &temp~1622177385~1230))) (if (pair? &temp~1622177385~1231) (let ((&temp~1622177385~1239 (car &temp~1622177385~1231))) (if (list? &temp~1622177385~1239) (let ((&?arg~1622177385~1222 &temp~1622177385~1239)) (let ((&temp~1622177385~1232 (cdr &temp~1622177385~1231))) (if (pair? &temp~1622177385~1232) (let ((&temp~1622177385~1238 (car &temp~1622177385~1232))) (let ((&?bindings~1622177385~1223 &temp~1622177385~1238)) (let ((&temp~1622177385~1233 (cdr &temp~1622177385~1232))) (if (pair? &temp~1622177385~1233) (let ((&temp~1622177385~1237 (car &temp~1622177385~1233))) (if (list? &temp~1622177385~1237) (let ((&?tmp~1622177385~1224 &temp~1622177385~1237)) (let ((&temp~1622177385~1234 (cdr &temp~1622177385~1233))) (if (pair? &temp~1622177385~1234) (let ((&temp~1622177385~1236 (car &temp~1622177385~1234))) (let ((&?body~1622177385~1225 &temp~1622177385~1236)) (let ((&temp~1622177385~1235 (cdr &temp~1622177385~1234))) (if (null? &temp~1622177385~1235) (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values))) (cons (quote ()) (cons &?e0~1622177385~1221 (quote ())))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values))) (cons (append &?arg~1622177385~1222 (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values)))) (cons (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?bindings~1622177385~1223 (cons (append &?tmp~1622177385~1224 (cons (cons &?a~1622177385~1220 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~1227)) 0 (quote (core let-values))) (quote ()))) (quote ()))) (cons &?body~1622177385~1225 (quote ())))))) (quote ())))) (quote ())))) (&fail~1622177385~1218))))) (&fail~1622177385~1218)))) (&fail~1622177385~1218))) (&fail~1622177385~1218))))) (&fail~1622177385~1218)))) (&fail~1622177385~1218))) (&fail~1622177385~1218))))) (&fail~1622177385~1218))))) (&fail~1622177385~1218))) (&fail~1622177385~1218))) (&fail~1622177385~1218))))) (&fail~1622177385~1218)))))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1271 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1244 &temp~1622177385~1271)) (let ((&temp~1622177385~1254 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1254) (let ((&temp~1622177385~1270 (car &temp~1622177385~1254))) (if (equal? &temp~1622177385~1270 (quote "mktmp")) (let ((&temp~1622177385~1255 (cdr &temp~1622177385~1254))) (if (pair? &temp~1622177385~1255) (let ((&temp~1622177385~1267 (car &temp~1622177385~1255))) (if (pair? &temp~1622177385~1267) (let ((&temp~1622177385~1269 (car &temp~1622177385~1267))) (let ((&?a~1622177385~1245 &temp~1622177385~1269)) (let ((&temp~1622177385~1268 (cdr &temp~1622177385~1267))) (let ((&?b~1622177385~1246 &temp~1622177385~1268)) (let ((&temp~1622177385~1256 (cdr &temp~1622177385~1255))) (if (pair? &temp~1622177385~1256) (let ((&temp~1622177385~1266 (car &temp~1622177385~1256))) (let ((&?e0~1622177385~1247 &temp~1622177385~1266)) (let ((&temp~1622177385~1257 (cdr &temp~1622177385~1256))) (if (pair? &temp~1622177385~1257) (let ((&temp~1622177385~1265 (car &temp~1622177385~1257))) (if (list? &temp~1622177385~1265) (let ((&?arg~1622177385~1248 &temp~1622177385~1265)) (let ((&temp~1622177385~1258 (cdr &temp~1622177385~1257))) (if (pair? &temp~1622177385~1258) (let ((&temp~1622177385~1264 (car &temp~1622177385~1258))) (let ((&?bindings~1622177385~1249 &temp~1622177385~1264)) (let ((&temp~1622177385~1259 (cdr &temp~1622177385~1258))) (if (pair? &temp~1622177385~1259) (let ((&temp~1622177385~1263 (car &temp~1622177385~1259))) (if (list? &temp~1622177385~1263) (let ((&?tmp~1622177385~1250 &temp~1622177385~1263)) (let ((&temp~1622177385~1260 (cdr &temp~1622177385~1259))) (if (pair? &temp~1622177385~1260) (let ((&temp~1622177385~1262 (car &temp~1622177385~1260))) (let ((&?body~1622177385~1251 &temp~1622177385~1262)) (let ((&temp~1622177385~1261 (cdr &temp~1622177385~1260))) (if (null? &temp~1622177385~1261) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1253)) 0 (quote (core let-values))) (cons (quote "mktmp") (cons &?b~1622177385~1246 (cons &?e0~1622177385~1247 (cons (append &?arg~1622177385~1248 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~1253)) 0 (quote (core let-values))) (quote ()))) (cons &?bindings~1622177385~1249 (cons (append &?tmp~1622177385~1250 (cons (cons &?a~1622177385~1245 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1622177385~1253)) 0 (quote (core let-values))) (quote ()))) (quote ()))) (cons &?body~1622177385~1251 (quote ()))))))))) (&fail~1622177385~1217))))) (&fail~1622177385~1217)))) (&fail~1622177385~1217))) (&fail~1622177385~1217))))) (&fail~1622177385~1217)))) (&fail~1622177385~1217))) (&fail~1622177385~1217))))) (&fail~1622177385~1217))))))) (&fail~1622177385~1217))) (&fail~1622177385~1217))) (&fail~1622177385~1217))) (&fail~1622177385~1217))))) (&fail~1622177385~1217)))))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1295 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1272 &temp~1622177385~1295)) (let ((&temp~1622177385~1280 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1280) (let ((&temp~1622177385~1294 (car &temp~1622177385~1280))) (if (equal? &temp~1622177385~1294 (quote "mktmp")) (let ((&temp~1622177385~1281 (cdr &temp~1622177385~1280))) (if (pair? &temp~1622177385~1281) (let ((&temp~1622177385~1293 (car &temp~1622177385~1281))) (if (null? &temp~1622177385~1293) (let ((&temp~1622177385~1282 (cdr &temp~1622177385~1281))) (if (pair? &temp~1622177385~1282) (let ((&temp~1622177385~1292 (car &temp~1622177385~1282))) (let ((&?e0~1622177385~1273 &temp~1622177385~1292)) (let ((&temp~1622177385~1283 (cdr &temp~1622177385~1282))) (if (pair? &temp~1622177385~1283) (let ((&temp~1622177385~1291 (car &temp~1622177385~1283))) (let ((&?args~1622177385~1274 &temp~1622177385~1291)) (let ((&temp~1622177385~1284 (cdr &temp~1622177385~1283))) (if (pair? &temp~1622177385~1284) (let ((&temp~1622177385~1290 (car &temp~1622177385~1284))) (let ((&?bindings~1622177385~1275 &temp~1622177385~1290)) (let ((&temp~1622177385~1285 (cdr &temp~1622177385~1284))) (if (pair? &temp~1622177385~1285) (let ((&temp~1622177385~1289 (car &temp~1622177385~1285))) (let ((&?tmps~1622177385~1276 &temp~1622177385~1289)) (let ((&temp~1622177385~1286 (cdr &temp~1622177385~1285))) (if (pair? &temp~1622177385~1286) (let ((&temp~1622177385~1288 (car &temp~1622177385~1286))) (let ((&?body~1622177385~1277 &temp~1622177385~1288)) (let ((&temp~1622177385~1287 (cdr &temp~1622177385~1286))) (if (null? &temp~1622177385~1287) (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1622177385~1279)) 0 (quote (core let-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1279)) 0 (quote (core let-values))) (cons (quote ()) (cons &?e0~1622177385~1273 (quote ())))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1279)) 0 (quote (core let-values))) (cons &?args~1622177385~1274 (cons (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1279)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?bindings~1622177385~1275 (cons &?tmps~1622177385~1276 (cons &?body~1622177385~1277 (quote ())))))) (quote ())))) (quote ())))) (&fail~1622177385~1216))))) (&fail~1622177385~1216))))) (&fail~1622177385~1216))))) (&fail~1622177385~1216))))) (&fail~1622177385~1216))))) (&fail~1622177385~1216))) (&fail~1622177385~1216))) (&fail~1622177385~1216))) (&fail~1622177385~1216))) (&fail~1622177385~1216))))) (&fail~1622177385~1216)))))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1319 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1296 &temp~1622177385~1319)) (let ((&temp~1622177385~1304 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1304) (let ((&temp~1622177385~1318 (car &temp~1622177385~1304))) (if (equal? &temp~1622177385~1318 (quote "bind")) (let ((&temp~1622177385~1305 (cdr &temp~1622177385~1304))) (if (pair? &temp~1622177385~1305) (let ((&temp~1622177385~1311 (car &temp~1622177385~1305))) (if (pair? &temp~1622177385~1311) (let ((&temp~1622177385~1313 (car &temp~1622177385~1311))) (if (pair? &temp~1622177385~1313) (let ((&temp~1622177385~1317 (car &temp~1622177385~1313))) (let ((&?b0~1622177385~1297 &temp~1622177385~1317)) (let ((&temp~1622177385~1314 (cdr &temp~1622177385~1313))) (if (pair? &temp~1622177385~1314) (let ((&temp~1622177385~1316 (car &temp~1622177385~1314))) (let ((&?e0~1622177385~1298 &temp~1622177385~1316)) (let ((&temp~1622177385~1315 (cdr &temp~1622177385~1314))) (if (null? &temp~1622177385~1315) (let ((&temp~1622177385~1312 (cdr &temp~1622177385~1311))) (if (list? &temp~1622177385~1312) (let ((&?binding~1622177385~1299 &temp~1622177385~1312)) (let ((&temp~1622177385~1306 (cdr &temp~1622177385~1305))) (if (pair? &temp~1622177385~1306) (let ((&temp~1622177385~1310 (car &temp~1622177385~1306))) (let ((&?tmps~1622177385~1300 &temp~1622177385~1310)) (let ((&temp~1622177385~1307 (cdr &temp~1622177385~1306))) (if (pair? &temp~1622177385~1307) (let ((&temp~1622177385~1309 (car &temp~1622177385~1307))) (let ((&?body~1622177385~1301 &temp~1622177385~1309)) (let ((&temp~1622177385~1308 (cdr &temp~1622177385~1307))) (if (null? &temp~1622177385~1308) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1303)) 0 (quote (core let-values))) (cons (quote "mktmp") (cons &?b0~1622177385~1297 (cons &?e0~1622177385~1298 (cons (quote ()) (cons &?binding~1622177385~1299 (cons &?tmps~1622177385~1300 (cons &?body~1622177385~1301 (quote ()))))))))) (&fail~1622177385~1215))))) (&fail~1622177385~1215))))) (&fail~1622177385~1215)))) (&fail~1622177385~1215))) (&fail~1622177385~1215))))) (&fail~1622177385~1215))))) (&fail~1622177385~1215))) (&fail~1622177385~1215))) (&fail~1622177385~1215))) (&fail~1622177385~1215))) (&fail~1622177385~1215))))) (&fail~1622177385~1215)))))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1334 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1320 &temp~1622177385~1334)) (let ((&temp~1622177385~1325 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1325) (let ((&temp~1622177385~1333 (car &temp~1622177385~1325))) (if (equal? &temp~1622177385~1333 (quote "bind")) (let ((&temp~1622177385~1326 (cdr &temp~1622177385~1325))) (if (pair? &temp~1622177385~1326) (let ((&temp~1622177385~1332 (car &temp~1622177385~1326))) (if (null? &temp~1622177385~1332) (let ((&temp~1622177385~1327 (cdr &temp~1622177385~1326))) (if (pair? &temp~1622177385~1327) (let ((&temp~1622177385~1331 (car &temp~1622177385~1327))) (let ((&?tmps~1622177385~1321 &temp~1622177385~1331)) (let ((&temp~1622177385~1328 (cdr &temp~1622177385~1327))) (if (pair? &temp~1622177385~1328) (let ((&temp~1622177385~1330 (car &temp~1622177385~1328))) (let ((&?body~1622177385~1322 &temp~1622177385~1330)) (let ((&temp~1622177385~1329 (cdr &temp~1622177385~1328))) (if (null? &temp~1622177385~1329) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~1324)) 0 (quote (core let-values))) (cons &?tmps~1622177385~1321 (cons &?body~1622177385~1322 (quote ())))) (&fail~1622177385~1214))))) (&fail~1622177385~1214))))) (&fail~1622177385~1214))) (&fail~1622177385~1214))) (&fail~1622177385~1214))) (&fail~1622177385~1214))) (&fail~1622177385~1214))))) (&fail~1622177385~1214)))))) (if (pair? &input~1622177385~1212) (let ((&temp~1622177385~1346 (car &input~1622177385~1212))) (let ((&dummy~1622177385~1335 &temp~1622177385~1346)) (let ((&temp~1622177385~1341 (cdr &input~1622177385~1212))) (if (pair? &temp~1622177385~1341) (let ((&temp~1622177385~1345 (car &temp~1622177385~1341))) (if (list? &temp~1622177385~1345) (let ((&?binding~1622177385~1336 &temp~1622177385~1345)) (let ((&temp~1622177385~1342 (cdr &temp~1622177385~1341))) (if (pair? &temp~1622177385~1342) (let ((&temp~1622177385~1344 (car &temp~1622177385~1342))) (let ((&?body0~1622177385~1337 &temp~1622177385~1344)) (let ((&temp~1622177385~1343 (cdr &temp~1622177385~1342))) (if (list? &temp~1622177385~1343) (let ((&?body1~1622177385~1338 &temp~1622177385~1343)) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1340)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?binding~1622177385~1336 (cons (quote ()) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1340)) 0 (quote (core let-values))) (cons &?body0~1622177385~1337 &?body1~1622177385~1338)) (quote ()))))))) (&fail~1622177385~1213))))) (&fail~1622177385~1213)))) (&fail~1622177385~1213))) (&fail~1622177385~1213))))) (&fail~1622177385~1213)))))) (ex:register-macro! (quote &let*-values~1622177385~1347) (lambda (&x~1622177385~1350) (let ((&input~1622177385~1352 &x~1622177385~1350)) (let ((&fail~1622177385~1353 (lambda () (let ((&fail~1622177385~1354 (lambda () (ex:invalid-form &input~1622177385~1352)))) (if (pair? &input~1622177385~1352) (let ((&temp~1622177385~1369 (car &input~1622177385~1352))) (let ((&dummy~1622177385~1355 &temp~1622177385~1369)) (let ((&temp~1622177385~1362 (cdr &input~1622177385~1352))) (if (pair? &temp~1622177385~1362) (let ((&temp~1622177385~1366 (car &temp~1622177385~1362))) (if (pair? &temp~1622177385~1366) (let ((&temp~1622177385~1368 (car &temp~1622177385~1366))) (let ((&?binding0~1622177385~1356 &temp~1622177385~1368)) (let ((&temp~1622177385~1367 (cdr &temp~1622177385~1366))) (if (list? &temp~1622177385~1367) (let ((&?binding1~1622177385~1357 &temp~1622177385~1367)) (let ((&temp~1622177385~1363 (cdr &temp~1622177385~1362))) (if (pair? &temp~1622177385~1363) (let ((&temp~1622177385~1365 (car &temp~1622177385~1363))) (let ((&?body0~1622177385~1358 &temp~1622177385~1365)) (let ((&temp~1622177385~1364 (cdr &temp~1622177385~1363))) (if (list? &temp~1622177385~1364) (let ((&?body1~1622177385~1359 &temp~1622177385~1364)) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1622177385~1361)) 0 (quote (core let-values))) (cons (cons &?binding0~1622177385~1356 (quote ())) (cons (cons (ex:syntax-rename (quote let*-values) (quote ()) (quote (&env~1622177385~1361)) 0 (quote (core let-values))) (cons &?binding1~1622177385~1357 (cons &?body0~1622177385~1358 &?body1~1622177385~1359))) (quote ()))))) (&fail~1622177385~1354))))) (&fail~1622177385~1354)))) (&fail~1622177385~1354))))) (&fail~1622177385~1354))) (&fail~1622177385~1354))))) (&fail~1622177385~1354)))))) (if (pair? &input~1622177385~1352) (let ((&temp~1622177385~1380 (car &input~1622177385~1352))) (let ((&dummy~1622177385~1370 &temp~1622177385~1380)) (let ((&temp~1622177385~1375 (cdr &input~1622177385~1352))) (if (pair? &temp~1622177385~1375) (let ((&temp~1622177385~1379 (car &temp~1622177385~1375))) (if (null? &temp~1622177385~1379) (let ((&temp~1622177385~1376 (cdr &temp~1622177385~1375))) (if (pair? &temp~1622177385~1376) (let ((&temp~1622177385~1378 (car &temp~1622177385~1376))) (let ((&?body0~1622177385~1371 &temp~1622177385~1378)) (let ((&temp~1622177385~1377 (cdr &temp~1622177385~1376))) (if (list? &temp~1622177385~1377) (let ((&?body1~1622177385~1372 &temp~1622177385~1377)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1374)) 0 (quote (core let-values))) (cons &?body0~1622177385~1371 &?body1~1622177385~1372))) (&fail~1622177385~1353))))) (&fail~1622177385~1353))) (&fail~1622177385~1353))) (&fail~1622177385~1353))))) (&fail~1622177385~1353)))))) (values)) (lambda () (values)) (quote &build~1622177385~1381))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs control)) (lambda () (ex:uncompress (quote (((&env~1622177385~1599 0 1 2 3) (&env~1622177385~1582 4 1 2 3) (&env~1622177385~1557 5 1 2 3) (&env~1622177385~1534 6 1 2 3) (&env~1622177385~1507 7 8 9 3) (&env~1622177385~1493 10 8 9 3) (&env~1622177385~1465 11 12 13 14 15 3) (&env~1622177385~1461 16 12 13 14 15 3) (&env~1622177385~1413 17 18 19 3) (&env~1622177385~1394 20 21 22 3)) (22 (((x &c~1622177385~1383) variable &x~1622177385~1385 (0) #f (rnrs control)))) (21 ()) (20 (((dummy &c~1622177385~1383) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (19 (((x &c~1622177385~1402) variable &x~1622177385~1404 (0) #f (rnrs control)))) (18 ()) (17 (((dummy &c~1622177385~1402) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (16 (((e1) . #f) ((e2) . #f))) (15 (((orig-x) variable &orig-x~1622177385~1422 (1) #f (rnrs control)))) (14 ()) (13 (((var) . #f) ((init) . #f) ((step) . #f) ((e0) . #f) ((e1) . #f) ((c) . #f))) (12 (((step) . #f))) (11 ()) (10 (((dummy &c~1622177385~1481) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (9 (((x &c~1622177385~1481) variable &x~1622177385~1483 (0) #f (rnrs control)))) (8 ()) (7 (((dummy &c~1622177385~1481) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (6 (((dummy &c~1622177385~1517) . #f) ((args) . #f) ((n) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (5 (((dummy &c~1622177385~1517) . #f) ((args) . #f) ((n) . #f) ((x1) . #f) ((x2) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (4 (((dummy &c~1622177385~1517) . #f) ((args) . #f) ((n) . #f) ((x) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (3 (((case-lambda-help) macro &case-lambda-help~1622177385~1516 (0) #f (rnrs control)) ((case-lambda) macro &case-lambda~1622177385~1480 (0) #f (rnrs control)) ((do) macro &do~1622177385~1420 (0) #f (rnrs control)) ((unless) macro &unless~1622177385~1401 (0) #f (rnrs control)) ((when) macro &when~1622177385~1382 (0) #f (rnrs control)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro &letrec*~1622177385~180 (1 0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (1 0) #f (core let)) ((let) macro &let~1622177385~101 (1 0) #f (core let)) ((with-syntax) macro &with-syntax~1622177385~4 (1) #f (core with-syntax)) ((syntax-rules) macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) ((apply) variable apply (1 0) #f ()) ((>=) variable >= (1 0) #f ()) ((=) variable = (1 0) #f ()) ((assertion-violation) variable assertion-violation (1 0) #f ()) ((length) variable length (1 0) #f ()) ((map) variable map (1 0) #f ()) ((not) variable not (1 0) #f ()))) (2 (((x &c~1622177385~1517) variable &x~1622177385~1519 (0) #f (rnrs control)))) (1 ()) (0 (((dummy &c~1622177385~1517) . #f) ((args) . #f) ((n) . #f))))))) (quote ((when macro &when~1622177385~1382 (0) #f (rnrs control)) (unless macro &unless~1622177385~1401 (0) #f (rnrs control)) (do macro &do~1622177385~1420 (0) #f (rnrs control)) (case-lambda macro &case-lambda~1622177385~1480 (0) #f (rnrs control)))) (quote (((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0))) (quote (&build~1622177385~100 &build~1622177385~58 &build~1622177385~204 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &when~1622177385~1382) (lambda (&x~1622177385~1385) (let ((&input~1622177385~1387 &x~1622177385~1385)) (let ((&fail~1622177385~1388 (lambda () (ex:invalid-form &input~1622177385~1387)))) (if (pair? &input~1622177385~1387) (let ((&temp~1622177385~1400 (car &input~1622177385~1387))) (let ((&dummy~1622177385~1389 &temp~1622177385~1400)) (let ((&temp~1622177385~1395 (cdr &input~1622177385~1387))) (if (pair? &temp~1622177385~1395) (let ((&temp~1622177385~1399 (car &temp~1622177385~1395))) (let ((&test~1622177385~1390 &temp~1622177385~1399)) (let ((&temp~1622177385~1396 (cdr &temp~1622177385~1395))) (if (pair? &temp~1622177385~1396) (let ((&temp~1622177385~1398 (car &temp~1622177385~1396))) (let ((&result1~1622177385~1391 &temp~1622177385~1398)) (let ((&temp~1622177385~1397 (cdr &temp~1622177385~1396))) (if (list? &temp~1622177385~1397) (let ((&result2~1622177385~1392 &temp~1622177385~1397)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1394)) 0 (quote (rnrs control))) (cons &test~1622177385~1390 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1394)) 0 (quote (rnrs control))) (cons &result1~1622177385~1391 &result2~1622177385~1392)) (quote ()))))) (&fail~1622177385~1388))))) (&fail~1622177385~1388))))) (&fail~1622177385~1388))))) (&fail~1622177385~1388)))))) (ex:register-macro! (quote &unless~1622177385~1401) (lambda (&x~1622177385~1404) (let ((&input~1622177385~1406 &x~1622177385~1404)) (let ((&fail~1622177385~1407 (lambda () (ex:invalid-form &input~1622177385~1406)))) (if (pair? &input~1622177385~1406) (let ((&temp~1622177385~1419 (car &input~1622177385~1406))) (let ((&dummy~1622177385~1408 &temp~1622177385~1419)) (let ((&temp~1622177385~1414 (cdr &input~1622177385~1406))) (if (pair? &temp~1622177385~1414) (let ((&temp~1622177385~1418 (car &temp~1622177385~1414))) (let ((&test~1622177385~1409 &temp~1622177385~1418)) (let ((&temp~1622177385~1415 (cdr &temp~1622177385~1414))) (if (pair? &temp~1622177385~1415) (let ((&temp~1622177385~1417 (car &temp~1622177385~1415))) (let ((&result1~1622177385~1410 &temp~1622177385~1417)) (let ((&temp~1622177385~1416 (cdr &temp~1622177385~1415))) (if (list? &temp~1622177385~1416) (let ((&result2~1622177385~1411 &temp~1622177385~1416)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1413)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote not) (quote ()) (quote (&env~1622177385~1413)) 0 (quote (rnrs control))) (cons &test~1622177385~1409 (quote ()))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1413)) 0 (quote (rnrs control))) (cons &result1~1622177385~1410 &result2~1622177385~1411)) (quote ()))))) (&fail~1622177385~1407))))) (&fail~1622177385~1407))))) (&fail~1622177385~1407))))) (&fail~1622177385~1407)))))) (ex:register-macro! (quote &do~1622177385~1420) (lambda (&orig-x~1622177385~1422) (let ((&input~1622177385~1424 &orig-x~1622177385~1422)) (let ((&fail~1622177385~1425 (lambda () (ex:invalid-form &input~1622177385~1424)))) (if (pair? &input~1622177385~1424) (let ((&temp~1622177385~1479 (car &input~1622177385~1424))) (let ((&temp~1622177385~1466 (cdr &input~1622177385~1424))) (if (pair? &temp~1622177385~1466) (let ((&temp~1622177385~1472 (car &temp~1622177385~1466))) (ex:map-while (lambda (&temp~1622177385~1472) (if (pair? &temp~1622177385~1472) (let ((&temp~1622177385~1478 (car &temp~1622177385~1472))) (let ((&var~1622177385~1426 &temp~1622177385~1478)) (let ((&temp~1622177385~1475 (cdr &temp~1622177385~1472))) (if (pair? &temp~1622177385~1475) (let ((&temp~1622177385~1477 (car &temp~1622177385~1475))) (let ((&init~1622177385~1427 &temp~1622177385~1477)) (let ((&temp~1622177385~1476 (cdr &temp~1622177385~1475))) (let ((&step~1622177385~1428 &temp~1622177385~1476)) (list &var~1622177385~1426 &init~1622177385~1427 &step~1622177385~1428))))) #f)))) #f)) &temp~1622177385~1472 (lambda (&cols~1622177385~1473 &rest~1622177385~1474) (if (null? &rest~1622177385~1474) (apply (lambda (&var~1622177385~1426 &init~1622177385~1427 &step~1622177385~1428) (let ((&temp~1622177385~1467 (cdr &temp~1622177385~1466))) (if (pair? &temp~1622177385~1467) (let ((&temp~1622177385~1469 (car &temp~1622177385~1467))) (if (pair? &temp~1622177385~1469) (let ((&temp~1622177385~1471 (car &temp~1622177385~1469))) (let ((&e0~1622177385~1429 &temp~1622177385~1471)) (let ((&temp~1622177385~1470 (cdr &temp~1622177385~1469))) (if (list? &temp~1622177385~1470) (let ((&e1~1622177385~1430 &temp~1622177385~1470)) (let ((&temp~1622177385~1468 (cdr &temp~1622177385~1467))) (if (list? &temp~1622177385~1468) (let ((&c~1622177385~1431 &temp~1622177385~1468)) (let ((&input~1622177385~1434 (map (lambda (&v~1622177385~1436 &s~1622177385~1437) (let ((&input~1622177385~1439 &s~1622177385~1437)) (let ((&fail~1622177385~1440 (lambda () (let ((&fail~1622177385~1441 (lambda () (let ((&fail~1622177385~1442 (lambda () (ex:invalid-form &input~1622177385~1439)))) (ex:syntax-violation (quote do) "Invalid step" &orig-x~1622177385~1422 &s~1622177385~1437))))) (if (pair? &input~1622177385~1439) (let ((&temp~1622177385~1447 (car &input~1622177385~1439))) (let ((&e~1622177385~1444 &temp~1622177385~1447)) (let ((&temp~1622177385~1446 (cdr &input~1622177385~1439))) (if (null? &temp~1622177385~1446) &e~1622177385~1444 (&fail~1622177385~1441))))) (&fail~1622177385~1441)))))) (if (null? &input~1622177385~1439) &v~1622177385~1436 (&fail~1622177385~1440))))) &var~1622177385~1426 &step~1622177385~1428))) (let ((&fail~1622177385~1450 (lambda () (ex:invalid-form &input~1622177385~1434)))) (if (list? &input~1622177385~1434) (let ((&step~1622177385~1451 &input~1622177385~1434)) (begin (let ((&input~1622177385~1454 &e1~1622177385~1430)) (let ((&fail~1622177385~1456 (lambda () (let ((&fail~1622177385~1457 (lambda () (ex:invalid-form &input~1622177385~1454)))) (if (pair? &input~1622177385~1454) (let ((&temp~1622177385~1463 (car &input~1622177385~1454))) (let ((&e1~1622177385~1458 &temp~1622177385~1463)) (let ((&temp~1622177385~1462 (cdr &input~1622177385~1454))) (if (list? &temp~1622177385~1462) (let ((&e2~1622177385~1459 &temp~1622177385~1462)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) (cons (if (= (length &var~1622177385~1426) (length &init~1622177385~1427)) (map (lambda (&var~1622177385~1426 &init~1622177385~1427) (cons &var~1622177385~1426 (cons &init~1622177385~1427 (quote ())))) &var~1622177385~1426 &init~1622177385~1427) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((var init) ...)) (list &var~1622177385~1426 &init~1622177385~1427))) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) (cons &e0~1622177385~1429 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) (cons &e1~1622177385~1458 &e2~1622177385~1459)) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) (append &c~1622177385~1431 (cons (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1622177385~1461)) 0 (quote (rnrs control))) &step~1622177385~1451) (quote ())))) (quote ()))))) (quote ())))))) (&fail~1622177385~1457))))) (&fail~1622177385~1457)))))) (if (null? &input~1622177385~1454) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) (cons (if (= (length &var~1622177385~1426) (length &init~1622177385~1427)) (map (lambda (&var~1622177385~1426 &init~1622177385~1427) (cons &var~1622177385~1426 (cons &init~1622177385~1427 (quote ())))) &var~1622177385~1426 &init~1622177385~1427) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((var init) ...)) (list &var~1622177385~1426 &init~1622177385~1427))) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote not) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) (cons &e0~1622177385~1429 (quote ()))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) (append &c~1622177385~1431 (cons (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1622177385~1465)) 0 (quote (rnrs control))) &step~1622177385~1451) (quote ())))) (quote ())))) (quote ()))))) (&fail~1622177385~1456)))))) (&fail~1622177385~1450))))) (&fail~1622177385~1425)))) (&fail~1622177385~1425))))) (&fail~1622177385~1425))) (&fail~1622177385~1425)))) (if (null? &cols~1622177385~1473) (quote (() () ())) (apply map list &cols~1622177385~1473))) (&fail~1622177385~1425))))) (&fail~1622177385~1425)))) (&fail~1622177385~1425)))))) (ex:register-macro! (quote &case-lambda~1622177385~1480) (lambda (&x~1622177385~1483) (let ((&input~1622177385~1485 &x~1622177385~1483)) (let ((&fail~1622177385~1486 (lambda () (let ((&fail~1622177385~1487 (lambda () (ex:invalid-form &input~1622177385~1485)))) (if (pair? &input~1622177385~1485) (let ((&temp~1622177385~1501 (car &input~1622177385~1485))) (let ((&dummy~1622177385~1488 &temp~1622177385~1501)) (let ((&temp~1622177385~1494 (cdr &input~1622177385~1485))) (ex:map-while (lambda (&temp~1622177385~1494) (if (pair? &temp~1622177385~1494) (let ((&temp~1622177385~1500 (car &temp~1622177385~1494))) (let ((&fmls~1622177385~1489 &temp~1622177385~1500)) (let ((&temp~1622177385~1497 (cdr &temp~1622177385~1494))) (if (pair? &temp~1622177385~1497) (let ((&temp~1622177385~1499 (car &temp~1622177385~1497))) (let ((&b1~1622177385~1490 &temp~1622177385~1499)) (let ((&temp~1622177385~1498 (cdr &temp~1622177385~1497))) (if (list? &temp~1622177385~1498) (let ((&b2~1622177385~1491 &temp~1622177385~1498)) (list &fmls~1622177385~1489 &b1~1622177385~1490 &b2~1622177385~1491)) #f)))) #f)))) #f)) &temp~1622177385~1494 (lambda (&cols~1622177385~1495 &rest~1622177385~1496) (if (null? &rest~1622177385~1496) (apply (lambda (&fmls~1622177385~1489 &b1~1622177385~1490 &b2~1622177385~1491) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (cons (cons (ex:syntax-rename (quote n) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (quote ()))) (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote n) (quote ()) (quote (&env~1622177385~1493)) 0 (quote (rnrs control))) (if (= (length &fmls~1622177385~1489) (length &b1~1622177385~1490) (length &b2~1622177385~1491)) (map (lambda (&fmls~1622177385~1489 &b1~1622177385~1490 &b2~1622177385~1491) (cons &fmls~1622177385~1489 (cons &b1~1622177385~1490 &b2~1622177385~1491))) &fmls~1622177385~1489 &b1~1622177385~1490 &b2~1622177385~1491) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((fmls b1 b2 ...) ...)) (list &fmls~1622177385~1489 &b1~1622177385~1490 &b2~1622177385~1491)))))) (quote ())))) (quote ()))))) (if (null? &cols~1622177385~1495) (quote (() () ())) (apply map list &cols~1622177385~1495))) (&fail~1622177385~1487))))))) (&fail~1622177385~1487)))))) (if (pair? &input~1622177385~1485) (let ((&temp~1622177385~1515 (car &input~1622177385~1485))) (let ((&dummy~1622177385~1502 &temp~1622177385~1515)) (let ((&temp~1622177385~1508 (cdr &input~1622177385~1485))) (if (pair? &temp~1622177385~1508) (let ((&temp~1622177385~1510 (car &temp~1622177385~1508))) (if (pair? &temp~1622177385~1510) (let ((&temp~1622177385~1514 (car &temp~1622177385~1510))) (let ((&fmls~1622177385~1503 &temp~1622177385~1514)) (let ((&temp~1622177385~1511 (cdr &temp~1622177385~1510))) (if (pair? &temp~1622177385~1511) (let ((&temp~1622177385~1513 (car &temp~1622177385~1511))) (let ((&b1~1622177385~1504 &temp~1622177385~1513)) (let ((&temp~1622177385~1512 (cdr &temp~1622177385~1511))) (if (list? &temp~1622177385~1512) (let ((&b2~1622177385~1505 &temp~1622177385~1512)) (let ((&temp~1622177385~1509 (cdr &temp~1622177385~1508))) (if (null? &temp~1622177385~1509) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1507)) 0 (quote (rnrs control))) (cons &fmls~1622177385~1503 (cons &b1~1622177385~1504 &b2~1622177385~1505))) (&fail~1622177385~1486)))) (&fail~1622177385~1486))))) (&fail~1622177385~1486))))) (&fail~1622177385~1486))) (&fail~1622177385~1486))))) (&fail~1622177385~1486)))))) (ex:register-macro! (quote &case-lambda-help~1622177385~1516) (lambda (&x~1622177385~1519) (let ((&input~1622177385~1521 &x~1622177385~1519)) (let ((&fail~1622177385~1522 (lambda () (let ((&fail~1622177385~1523 (lambda () (let ((&fail~1622177385~1524 (lambda () (let ((&fail~1622177385~1525 (lambda () (ex:invalid-form &input~1622177385~1521)))) (if (pair? &input~1622177385~1521) (let ((&temp~1622177385~1546 (car &input~1622177385~1521))) (let ((&dummy~1622177385~1526 &temp~1622177385~1546)) (let ((&temp~1622177385~1535 (cdr &input~1622177385~1521))) (if (pair? &temp~1622177385~1535) (let ((&temp~1622177385~1545 (car &temp~1622177385~1535))) (let ((&args~1622177385~1527 &temp~1622177385~1545)) (let ((&temp~1622177385~1536 (cdr &temp~1622177385~1535))) (if (pair? &temp~1622177385~1536) (let ((&temp~1622177385~1544 (car &temp~1622177385~1536))) (let ((&n~1622177385~1528 &temp~1622177385~1544)) (let ((&temp~1622177385~1537 (cdr &temp~1622177385~1536))) (if (pair? &temp~1622177385~1537) (let ((&temp~1622177385~1539 (car &temp~1622177385~1537))) (if (pair? &temp~1622177385~1539) (let ((&temp~1622177385~1543 (car &temp~1622177385~1539))) (let ((&r~1622177385~1529 &temp~1622177385~1543)) (let ((&temp~1622177385~1540 (cdr &temp~1622177385~1539))) (if (pair? &temp~1622177385~1540) (let ((&temp~1622177385~1542 (car &temp~1622177385~1540))) (let ((&b1~1622177385~1530 &temp~1622177385~1542)) (let ((&temp~1622177385~1541 (cdr &temp~1622177385~1540))) (if (list? &temp~1622177385~1541) (let ((&b2~1622177385~1531 &temp~1622177385~1541)) (let ((&temp~1622177385~1538 (cdr &temp~1622177385~1537))) (if (list? &temp~1622177385~1538) (let ((&more~1622177385~1532 &temp~1622177385~1538)) (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1622177385~1534)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1534)) 0 (quote (rnrs control))) (cons &r~1622177385~1529 (cons &b1~1622177385~1530 &b2~1622177385~1531))) (cons &args~1622177385~1527 (quote ()))))) (&fail~1622177385~1525)))) (&fail~1622177385~1525))))) (&fail~1622177385~1525))))) (&fail~1622177385~1525))) (&fail~1622177385~1525))))) (&fail~1622177385~1525))))) (&fail~1622177385~1525))))) (&fail~1622177385~1525)))))) (if (pair? &input~1622177385~1521) (let ((&temp~1622177385~1573 (car &input~1622177385~1521))) (let ((&dummy~1622177385~1547 &temp~1622177385~1573)) (let ((&temp~1622177385~1558 (cdr &input~1622177385~1521))) (if (pair? &temp~1622177385~1558) (let ((&temp~1622177385~1572 (car &temp~1622177385~1558))) (let ((&args~1622177385~1548 &temp~1622177385~1572)) (let ((&temp~1622177385~1559 (cdr &temp~1622177385~1558))) (if (pair? &temp~1622177385~1559) (let ((&temp~1622177385~1571 (car &temp~1622177385~1559))) (let ((&n~1622177385~1549 &temp~1622177385~1571)) (let ((&temp~1622177385~1560 (cdr &temp~1622177385~1559))) (if (pair? &temp~1622177385~1560) (let ((&temp~1622177385~1562 (car &temp~1622177385~1560))) (if (pair? &temp~1622177385~1562) (let ((&temp~1622177385~1566 (car &temp~1622177385~1562))) (if (pair? &temp~1622177385~1566) (let ((&temp~1622177385~1570 (car &temp~1622177385~1566))) (let ((&x1~1622177385~1550 &temp~1622177385~1570)) (let ((&temp~1622177385~1567 (cdr &temp~1622177385~1566))) (if (>= (ex:dotted-length &temp~1622177385~1567) 0) (let ((&temp~1622177385~1569 (ex:dotted-butlast &temp~1622177385~1567 0))) (if (list? &temp~1622177385~1569) (let ((&x2~1622177385~1551 &temp~1622177385~1569)) (let ((&temp~1622177385~1568 (ex:dotted-last &temp~1622177385~1567 0))) (let ((&r~1622177385~1552 &temp~1622177385~1568)) (let ((&temp~1622177385~1563 (cdr &temp~1622177385~1562))) (if (pair? &temp~1622177385~1563) (let ((&temp~1622177385~1565 (car &temp~1622177385~1563))) (let ((&b1~1622177385~1553 &temp~1622177385~1565)) (let ((&temp~1622177385~1564 (cdr &temp~1622177385~1563))) (if (list? &temp~1622177385~1564) (let ((&b2~1622177385~1554 &temp~1622177385~1564)) (let ((&temp~1622177385~1561 (cdr &temp~1622177385~1560))) (if (list? &temp~1622177385~1561) (let ((&more~1622177385~1555 &temp~1622177385~1561)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote >=) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons &n~1622177385~1549 (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons (cons &x1~1622177385~1550 &x2~1622177385~1551) (quote ()))) (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons (cons &x1~1622177385~1550 (append &x2~1622177385~1551 &r~1622177385~1552)) (cons &b1~1622177385~1553 &b2~1622177385~1554))) (cons &args~1622177385~1548 (quote ())))) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1622177385~1557)) 0 (quote (rnrs control))) (cons &args~1622177385~1548 (cons &n~1622177385~1549 &more~1622177385~1555))) (quote ())))))) (&fail~1622177385~1524)))) (&fail~1622177385~1524))))) (&fail~1622177385~1524)))))) (&fail~1622177385~1524))) (&fail~1622177385~1524))))) (&fail~1622177385~1524))) (&fail~1622177385~1524))) (&fail~1622177385~1524))))) (&fail~1622177385~1524))))) (&fail~1622177385~1524))))) (&fail~1622177385~1524)))))) (if (pair? &input~1622177385~1521) (let ((&temp~1622177385~1594 (car &input~1622177385~1521))) (let ((&dummy~1622177385~1574 &temp~1622177385~1594)) (let ((&temp~1622177385~1583 (cdr &input~1622177385~1521))) (if (pair? &temp~1622177385~1583) (let ((&temp~1622177385~1593 (car &temp~1622177385~1583))) (let ((&args~1622177385~1575 &temp~1622177385~1593)) (let ((&temp~1622177385~1584 (cdr &temp~1622177385~1583))) (if (pair? &temp~1622177385~1584) (let ((&temp~1622177385~1592 (car &temp~1622177385~1584))) (let ((&n~1622177385~1576 &temp~1622177385~1592)) (let ((&temp~1622177385~1585 (cdr &temp~1622177385~1584))) (if (pair? &temp~1622177385~1585) (let ((&temp~1622177385~1587 (car &temp~1622177385~1585))) (if (pair? &temp~1622177385~1587) (let ((&temp~1622177385~1591 (car &temp~1622177385~1587))) (if (list? &temp~1622177385~1591) (let ((&x~1622177385~1577 &temp~1622177385~1591)) (let ((&temp~1622177385~1588 (cdr &temp~1622177385~1587))) (if (pair? &temp~1622177385~1588) (let ((&temp~1622177385~1590 (car &temp~1622177385~1588))) (let ((&b1~1622177385~1578 &temp~1622177385~1590)) (let ((&temp~1622177385~1589 (cdr &temp~1622177385~1588))) (if (list? &temp~1622177385~1589) (let ((&b2~1622177385~1579 &temp~1622177385~1589)) (let ((&temp~1622177385~1586 (cdr &temp~1622177385~1585))) (if (list? &temp~1622177385~1586) (let ((&more~1622177385~1580 &temp~1622177385~1586)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote =) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons &n~1622177385~1576 (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons &x~1622177385~1577 (quote ()))) (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons &x~1622177385~1577 (cons &b1~1622177385~1578 &b2~1622177385~1579))) (cons &args~1622177385~1575 (quote ())))) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1622177385~1582)) 0 (quote (rnrs control))) (cons &args~1622177385~1575 (cons &n~1622177385~1576 &more~1622177385~1580))) (quote ())))))) (&fail~1622177385~1523)))) (&fail~1622177385~1523))))) (&fail~1622177385~1523)))) (&fail~1622177385~1523))) (&fail~1622177385~1523))) (&fail~1622177385~1523))))) (&fail~1622177385~1523))))) (&fail~1622177385~1523))))) (&fail~1622177385~1523)))))) (if (pair? &input~1622177385~1521) (let ((&temp~1622177385~1605 (car &input~1622177385~1521))) (let ((&dummy~1622177385~1595 &temp~1622177385~1605)) (let ((&temp~1622177385~1600 (cdr &input~1622177385~1521))) (if (pair? &temp~1622177385~1600) (let ((&temp~1622177385~1604 (car &temp~1622177385~1600))) (let ((&args~1622177385~1596 &temp~1622177385~1604)) (let ((&temp~1622177385~1601 (cdr &temp~1622177385~1600))) (if (pair? &temp~1622177385~1601) (let ((&temp~1622177385~1603 (car &temp~1622177385~1601))) (let ((&n~1622177385~1597 &temp~1622177385~1603)) (let ((&temp~1622177385~1602 (cdr &temp~1622177385~1601))) (if (null? &temp~1622177385~1602) (cons (ex:syntax-rename (quote assertion-violation) (quote ()) (quote (&env~1622177385~1599)) 0 (quote (rnrs control))) (cons (quote #f) (cons (quote "unexpected number of arguments") (quote ())))) (&fail~1622177385~1522))))) (&fail~1622177385~1522))))) (&fail~1622177385~1522))))) (&fail~1622177385~1522)))))) (values)) (lambda () (values)) (quote &build~1622177385~1606))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs lists)) (lambda () (quote ())) (quote ((find variable find (0) #f ()) (for-all variable for-all (0) #f ()) (exists variable exists (0) #f ()) (filter variable filter (0) #f ()) (partition variable partition (0) #f ()) (fold-left variable fold-left (0) #f ()) (fold-right variable fold-right (0) #f ()) (remp variable remp (0) #f ()) (remove variable remove (0) #f ()) (remq variable remq (0) #f ()) (remv variable remv (0) #f ()) (memp variable memp (0) #f ()) (member variable member (0) #f ()) (memv variable memv (0) #f ()) (memq variable memq (0) #f ()) (assp variable assp (0) #f ()) (assoc variable assoc (0) #f ()) (assv variable assv (0) #f ()) (assq variable assq (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1607))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs io simple)) (lambda () (quote ())) (quote ((call-with-input-file variable call-with-input-file (0) #f ()) (call-with-output-file variable call-with-output-file (0) #f ()) (close-input-port variable close-input-port (0) #f ()) (close-output-port variable close-output-port (0) #f ()) (current-input-port variable current-input-port (0) #f ()) (current-output-port variable current-output-port (0) #f ()) (display variable display (0) #f ()) (eof-object? variable eof-object? (0) #f ()) (newline variable newline (0) #f ()) (open-input-file variable open-input-file (0) #f ()) (open-output-file variable open-output-file (0) #f ()) (peek-char variable peek-char (0) #f ()) (read variable read (0) #f ()) (read-char variable read-char (0) #f ()) (with-input-from-file variable with-input-from-file (0) #f ()) (with-output-to-file variable with-output-to-file (0) #f ()) (write variable write (0) #f ()) (write-char variable write-char (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1608))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs unicode)) (lambda () (quote ())) (quote ((char-upcase variable char-upcase (0) #f ()) (char-downcase variable char-downcase (0) #f ()) (char-titlecase variable char-titlecase (0) #f ()) (char-foldcase variable char-foldcase (0) #f ()) (char-ci=? variable char-ci=? (0) #f ()) (char-ci<? variable char-ci<? (0) #f ()) (char-ci>? variable char-ci>? (0) #f ()) (char-ci<=? variable char-ci<=? (0) #f ()) (char-ci>=? variable char-ci>=? (0) #f ()) (char-alphabetic? variable char-alphabetic? (0) #f ()) (char-numeric? variable char-numeric? (0) #f ()) (char-whitespace? variable char-whitespace? (0) #f ()) (char-upper-case? variable char-upper-case? (0) #f ()) (char-lower-case? variable char-lower-case? (0) #f ()) (char-title-case? variable char-title-case? (0) #f ()) (char-general-category variable char-general-category (0) #f ()) (string-upcase variable string-upcase (0) #f ()) (string-downcase variable string-downcase (0) #f ()) (string-titlecase variable string-titlecase (0) #f ()) (string-foldcase variable string-foldcase (0) #f ()) (string-ci=? variable string-ci=? (0) #f ()) (string-ci<? variable string-ci<? (0) #f ()) (string-ci>? variable string-ci>? (0) #f ()) (string-ci<=? variable string-ci<=? (0) #f ()) (string-ci>=? variable string-ci>=? (0) #f ()) (string-normalize-nfd variable string-normalize-nfd (0) #f ()) (string-normalize-nfkd variable string-normalize-nfkd (0) #f ()) (string-normalize-nfc variable string-normalize-nfc (0) #f ()) (string-normalize-nfkc variable string-normalize-nfkc (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1609))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs sorting)) (lambda () (quote ())) (quote ((list-sort variable list-sort (0) #f ()) (vector-sort variable vector-sort (0) #f ()) (vector-sort! variable vector-sort! (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1610))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs records procedural)) (lambda () (quote ())) (quote ((make-record-type-descriptor variable make-record-type-descriptor (0) #f ()) (record-type-descriptor? variable record-type-descriptor? (0) #f ()) (make-record-constructor-descriptor variable make-record-constructor-descriptor (0) #f ()) (record-constructor variable record-constructor (0) #f ()) (record-predicate variable record-predicate (0) #f ()) (record-accessor variable record-accessor (0) #f ()) (record-mutator variable record-mutator (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1611))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs records inspection)) (lambda () (quote ())) (quote ((record? variable record? (0) #f ()) (record-rtd variable record-rtd (0) #f ()) (record-type-name variable record-type-name (0) #f ()) (record-type-parent variable record-type-parent (0) #f ()) (record-type-uid variable record-type-uid (0) #f ()) (record-type-generative? variable record-type-generative? (0) #f ()) (record-type-sealed? variable record-type-sealed? (0) #f ()) (record-type-opaque? variable record-type-opaque? (0) #f ()) (record-type-field-names variable record-type-field-names (0) #f ()) (record-field-mutable? variable record-field-mutable? (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1612))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs arithmetic fixnums)) (lambda () (quote ())) (quote ((fixnum? variable fixnum? (0) #f ()) (fixnum-width variable fixnum-width (0) #f ()) (least-fixnum variable least-fixnum (0) #f ()) (greatest-fixnum variable greatest-fixnum (0) #f ()) (fx=? variable fx=? (0) #f ()) (fx>? variable fx>? (0) #f ()) (fx<? variable fx<? (0) #f ()) (fx>=? variable fx>=? (0) #f ()) (fx<=? variable fx<=? (0) #f ()) (fxzero? variable fxzero? (0) #f ()) (fxpositive? variable fxpositive? (0) #f ()) (fxnegative? variable fxnegative? (0) #f ()) (fxodd? variable fxodd? (0) #f ()) (fxeven? variable fxeven? (0) #f ()) (fxmax variable fxmax (0) #f ()) (fxmin variable fxmin (0) #f ()) (fx+ variable fx+ (0) #f ()) (fx- variable fx- (0) #f ()) (fx* variable fx* (0) #f ()) (fxdiv-and-mod variable fxdiv-and-mod (0) #f ()) (fxdiv variable fxdiv (0) #f ()) (fxmod variable fxmod (0) #f ()) (fxdiv0-and-mod0 variable fxdiv0-and-mod0 (0) #f ()) (fxdiv0 variable fxdiv0 (0) #f ()) (fxmod0 variable fxmod0 (0) #f ()) (fx+/carry variable fx+/carry (0) #f ()) (fx-/carry variable fx-/carry (0) #f ()) (fx*/carry variable fx*/carry (0) #f ()) (fxnot variable fxnot (0) #f ()) (fxand variable fxand (0) #f ()) (fxior variable fxior (0) #f ()) (fxxor variable fxxor (0) #f ()) (fxif variable fxif (0) #f ()) (fxbit-count variable fxbit-count (0) #f ()) (fxlength variable fxlength (0) #f ()) (fxfirst-bit-set variable fxfirst-bit-set (0) #f ()) (fxbit-set? variable fxbit-set? (0) #f ()) (fxcopy-bit variable fxcopy-bit (0) #f ()) (fxbit-field variable fxbit-field (0) #f ()) (fxcopy-bit-field variable fxcopy-bit-field (0) #f ()) (fxrotate-bit-field variable fxrotate-bit-field (0) #f ()) (fxreverse-bit-field variable fxreverse-bit-field (0) #f ()) (fxarithmetic-shift variable fxarithmetic-shift (0) #f ()) (fxarithmetic-shift-left variable fxarithmetic-shift-left (0) #f ()) (fxarithmetic-shift-right variable fxarithmetic-shift-right (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1613))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs arithmetic flonums)) (lambda () (quote ())) (quote ((flonum? variable flonum? (0) #f ()) (real->flonum variable real->flonum (0) #f ()) (fl=? variable fl=? (0) #f ()) (fl<? variable fl<? (0) #f ()) (fl>? variable fl>? (0) #f ()) (fl<=? variable fl<=? (0) #f ()) (fl>=? variable fl>=? (0) #f ()) (flinteger? variable flinteger? (0) #f ()) (flzero? variable flzero? (0) #f ()) (flpositive? variable flpositive? (0) #f ()) (flnegative? variable flnegative? (0) #f ()) (flodd? variable flodd? (0) #f ()) (fleven? variable fleven? (0) #f ()) (flfinite? variable flfinite? (0) #f ()) (flinfinite? variable flinfinite? (0) #f ()) (flnan? variable flnan? (0) #f ()) (flmax variable flmax (0) #f ()) (flmin variable flmin (0) #f ()) (fl+ variable fl+ (0) #f ()) (fl* variable fl* (0) #f ()) (fl- variable fl- (0) #f ()) (fl/ variable fl/ (0) #f ()) (flabs variable flabs (0) #f ()) (fldiv-and-mod variable fldiv-and-mod (0) #f ()) (fldiv variable fldiv (0) #f ()) (flmod variable flmod (0) #f ()) (fldiv0-and-mod0 variable fldiv0-and-mod0 (0) #f ()) (fldiv0 variable fldiv0 (0) #f ()) (flmod0 variable flmod0 (0) #f ()) (flnumerator variable flnumerator (0) #f ()) (fldenominator variable fldenominator (0) #f ()) (flfloor variable flfloor (0) #f ()) (flceiling variable flceiling (0) #f ()) (fltruncate variable fltruncate (0) #f ()) (flround variable flround (0) #f ()) (flexp variable flexp (0) #f ()) (fllog variable fllog (0) #f ()) (flsin variable flsin (0) #f ()) (flcos variable flcos (0) #f ()) (fltan variable fltan (0) #f ()) (flasin variable flasin (0) #f ()) (flacos variable flacos (0) #f ()) (flatan variable flatan (0) #f ()) (flsqrt variable flsqrt (0) #f ()) (flexpt variable flexpt (0) #f ()) (fixnum->flonum variable fixnum->flonum (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1614))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs arithmetic bitwise)) (lambda () (quote ())) (quote ((bitwise-not variable bitwise-not (0) #f ()) (bitwise-and variable bitwise-and (0) #f ()) (bitwise-ior variable bitwise-ior (0) #f ()) (bitwise-xor variable bitwise-xor (0) #f ()) (bitwise-if variable bitwise-if (0) #f ()) (bitwise-bit-count variable bitwise-bit-count (0) #f ()) (bitwise-length variable bitwise-length (0) #f ()) (bitwise-first-bit-set variable bitwise-first-bit-set (0) #f ()) (bitwise-bit-set? variable bitwise-bit-set? (0) #f ()) (bitwise-copy-bit variable bitwise-copy-bit (0) #f ()) (bitwise-bit-field variable bitwise-bit-field (0) #f ()) (bitwise-copy-bit-field variable bitwise-copy-bit-field (0) #f ()) (bitwise-rotate-bit-field variable bitwise-rotate-bit-field (0) #f ()) (bitwise-reverse-bit-field variable bitwise-reverse-bit-field (0) #f ()) (bitwise-arithmetic-shift variable bitwise-arithmetic-shift (0) #f ()) (bitwise-arithmetic-shift-left variable bitwise-arithmetic-shift-left (0) #f ()) (bitwise-arithmetic-shift-right variable bitwise-arithmetic-shift-right (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1615))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs files)) (lambda () (quote ())) (quote ((file-exists? variable file-exists? (0) #f ()) (delete-file variable delete-file (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1616))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs syntax-case)) (lambda () (quote ())) (quote ((make-variable-transformer variable ex:make-variable-transformer (0) #f ()) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (free-identifier=? variable ex:free-identifier=? (0) #f ()) (generate-temporaries variable ex:generate-temporaries (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()) (syntax->datum variable ex:syntax->datum (0) #f ()) (syntax-violation variable ex:syntax-violation (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (quasisyntax macro &quasisyntax~1622177385~537 (0) #f (core quasisyntax)) (unsyntax macro &unsyntax~1622177385~755 (0) #f (core quasisyntax)) (unsyntax-splicing macro &unsyntax-splicing~1622177385~759 (0) #f (core quasisyntax)) (with-syntax macro &with-syntax~1622177385~4 (0) #f (core with-syntax)) (_ macro _ (0) #f ()) (... macro ... (0) #f ()))) (quote (((core quasisyntax) 0) ((core with-syntax) 0) ((core primitives) 0))) (quote (&build~1622177385~763 &build~1622177385~58 &build~1622177385~3)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1617))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs base)) (lambda () (ex:uncompress (quote (((&env~1622177385~1628 0 1 2 3)) (3 (((assert) macro &assert~1622177385~1618 (0) #f (rnrs base)) ((undefined) variable ex:undefined (0) #f ()) ((eval) variable ex:eval (0) #f ()) ((environment-bindings) variable ex:environment-bindings (0) #f ()) ((environment) variable ex:environment (0) #f ()) ((syntax-violation) variable ex:syntax-violation (0) #f ()) ((syntax->datum) variable ex:syntax->datum (0) #f ()) ((datum->syntax) variable ex:datum->syntax (0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f ()) ((identifier?) variable ex:identifier? (0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f ()) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((letrec-syntax) macro letrec-syntax (0) #f ()) ((let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((letrec*) macro &letrec*~1622177385~180 (0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0) #f (core let)) ((let) macro &let~1622177385~101 (0) #f (core let)) ((=>) macro &=>~1622177385~482 (0) #f (core derived)) ((else) macro &else~1622177385~486 (0) #f (core derived)) ((case) macro &case~1622177385~402 (0) #f (core derived)) ((cond) macro &cond~1622177385~286 (0) #f (core derived)) ((let*) macro &let*~1622177385~205 (0) #f (core derived)) ((unquote-splicing) macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)) ((unquote) macro &unquote~1622177385~1198 (0) #f (core quasiquote)) ((quasiquote) macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) ((let*-values) macro &let*-values~1622177385~1347 (0) #f (core let-values)) ((let-values) macro &let-values~1622177385~1207 (0) #f (core let-values)) ((syntax-rules) macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) ((identifier-syntax) macro &identifier-syntax~1622177385~491 (1) #f (core identifier-syntax)) ((...) macro ... (1) #f ()) ((_) macro _ (1) #f ()) ((set!) macro set! (1 0) #f ()) ((call/cc) variable call/cc (0) #f ()) ((assertion-violation) variable assertion-violation (0) #f ()) ((error) variable error (0) #f ()) ((vector-for-each) variable vector-for-each (0) #f ()) ((vector-map) variable vector-map (0) #f ()) ((string-for-each) variable string-for-each (0) #f ()) ((symbol=?) variable symbol=? (0) #f ()) ((boolean=?) variable boolean=? (0) #f ()) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f ()) ((div0-and-mod0) variable div0-and-mod0 (0) #f ()) ((mod0) variable mod0 (0) #f ()) ((div0) variable div0 (0) #f ()) ((div-and-mod) variable div-and-mod (0) #f ()) ((mod) variable mod (0) #f ()) ((div) variable div (0) #f ()) ((nan?) variable nan? (0) #f ()) ((infinite?) variable infinite? (0) #f ()) ((finite?) variable finite? (0) #f ()) ((inexact) variable inexact (0) #f ()) ((exact) variable exact (0) #f ()) ((integer-valued?) variable integer-valued? (0) #f ()) ((rational-valued?) variable rational-valued? (0) #f ()) ((real-valued?) variable real-valued? (0) #f ()) ((zero?) variable zero? (0) #f ()) ((vector?) variable vector? (0) #f ()) ((vector-set!) variable vector-set! (0) #f ()) ((vector-ref) variable vector-ref (0) #f ()) ((vector-length) variable vector-length (0) #f ()) ((vector-fill!) variable vector-fill! (0) #f ()) ((vector->list) variable vector->list (0) #f ()) ((vector) variable vector (0) #f ()) ((values) variable values (0) #f ()) ((truncate) variable truncate (0) #f ()) ((tan) variable tan (0) #f ()) ((symbol?) variable symbol? (0) #f ()) ((symbol->string) variable symbol->string (0) #f ()) ((substring) variable substring (0) #f ()) ((string?) variable string? (0) #f ()) ((string>?) variable string>? (0) #f ()) ((string>=?) variable string>=? (0) #f ()) ((string=?) variable string=? (0) #f ()) ((string<?) variable string<? (0) #f ()) ((string<=?) variable string<=? (0) #f ()) ((string-ref) variable string-ref (0) #f ()) ((string-length) variable string-length (0) #f ()) ((string-copy) variable string-copy (0) #f ()) ((string-append) variable string-append (0) #f ()) ((string->symbol) variable string->symbol (0) #f ()) ((string->number) variable string->number (0) #f ()) ((string->list) variable string->list (0) #f ()) ((string) variable string (0) #f ()) ((sqrt) variable sqrt (0) #f ()) ((sin) variable sin (0) #f ()) ((round) variable round (0) #f ()) ((reverse) variable reverse (0) #f ()) ((real?) variable real? (0) #f ()) ((real-part) variable real-part (0) #f ()) ((rationalize) variable rationalize (0) #f ()) ((rational?) variable rational? (0) #f ()) ((procedure?) variable procedure? (0) #f ()) ((positive?) variable positive? (0) #f ()) ((pair?) variable pair? (0) #f ()) ((odd?) variable odd? (0) #f ()) ((numerator) variable numerator (0) #f ()) ((number?) variable number? (0) #f ()) ((number->string) variable number->string (0) #f ()) ((null?) variable null? (0) #f ()) ((not) variable not (0) #f ()) ((negative?) variable negative? (0) #f ()) ((min) variable min (0) #f ()) ((max) variable max (0) #f ()) ((map) variable map (0) #f ()) ((make-vector) variable make-vector (0) #f ()) ((make-string) variable make-string (0) #f ()) ((make-rectangular) variable make-rectangular (0) #f ()) ((make-polar) variable make-polar (0) #f ()) ((magnitude) variable magnitude (0) #f ()) ((log) variable log (0) #f ()) ((list?) variable list? (0) #f ()) ((list-tail) variable list-tail (0) #f ()) ((list-ref) variable list-ref (0) #f ()) ((list->vector) variable list->vector (0) #f ()) ((list->string) variable list->string (0) #f ()) ((list) variable list (0) #f ()) ((length) variable length (0) #f ()) ((lcm) variable lcm (0) #f ()) ((integer?) variable integer? (0) #f ()) ((integer->char) variable integer->char (0) #f ()) ((inexact?) variable inexact? (0) #f ()) ((imag-part) variable imag-part (0) #f ()) ((gcd) variable gcd (0) #f ()) ((for-each) variable for-each (0) #f ()) ((floor) variable floor (0) #f ()) ((expt) variable expt (0) #f ()) ((exp) variable exp (0) #f ()) ((exact?) variable exact? (0) #f ()) ((even?) variable even? (0) #f ()) ((eqv?) variable eqv? (0) #f ()) ((equal?) variable equal? (0) #f ()) ((eq?) variable eq? (0) #f ()) ((dynamic-wind) variable dynamic-wind (0) #f ()) ((denominator) variable denominator (0) #f ()) ((cos) variable cos (0) #f ()) ((cons) variable cons (0) #f ()) ((complex?) variable complex? (0) #f ()) ((char->integer) variable char->integer (0) #f ()) ((char?) variable char? (0) #f ()) ((ceiling) variable ceiling (0) #f ()) ((cddddr) variable cddddr (0) #f ()) ((cdddar) variable cdddar (0) #f ()) ((cddadr) variable cddadr (0) #f ()) ((cddaar) variable cddaar (0) #f ()) ((cdaddr) variable cdaddr (0) #f ()) ((cdadar) variable cdadar (0) #f ()) ((cdaadr) variable cdaadr (0) #f ()) ((cdaaar) variable cdaaar (0) #f ()) ((cadddr) variable cadddr (0) #f ()) ((caddar) variable caddar (0) #f ()) ((cadadr) variable cadadr (0) #f ()) ((cadaar) variable cadaar (0) #f ()) ((caaddr) variable caaddr (0) #f ()) ((caadar) variable caadar (0) #f ()) ((caaadr) variable caaadr (0) #f ()) ((caaaar) variable caaaar (0) #f ()) ((cdddr) variable cdddr (0) #f ()) ((cddar) variable cddar (0) #f ()) ((cdadr) variable cdadr (0) #f ()) ((cdaar) variable cdaar (0) #f ()) ((caddr) variable caddr (0) #f ()) ((cadar) variable cadar (0) #f ()) ((caadr) variable caadr (0) #f ()) ((caaar) variable caaar (0) #f ()) ((cddr) variable cddr (0) #f ()) ((cdar) variable cdar (0) #f ()) ((cadr) variable cadr (0) #f ()) ((caar) variable caar (0) #f ()) ((cdr) variable cdr (0) #f ()) ((car) variable car (0) #f ()) ((call-with-values) variable call-with-values (0) #f ()) ((call-with-current-continuation) variable call-with-current-continuation (0) #f ()) ((boolean?) variable boolean? (0) #f ()) ((atan) variable atan (0) #f ()) ((asin) variable asin (0) #f ()) ((apply) variable apply (0) #f ()) ((append) variable append (0) #f ()) ((acos) variable acos (0) #f ()) ((abs) variable abs (0) #f ()) ((>=) variable >= (0) #f ()) ((>) variable > (0) #f ()) ((=) variable = (0) #f ()) ((<=) variable <= (0) #f ()) ((<) variable < (0) #f ()) ((/) variable / (0) #f ()) ((-) variable - (0) #f ()) ((+) variable + (0) #f ()) ((*) variable * (0) #f ()))) (2 (((x &c~1622177385~1619) variable &x~1622177385~1621 (0) #f (rnrs base)))) (1 ()) (0 (((dummy &c~1622177385~1619) . #f) ((expression) . #f))))))) (quote ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (1 0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (1) #f ()) (... macro ... (1) #f ()) (let macro &let~1622177385~101 (0) #f (core let)) (let* macro &let*~1622177385~205 (0) #f (core derived)) (letrec macro &letrec~1622177385~149 (0) #f (core let)) (letrec* macro &letrec*~1622177385~180 (0) #f (core let)) (let-values macro &let-values~1622177385~1207 (0) #f (core let-values)) (let*-values macro &let*-values~1622177385~1347 (0) #f (core let-values)) (case macro &case~1622177385~402 (0) #f (core derived)) (cond macro &cond~1622177385~286 (0) #f (core derived)) (else macro &else~1622177385~486 (0) #f (core derived)) (=> macro &=>~1622177385~482 (0) #f (core derived)) (assert macro &assert~1622177385~1618 (0) #f (rnrs base)) (quasiquote macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) (unquote macro &unquote~1622177385~1198 (0) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)) (syntax-rules macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) (identifier-syntax macro &identifier-syntax~1622177385~491 (1) #f (core identifier-syntax)) (* variable * (0) #f ()) (+ variable + (0) #f ()) (- variable - (0) #f ()) (/ variable / (0) #f ()) (< variable < (0) #f ()) (<= variable <= (0) #f ()) (= variable = (0) #f ()) (> variable > (0) #f ()) (>= variable >= (0) #f ()) (abs variable abs (0) #f ()) (acos variable acos (0) #f ()) (append variable append (0) #f ()) (apply variable apply (0) #f ()) (asin variable asin (0) #f ()) (atan variable atan (0) #f ()) (boolean? variable boolean? (0) #f ()) (call-with-current-continuation variable call-with-current-continuation (0) #f ()) (call-with-values variable call-with-values (0) #f ()) (car variable car (0) #f ()) (cdr variable cdr (0) #f ()) (caar variable caar (0) #f ()) (cadr variable cadr (0) #f ()) (cdar variable cdar (0) #f ()) (cddr variable cddr (0) #f ()) (caaar variable caaar (0) #f ()) (caadr variable caadr (0) #f ()) (cadar variable cadar (0) #f ()) (caddr variable caddr (0) #f ()) (cdaar variable cdaar (0) #f ()) (cdadr variable cdadr (0) #f ()) (cddar variable cddar (0) #f ()) (cdddr variable cdddr (0) #f ()) (caaaar variable caaaar (0) #f ()) (caaadr variable caaadr (0) #f ()) (caadar variable caadar (0) #f ()) (caaddr variable caaddr (0) #f ()) (cadaar variable cadaar (0) #f ()) (cadadr variable cadadr (0) #f ()) (caddar variable caddar (0) #f ()) (cadddr variable cadddr (0) #f ()) (cdaaar variable cdaaar (0) #f ()) (cdaadr variable cdaadr (0) #f ()) (cdadar variable cdadar (0) #f ()) (cdaddr variable cdaddr (0) #f ()) (cddaar variable cddaar (0) #f ()) (cddadr variable cddadr (0) #f ()) (cdddar variable cdddar (0) #f ()) (cddddr variable cddddr (0) #f ()) (ceiling variable ceiling (0) #f ()) (char? variable char? (0) #f ()) (char->integer variable char->integer (0) #f ()) (complex? variable complex? (0) #f ()) (cons variable cons (0) #f ()) (cos variable cos (0) #f ()) (denominator variable denominator (0) #f ()) (dynamic-wind variable dynamic-wind (0) #f ()) (eq? variable eq? (0) #f ()) (equal? variable equal? (0) #f ()) (eqv? variable eqv? (0) #f ()) (even? variable even? (0) #f ()) (exact? variable exact? (0) #f ()) (exp variable exp (0) #f ()) (expt variable expt (0) #f ()) (floor variable floor (0) #f ()) (for-each variable for-each (0) #f ()) (gcd variable gcd (0) #f ()) (imag-part variable imag-part (0) #f ()) (inexact? variable inexact? (0) #f ()) (integer->char variable integer->char (0) #f ()) (integer? variable integer? (0) #f ()) (lcm variable lcm (0) #f ()) (length variable length (0) #f ()) (list variable list (0) #f ()) (list->string variable list->string (0) #f ()) (list->vector variable list->vector (0) #f ()) (list-ref variable list-ref (0) #f ()) (list-tail variable list-tail (0) #f ()) (list? variable list? (0) #f ()) (log variable log (0) #f ()) (magnitude variable magnitude (0) #f ()) (make-polar variable make-polar (0) #f ()) (make-rectangular variable make-rectangular (0) #f ()) (make-string variable make-string (0) #f ()) (make-vector variable make-vector (0) #f ()) (map variable map (0) #f ()) (max variable max (0) #f ()) (min variable min (0) #f ()) (negative? variable negative? (0) #f ()) (not variable not (0) #f ()) (null? variable null? (0) #f ()) (number->string variable number->string (0) #f ()) (number? variable number? (0) #f ()) (numerator variable numerator (0) #f ()) (odd? variable odd? (0) #f ()) (pair? variable pair? (0) #f ()) (positive? variable positive? (0) #f ()) (procedure? variable procedure? (0) #f ()) (rational? variable rational? (0) #f ()) (rationalize variable rationalize (0) #f ()) (real-part variable real-part (0) #f ()) (real? variable real? (0) #f ()) (reverse variable reverse (0) #f ()) (round variable round (0) #f ()) (sin variable sin (0) #f ()) (sqrt variable sqrt (0) #f ()) (string variable string (0) #f ()) (string->list variable string->list (0) #f ()) (string->number variable string->number (0) #f ()) (string->symbol variable string->symbol (0) #f ()) (string-append variable string-append (0) #f ()) (string-copy variable string-copy (0) #f ()) (string-length variable string-length (0) #f ()) (string-ref variable string-ref (0) #f ()) (string<=? variable string<=? (0) #f ()) (string<? variable string<? (0) #f ()) (string=? variable string=? (0) #f ()) (string>=? variable string>=? (0) #f ()) (string>? variable string>? (0) #f ()) (string? variable string? (0) #f ()) (substring variable substring (0) #f ()) (symbol->string variable symbol->string (0) #f ()) (symbol? variable symbol? (0) #f ()) (tan variable tan (0) #f ()) (truncate variable truncate (0) #f ()) (values variable values (0) #f ()) (vector variable vector (0) #f ()) (vector->list variable vector->list (0) #f ()) (vector-fill! variable vector-fill! (0) #f ()) (vector-length variable vector-length (0) #f ()) (vector-ref variable vector-ref (0) #f ()) (vector-set! variable vector-set! (0) #f ()) (vector? variable vector? (0) #f ()) (zero? variable zero? (0) #f ()) (real-valued? variable real-valued? (0) #f ()) (rational-valued? variable rational-valued? (0) #f ()) (integer-valued? variable integer-valued? (0) #f ()) (exact variable exact (0) #f ()) (inexact variable inexact (0) #f ()) (finite? variable finite? (0) #f ()) (infinite? variable infinite? (0) #f ()) (nan? variable nan? (0) #f ()) (div variable div (0) #f ()) (mod variable mod (0) #f ()) (div-and-mod variable div-and-mod (0) #f ()) (div0 variable div0 (0) #f ()) (mod0 variable mod0 (0) #f ()) (div0-and-mod0 variable div0-and-mod0 (0) #f ()) (exact-integer-sqrt variable exact-integer-sqrt (0) #f ()) (boolean=? variable boolean=? (0) #f ()) (symbol=? variable symbol=? (0) #f ()) (string-for-each variable string-for-each (0) #f ()) (vector-map variable vector-map (0) #f ()) (vector-for-each variable vector-for-each (0) #f ()) (error variable error (0) #f ()) (assertion-violation variable assertion-violation (0) #f ()) (call/cc variable call/cc (0) #f ()))) (quote (((core primitives) 1) ((core identifier-syntax) 1) ((core syntax-rules) 1) ((core let-values) 0) ((core quasiquote) 0) ((core derived) 0) ((core let) 0) ((core primitives) 0))) (quote (&build~1622177385~3 &build~1622177385~536 &build~1622177385~100 &build~1622177385~1381 &build~1622177385~1206 &build~1622177385~490 &build~1622177385~204 &build~1622177385~3)) (lambda () (ex:register-macro! (quote &assert~1622177385~1618) (lambda (&x~1622177385~1621) (let ((&input~1622177385~1623 &x~1622177385~1621)) (let ((&fail~1622177385~1624 (lambda () (ex:invalid-form &input~1622177385~1623)))) (if (pair? &input~1622177385~1623) (let ((&temp~1622177385~1632 (car &input~1622177385~1623))) (let ((&dummy~1622177385~1625 &temp~1622177385~1632)) (let ((&temp~1622177385~1629 (cdr &input~1622177385~1623))) (if (pair? &temp~1622177385~1629) (let ((&temp~1622177385~1631 (car &temp~1622177385~1629))) (let ((&expression~1622177385~1626 &temp~1622177385~1631)) (let ((&temp~1622177385~1630 (cdr &temp~1622177385~1629))) (if (null? &temp~1622177385~1630) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1622177385~1628)) 0 (quote (rnrs base))) (cons (cons (ex:syntax-rename (quote not) (quote ()) (quote (&env~1622177385~1628)) 0 (quote (rnrs base))) (cons &expression~1622177385~1626 (quote ()))) (cons (cons (ex:syntax-rename (quote assertion-violation) (quote ()) (quote (&env~1622177385~1628)) 0 (quote (rnrs base))) (cons (quote #f) (cons (quote "assertion failed") (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1622177385~1628)) 0 (quote (rnrs base))) (cons &expression~1622177385~1626 (quote ()))) (quote ()))))) (quote ())))) (&fail~1622177385~1624))))) (&fail~1622177385~1624))))) (&fail~1622177385~1624)))))) (values)) (lambda () (values)) (quote &build~1622177385~1633))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs)) (lambda () (quote ())) (quote ((begin macro begin (0 1) #f ()) (if macro if (0 1) #f ()) (lambda macro lambda (0 1) #f ()) (quote macro quote (0 1) #f ()) (set! macro set! (0 2 1) #f ()) (and macro and (0 1) #f ()) (or macro or (0 1) #f ()) (define macro define (0 1) #f ()) (define-syntax macro define-syntax (0 1) #f ()) (let-syntax macro let-syntax (0 1) #f ()) (letrec-syntax macro letrec-syntax (0 1) #f ()) (_ macro _ (0 1) #f ()) (... macro ... (0 1) #f ()) (let macro &let~1622177385~101 (0 1) #f (core let)) (let* macro &let*~1622177385~205 (0 1) #f (core derived)) (letrec macro &letrec~1622177385~149 (0 1) #f (core let)) (letrec* macro &letrec*~1622177385~180 (0 1) #f (core let)) (let-values macro &let-values~1622177385~1207 (0 1) #f (core let-values)) (let*-values macro &let*-values~1622177385~1347 (0 1) #f (core let-values)) (case macro &case~1622177385~402 (0 1) #f (core derived)) (cond macro &cond~1622177385~286 (0 1) #f (core derived)) (else macro &else~1622177385~486 (0 1) #f (core derived)) (=> macro &=>~1622177385~482 (0 1) #f (core derived)) (assert macro &assert~1622177385~1618 (0 1) #f (rnrs base)) (quasiquote macro &quasiquote~1622177385~764 (0 1) #f (core quasiquote)) (unquote macro &unquote~1622177385~1198 (0 1) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1622177385~1202 (0 1) #f (core quasiquote)) (syntax-rules macro &syntax-rules~1622177385~59 (0 1) #f (core syntax-rules)) (identifier-syntax macro &identifier-syntax~1622177385~491 (0 1) #f (core identifier-syntax)) (* variable * (0 1) #f ()) (+ variable + (0 1) #f ()) (- variable - (0 1) #f ()) (/ variable / (0 1) #f ()) (< variable < (0 1) #f ()) (<= variable <= (0 1) #f ()) (= variable = (0 1) #f ()) (> variable > (0 1) #f ()) (>= variable >= (0 1) #f ()) (abs variable abs (0 1) #f ()) (acos variable acos (0 1) #f ()) (append variable append (0 1) #f ()) (apply variable apply (0 1) #f ()) (asin variable asin (0 1) #f ()) (atan variable atan (0 1) #f ()) (boolean? variable boolean? (0 1) #f ()) (call-with-current-continuation variable call-with-current-continuation (0 1) #f ()) (call-with-values variable call-with-values (0 1) #f ()) (car variable car (0 1) #f ()) (cdr variable cdr (0 1) #f ()) (caar variable caar (0 1) #f ()) (cadr variable cadr (0 1) #f ()) (cdar variable cdar (0 1) #f ()) (cddr variable cddr (0 1) #f ()) (caaar variable caaar (0 1) #f ()) (caadr variable caadr (0 1) #f ()) (cadar variable cadar (0 1) #f ()) (caddr variable caddr (0 1) #f ()) (cdaar variable cdaar (0 1) #f ()) (cdadr variable cdadr (0 1) #f ()) (cddar variable cddar (0 1) #f ()) (cdddr variable cdddr (0 1) #f ()) (caaaar variable caaaar (0 1) #f ()) (caaadr variable caaadr (0 1) #f ()) (caadar variable caadar (0 1) #f ()) (caaddr variable caaddr (0 1) #f ()) (cadaar variable cadaar (0 1) #f ()) (cadadr variable cadadr (0 1) #f ()) (caddar variable caddar (0 1) #f ()) (cadddr variable cadddr (0 1) #f ()) (cdaaar variable cdaaar (0 1) #f ()) (cdaadr variable cdaadr (0 1) #f ()) (cdadar variable cdadar (0 1) #f ()) (cdaddr variable cdaddr (0 1) #f ()) (cddaar variable cddaar (0 1) #f ()) (cddadr variable cddadr (0 1) #f ()) (cdddar variable cdddar (0 1) #f ()) (cddddr variable cddddr (0 1) #f ()) (ceiling variable ceiling (0 1) #f ()) (char? variable char? (0 1) #f ()) (char->integer variable char->integer (0 1) #f ()) (complex? variable complex? (0 1) #f ()) (cons variable cons (0 1) #f ()) (cos variable cos (0 1) #f ()) (denominator variable denominator (0 1) #f ()) (dynamic-wind variable dynamic-wind (0 1) #f ()) (eq? variable eq? (0 1) #f ()) (equal? variable equal? (0 1) #f ()) (eqv? variable eqv? (0 1) #f ()) (even? variable even? (0 1) #f ()) (exact? variable exact? (0 1) #f ()) (exp variable exp (0 1) #f ()) (expt variable expt (0 1) #f ()) (floor variable floor (0 1) #f ()) (for-each variable for-each (0 1) #f ()) (gcd variable gcd (0 1) #f ()) (imag-part variable imag-part (0 1) #f ()) (inexact? variable inexact? (0 1) #f ()) (integer->char variable integer->char (0 1) #f ()) (integer? variable integer? (0 1) #f ()) (lcm variable lcm (0 1) #f ()) (length variable length (0 1) #f ()) (list variable list (0 1) #f ()) (list->string variable list->string (0 1) #f ()) (list->vector variable list->vector (0 1) #f ()) (list-ref variable list-ref (0 1) #f ()) (list-tail variable list-tail (0 1) #f ()) (list? variable list? (0 1) #f ()) (log variable log (0 1) #f ()) (magnitude variable magnitude (0 1) #f ()) (make-polar variable make-polar (0 1) #f ()) (make-rectangular variable make-rectangular (0 1) #f ()) (make-string variable make-string (0 1) #f ()) (make-vector variable make-vector (0 1) #f ()) (map variable map (0 1) #f ()) (max variable max (0 1) #f ()) (min variable min (0 1) #f ()) (negative? variable negative? (0 1) #f ()) (not variable not (0 1) #f ()) (null? variable null? (0 1) #f ()) (number->string variable number->string (0 1) #f ()) (number? variable number? (0 1) #f ()) (numerator variable numerator (0 1) #f ()) (odd? variable odd? (0 1) #f ()) (pair? variable pair? (0 1) #f ()) (positive? variable positive? (0 1) #f ()) (procedure? variable procedure? (0 1) #f ()) (rational? variable rational? (0 1) #f ()) (rationalize variable rationalize (0 1) #f ()) (real-part variable real-part (0 1) #f ()) (real? variable real? (0 1) #f ()) (reverse variable reverse (0 1) #f ()) (round variable round (0 1) #f ()) (sin variable sin (0 1) #f ()) (sqrt variable sqrt (0 1) #f ()) (string variable string (0 1) #f ()) (string->list variable string->list (0 1) #f ()) (string->number variable string->number (0 1) #f ()) (string->symbol variable string->symbol (0 1) #f ()) (string-append variable string-append (0 1) #f ()) (string-copy variable string-copy (0 1) #f ()) (string-length variable string-length (0 1) #f ()) (string-ref variable string-ref (0 1) #f ()) (string<=? variable string<=? (0 1) #f ()) (string<? variable string<? (0 1) #f ()) (string=? variable string=? (0 1) #f ()) (string>=? variable string>=? (0 1) #f ()) (string>? variable string>? (0 1) #f ()) (string? variable string? (0 1) #f ()) (substring variable substring (0 1) #f ()) (symbol->string variable symbol->string (0 1) #f ()) (symbol? variable symbol? (0 1) #f ()) (tan variable tan (0 1) #f ()) (truncate variable truncate (0 1) #f ()) (values variable values (0 1) #f ()) (vector variable vector (0 1) #f ()) (vector->list variable vector->list (0 1) #f ()) (vector-fill! variable vector-fill! (0 1) #f ()) (vector-length variable vector-length (0 1) #f ()) (vector-ref variable vector-ref (0 1) #f ()) (vector-set! variable vector-set! (0 1) #f ()) (vector? variable vector? (0 1) #f ()) (zero? variable zero? (0 1) #f ()) (real-valued? variable real-valued? (0 1) #f ()) (rational-valued? variable rational-valued? (0 1) #f ()) (integer-valued? variable integer-valued? (0 1) #f ()) (exact variable exact (0 1) #f ()) (inexact variable inexact (0 1) #f ()) (finite? variable finite? (0 1) #f ()) (infinite? variable infinite? (0 1) #f ()) (nan? variable nan? (0 1) #f ()) (div variable div (0 1) #f ()) (mod variable mod (0 1) #f ()) (div-and-mod variable div-and-mod (0 1) #f ()) (div0 variable div0 (0 1) #f ()) (mod0 variable mod0 (0 1) #f ()) (div0-and-mod0 variable div0-and-mod0 (0 1) #f ()) (exact-integer-sqrt variable exact-integer-sqrt (0 1) #f ()) (boolean=? variable boolean=? (0 1) #f ()) (symbol=? variable symbol=? (0 1) #f ()) (string-for-each variable string-for-each (0 1) #f ()) (vector-map variable vector-map (0 1) #f ()) (vector-for-each variable vector-for-each (0 1) #f ()) (error variable error (0 1) #f ()) (assertion-violation variable assertion-violation (0 1) #f ()) (call/cc variable call/cc (0 1) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0 1) #f ()) (identifier? variable ex:identifier? (0 1) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0 1) #f ()) (free-identifier=? variable ex:free-identifier=? (0 1) #f ()) (generate-temporaries variable ex:generate-temporaries (0 1) #f ()) (datum->syntax variable ex:datum->syntax (0 1) #f ()) (syntax->datum variable ex:syntax->datum (0 1) #f ()) (syntax-violation variable ex:syntax-violation (0 1) #f ()) (syntax macro syntax (0 1) #f ()) (syntax-case macro syntax-case (0 1) #f ()) (quasisyntax macro &quasisyntax~1622177385~537 (0 1) #f (core quasisyntax)) (unsyntax macro &unsyntax~1622177385~755 (0 1) #f (core quasisyntax)) (unsyntax-splicing macro &unsyntax-splicing~1622177385~759 (0 1) #f (core quasisyntax)) (with-syntax macro &with-syntax~1622177385~4 (0 1) #f (core with-syntax)) (when macro &when~1622177385~1382 (0 1) #f (rnrs control)) (unless macro &unless~1622177385~1401 (0 1) #f (rnrs control)) (do macro &do~1622177385~1420 (0 1) #f (rnrs control)) (case-lambda macro &case-lambda~1622177385~1480 (0 1) #f (rnrs control)) (find variable find (0 1) #f ()) (for-all variable for-all (0 1) #f ()) (exists variable exists (0 1) #f ()) (filter variable filter (0 1) #f ()) (partition variable partition (0 1) #f ()) (fold-left variable fold-left (0 1) #f ()) (fold-right variable fold-right (0 1) #f ()) (remp variable remp (0 1) #f ()) (remove variable remove (0 1) #f ()) (remq variable remq (0 1) #f ()) (remv variable remv (0 1) #f ()) (memp variable memp (0 1) #f ()) (member variable member (0 1) #f ()) (memv variable memv (0 1) #f ()) (memq variable memq (0 1) #f ()) (assp variable assp (0 1) #f ()) (assoc variable assoc (0 1) #f ()) (assv variable assv (0 1) #f ()) (assq variable assq (0 1) #f ()) (call-with-input-file variable call-with-input-file (0 1) #f ()) (call-with-output-file variable call-with-output-file (0 1) #f ()) (close-input-port variable close-input-port (0 1) #f ()) (close-output-port variable close-output-port (0 1) #f ()) (current-input-port variable current-input-port (0 1) #f ()) (current-output-port variable current-output-port (0 1) #f ()) (display variable display (0 1) #f ()) (eof-object? variable eof-object? (0 1) #f ()) (newline variable newline (0 1) #f ()) (open-input-file variable open-input-file (0 1) #f ()) (open-output-file variable open-output-file (0 1) #f ()) (peek-char variable peek-char (0 1) #f ()) (read variable read (0 1) #f ()) (read-char variable read-char (0 1) #f ()) (with-input-from-file variable with-input-from-file (0 1) #f ()) (with-output-to-file variable with-output-to-file (0 1) #f ()) (write variable write (0 1) #f ()) (write-char variable write-char (0 1) #f ()) (char-upcase variable char-upcase (0 1) #f ()) (char-downcase variable char-downcase (0 1) #f ()) (char-titlecase variable char-titlecase (0 1) #f ()) (char-foldcase variable char-foldcase (0 1) #f ()) (char-ci=? variable char-ci=? (0 1) #f ()) (char-ci<? variable char-ci<? (0 1) #f ()) (char-ci>? variable char-ci>? (0 1) #f ()) (char-ci<=? variable char-ci<=? (0 1) #f ()) (char-ci>=? variable char-ci>=? (0 1) #f ()) (char-alphabetic? variable char-alphabetic? (0 1) #f ()) (char-numeric? variable char-numeric? (0 1) #f ()) (char-whitespace? variable char-whitespace? (0 1) #f ()) (char-upper-case? variable char-upper-case? (0 1) #f ()) (char-lower-case? variable char-lower-case? (0 1) #f ()) (char-title-case? variable char-title-case? (0 1) #f ()) (char-general-category variable char-general-category (0 1) #f ()) (string-upcase variable string-upcase (0 1) #f ()) (string-downcase variable string-downcase (0 1) #f ()) (string-titlecase variable string-titlecase (0 1) #f ()) (string-foldcase variable string-foldcase (0 1) #f ()) (string-ci=? variable string-ci=? (0 1) #f ()) (string-ci<? variable string-ci<? (0 1) #f ()) (string-ci>? variable string-ci>? (0 1) #f ()) (string-ci<=? variable string-ci<=? (0 1) #f ()) (string-ci>=? variable string-ci>=? (0 1) #f ()) (string-normalize-nfd variable string-normalize-nfd (0 1) #f ()) (string-normalize-nfkd variable string-normalize-nfkd (0 1) #f ()) (string-normalize-nfc variable string-normalize-nfc (0 1) #f ()) (string-normalize-nfkc variable string-normalize-nfkc (0 1) #f ()) (list-sort variable list-sort (0 1) #f ()) (vector-sort variable vector-sort (0 1) #f ()) (vector-sort! variable vector-sort! (0 1) #f ()) (make-record-type-descriptor variable make-record-type-descriptor (0 1) #f ()) (record-type-descriptor? variable record-type-descriptor? (0 1) #f ()) (make-record-constructor-descriptor variable make-record-constructor-descriptor (0 1) #f ()) (record-constructor variable record-constructor (0 1) #f ()) (record-predicate variable record-predicate (0 1) #f ()) (record-accessor variable record-accessor (0 1) #f ()) (record-mutator variable record-mutator (0 1) #f ()) (record? variable record? (0 1) #f ()) (record-rtd variable record-rtd (0 1) #f ()) (record-type-name variable record-type-name (0 1) #f ()) (record-type-parent variable record-type-parent (0 1) #f ()) (record-type-uid variable record-type-uid (0 1) #f ()) (record-type-generative? variable record-type-generative? (0 1) #f ()) (record-type-sealed? variable record-type-sealed? (0 1) #f ()) (record-type-opaque? variable record-type-opaque? (0 1) #f ()) (record-type-field-names variable record-type-field-names (0 1) #f ()) (record-field-mutable? variable record-field-mutable? (0 1) #f ()) (fixnum? variable fixnum? (0 1) #f ()) (fixnum-width variable fixnum-width (0 1) #f ()) (least-fixnum variable least-fixnum (0 1) #f ()) (greatest-fixnum variable greatest-fixnum (0 1) #f ()) (fx=? variable fx=? (0 1) #f ()) (fx>? variable fx>? (0 1) #f ()) (fx<? variable fx<? (0 1) #f ()) (fx>=? variable fx>=? (0 1) #f ()) (fx<=? variable fx<=? (0 1) #f ()) (fxzero? variable fxzero? (0 1) #f ()) (fxpositive? variable fxpositive? (0 1) #f ()) (fxnegative? variable fxnegative? (0 1) #f ()) (fxodd? variable fxodd? (0 1) #f ()) (fxeven? variable fxeven? (0 1) #f ()) (fxmax variable fxmax (0 1) #f ()) (fxmin variable fxmin (0 1) #f ()) (fx+ variable fx+ (0 1) #f ()) (fx- variable fx- (0 1) #f ()) (fx* variable fx* (0 1) #f ()) (fxdiv-and-mod variable fxdiv-and-mod (0 1) #f ()) (fxdiv variable fxdiv (0 1) #f ()) (fxmod variable fxmod (0 1) #f ()) (fxdiv0-and-mod0 variable fxdiv0-and-mod0 (0 1) #f ()) (fxdiv0 variable fxdiv0 (0 1) #f ()) (fxmod0 variable fxmod0 (0 1) #f ()) (fx+/carry variable fx+/carry (0 1) #f ()) (fx-/carry variable fx-/carry (0 1) #f ()) (fx*/carry variable fx*/carry (0 1) #f ()) (fxnot variable fxnot (0 1) #f ()) (fxand variable fxand (0 1) #f ()) (fxior variable fxior (0 1) #f ()) (fxxor variable fxxor (0 1) #f ()) (fxif variable fxif (0 1) #f ()) (fxbit-count variable fxbit-count (0 1) #f ()) (fxlength variable fxlength (0 1) #f ()) (fxfirst-bit-set variable fxfirst-bit-set (0 1) #f ()) (fxbit-set? variable fxbit-set? (0 1) #f ()) (fxcopy-bit variable fxcopy-bit (0 1) #f ()) (fxbit-field variable fxbit-field (0 1) #f ()) (fxcopy-bit-field variable fxcopy-bit-field (0 1) #f ()) (fxrotate-bit-field variable fxrotate-bit-field (0 1) #f ()) (fxreverse-bit-field variable fxreverse-bit-field (0 1) #f ()) (fxarithmetic-shift variable fxarithmetic-shift (0 1) #f ()) (fxarithmetic-shift-left variable fxarithmetic-shift-left (0 1) #f ()) (fxarithmetic-shift-right variable fxarithmetic-shift-right (0 1) #f ()) (flonum? variable flonum? (0 1) #f ()) (real->flonum variable real->flonum (0 1) #f ()) (fl=? variable fl=? (0 1) #f ()) (fl<? variable fl<? (0 1) #f ()) (fl>? variable fl>? (0 1) #f ()) (fl<=? variable fl<=? (0 1) #f ()) (fl>=? variable fl>=? (0 1) #f ()) (flinteger? variable flinteger? (0 1) #f ()) (flzero? variable flzero? (0 1) #f ()) (flpositive? variable flpositive? (0 1) #f ()) (flnegative? variable flnegative? (0 1) #f ()) (flodd? variable flodd? (0 1) #f ()) (fleven? variable fleven? (0 1) #f ()) (flfinite? variable flfinite? (0 1) #f ()) (flinfinite? variable flinfinite? (0 1) #f ()) (flnan? variable flnan? (0 1) #f ()) (flmax variable flmax (0 1) #f ()) (flmin variable flmin (0 1) #f ()) (fl+ variable fl+ (0 1) #f ()) (fl* variable fl* (0 1) #f ()) (fl- variable fl- (0 1) #f ()) (fl/ variable fl/ (0 1) #f ()) (flabs variable flabs (0 1) #f ()) (fldiv-and-mod variable fldiv-and-mod (0 1) #f ()) (fldiv variable fldiv (0 1) #f ()) (flmod variable flmod (0 1) #f ()) (fldiv0-and-mod0 variable fldiv0-and-mod0 (0 1) #f ()) (fldiv0 variable fldiv0 (0 1) #f ()) (flmod0 variable flmod0 (0 1) #f ()) (flnumerator variable flnumerator (0 1) #f ()) (fldenominator variable fldenominator (0 1) #f ()) (flfloor variable flfloor (0 1) #f ()) (flceiling variable flceiling (0 1) #f ()) (fltruncate variable fltruncate (0 1) #f ()) (flround variable flround (0 1) #f ()) (flexp variable flexp (0 1) #f ()) (fllog variable fllog (0 1) #f ()) (flsin variable flsin (0 1) #f ()) (flcos variable flcos (0 1) #f ()) (fltan variable fltan (0 1) #f ()) (flasin variable flasin (0 1) #f ()) (flacos variable flacos (0 1) #f ()) (flatan variable flatan (0 1) #f ()) (flsqrt variable flsqrt (0 1) #f ()) (flexpt variable flexpt (0 1) #f ()) (fixnum->flonum variable fixnum->flonum (0 1) #f ()) (bitwise-not variable bitwise-not (0 1) #f ()) (bitwise-and variable bitwise-and (0 1) #f ()) (bitwise-ior variable bitwise-ior (0 1) #f ()) (bitwise-xor variable bitwise-xor (0 1) #f ()) (bitwise-if variable bitwise-if (0 1) #f ()) (bitwise-bit-count variable bitwise-bit-count (0 1) #f ()) (bitwise-length variable bitwise-length (0 1) #f ()) (bitwise-first-bit-set variable bitwise-first-bit-set (0 1) #f ()) (bitwise-bit-set? variable bitwise-bit-set? (0 1) #f ()) (bitwise-copy-bit variable bitwise-copy-bit (0 1) #f ()) (bitwise-bit-field variable bitwise-bit-field (0 1) #f ()) (bitwise-copy-bit-field variable bitwise-copy-bit-field (0 1) #f ()) (bitwise-rotate-bit-field variable bitwise-rotate-bit-field (0 1) #f ()) (bitwise-reverse-bit-field variable bitwise-reverse-bit-field (0 1) #f ()) (bitwise-arithmetic-shift variable bitwise-arithmetic-shift (0 1) #f ()) (bitwise-arithmetic-shift-left variable bitwise-arithmetic-shift-left (0 1) #f ()) (bitwise-arithmetic-shift-right variable bitwise-arithmetic-shift-right (0 1) #f ()) (file-exists? variable file-exists? (0 1) #f ()) (delete-file variable delete-file (0 1) #f ()))) (quote (((rnrs arithmetic bitwise) 0 1) ((rnrs arithmetic flonums) 0 1) ((rnrs arithmetic fixnums) 0 1) ((rnrs files) 0 1) ((rnrs records inspection) 0 1) ((rnrs records procedural) 0 1) ((rnrs sorting) 0 1) ((rnrs unicode) 0 1) ((rnrs io simple) 0 1) ((rnrs syntax-case) 0 1) ((rnrs lists) 0 1) ((rnrs control) 0 1) ((core identifier-syntax) 0 1) ((core syntax-rules) 0 1) ((rnrs base) 0 1) ((rnrs base) 0 1))) (quote (&build~1622177385~1615 &build~1622177385~1614 &build~1622177385~1613 &build~1622177385~1616 &build~1622177385~1612 &build~1622177385~1611 &build~1622177385~1610 &build~1622177385~1609 &build~1622177385~1608 &build~1622177385~1617 &build~1622177385~1607 &build~1622177385~1606 &build~1622177385~536 &build~1622177385~100 &build~1622177385~1633 &build~1622177385~1633)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1634))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs mutable-pairs)) (lambda () (quote ())) (quote ((set-car! variable set-car! (0) #f ()) (set-cdr! variable set-cdr! (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1635))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs mutable-strings)) (lambda () (quote ())) (quote ((string-set! variable string-set! (0) #f ()) (string-fill! variable string-fill! (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1636))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs eval)) (lambda () (quote ())) (quote ((eval variable ex:eval (0) #f ()) (environment variable ex:environment (0) #f ()))) (quote (((core primitives) 0))) (quote (&build~1622177385~3)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1637))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs eval reflection)) (lambda () (quote ())) (quote ((environment-bindings variable ex:environment-bindings (0) #f ()))) (quote (((core primitives) 0))) (quote (&build~1622177385~3)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1638))) (values))
(begin (define &make-promise~1622177385~1657 ex:unspecified) (define &force~1622177385~1641 ex:unspecified) (define &null-environment~1622177385~1640 ex:unspecified) (define &scheme-report-environment~1622177385~1639 ex:unspecified) (ex:register-library! (ex:make-library (quote (rnrs r5rs)) (lambda () (ex:uncompress (quote (((&env~1622177385~1652 0 1 2 3)) (3 (((make-promise) variable &make-promise~1622177385~1657 (0) #f (rnrs r5rs)) ((delay) macro &delay~1622177385~1642 (0) #f (rnrs r5rs)) ((force) variable &force~1622177385~1641 (0) #f (rnrs r5rs)) ((null-environment) variable &null-environment~1622177385~1640 (0) #f (rnrs r5rs)) ((scheme-report-environment) variable &scheme-report-environment~1622177385~1639 (0) #f (rnrs r5rs)) ((modulo) variable modulo (0) #f ()) ((remainder) variable remainder (0) #f ()) ((quotient) variable quotient (0) #f ()) ((inexact->exact) variable inexact->exact (0) #f ()) ((exact->inexact) variable exact->inexact (0) #f ()) ((environment) variable ex:environment (0) #f ()) ((eval) variable ex:eval (0) #f ()) ((call/cc) variable call/cc (0) #f ()) ((assertion-violation) variable assertion-violation (0) #f ()) ((error) variable error (0) #f ()) ((vector-for-each) variable vector-for-each (0) #f ()) ((vector-map) variable vector-map (0) #f ()) ((string-for-each) variable string-for-each (0) #f ()) ((symbol=?) variable symbol=? (0) #f ()) ((boolean=?) variable boolean=? (0) #f ()) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f ()) ((div0-and-mod0) variable div0-and-mod0 (0) #f ()) ((mod0) variable mod0 (0) #f ()) ((div0) variable div0 (0) #f ()) ((div-and-mod) variable div-and-mod (0) #f ()) ((mod) variable mod (0) #f ()) ((div) variable div (0) #f ()) ((nan?) variable nan? (0) #f ()) ((infinite?) variable infinite? (0) #f ()) ((finite?) variable finite? (0) #f ()) ((inexact) variable inexact (0) #f ()) ((exact) variable exact (0) #f ()) ((integer-valued?) variable integer-valued? (0) #f ()) ((rational-valued?) variable rational-valued? (0) #f ()) ((real-valued?) variable real-valued? (0) #f ()) ((zero?) variable zero? (0) #f ()) ((vector?) variable vector? (0) #f ()) ((vector-set!) variable vector-set! (0) #f ()) ((vector-ref) variable vector-ref (0) #f ()) ((vector-length) variable vector-length (0) #f ()) ((vector-fill!) variable vector-fill! (0) #f ()) ((vector->list) variable vector->list (0) #f ()) ((vector) variable vector (0) #f ()) ((values) variable values (0) #f ()) ((truncate) variable truncate (0) #f ()) ((tan) variable tan (0) #f ()) ((symbol?) variable symbol? (0) #f ()) ((symbol->string) variable symbol->string (0) #f ()) ((substring) variable substring (0) #f ()) ((string?) variable string? (0) #f ()) ((string>?) variable string>? (0) #f ()) ((string>=?) variable string>=? (0) #f ()) ((string=?) variable string=? (0) #f ()) ((string<?) variable string<? (0) #f ()) ((string<=?) variable string<=? (0) #f ()) ((string-ref) variable string-ref (0) #f ()) ((string-length) variable string-length (0) #f ()) ((string-copy) variable string-copy (0) #f ()) ((string-append) variable string-append (0) #f ()) ((string->symbol) variable string->symbol (0) #f ()) ((string->number) variable string->number (0) #f ()) ((string->list) variable string->list (0) #f ()) ((string) variable string (0) #f ()) ((sqrt) variable sqrt (0) #f ()) ((sin) variable sin (0) #f ()) ((round) variable round (0) #f ()) ((reverse) variable reverse (0) #f ()) ((real?) variable real? (0) #f ()) ((real-part) variable real-part (0) #f ()) ((rationalize) variable rationalize (0) #f ()) ((rational?) variable rational? (0) #f ()) ((procedure?) variable procedure? (0) #f ()) ((positive?) variable positive? (0) #f ()) ((pair?) variable pair? (0) #f ()) ((odd?) variable odd? (0) #f ()) ((numerator) variable numerator (0) #f ()) ((number?) variable number? (0) #f ()) ((number->string) variable number->string (0) #f ()) ((null?) variable null? (0) #f ()) ((not) variable not (0) #f ()) ((negative?) variable negative? (0) #f ()) ((min) variable min (0) #f ()) ((max) variable max (0) #f ()) ((map) variable map (0) #f ()) ((make-vector) variable make-vector (0) #f ()) ((make-string) variable make-string (0) #f ()) ((make-rectangular) variable make-rectangular (0) #f ()) ((make-polar) variable make-polar (0) #f ()) ((magnitude) variable magnitude (0) #f ()) ((log) variable log (0) #f ()) ((list?) variable list? (0) #f ()) ((list-tail) variable list-tail (0) #f ()) ((list-ref) variable list-ref (0) #f ()) ((list->vector) variable list->vector (0) #f ()) ((list->string) variable list->string (0) #f ()) ((list) variable list (0) #f ()) ((length) variable length (0) #f ()) ((lcm) variable lcm (0) #f ()) ((integer?) variable integer? (0) #f ()) ((integer->char) variable integer->char (0) #f ()) ((inexact?) variable inexact? (0) #f ()) ((imag-part) variable imag-part (0) #f ()) ((gcd) variable gcd (0) #f ()) ((for-each) variable for-each (0) #f ()) ((floor) variable floor (0) #f ()) ((expt) variable expt (0) #f ()) ((exp) variable exp (0) #f ()) ((exact?) variable exact? (0) #f ()) ((even?) variable even? (0) #f ()) ((eqv?) variable eqv? (0) #f ()) ((equal?) variable equal? (0) #f ()) ((eq?) variable eq? (0) #f ()) ((dynamic-wind) variable dynamic-wind (0) #f ()) ((denominator) variable denominator (0) #f ()) ((cos) variable cos (0) #f ()) ((cons) variable cons (0) #f ()) ((complex?) variable complex? (0) #f ()) ((char->integer) variable char->integer (0) #f ()) ((char?) variable char? (0) #f ()) ((ceiling) variable ceiling (0) #f ()) ((cddddr) variable cddddr (0) #f ()) ((cdddar) variable cdddar (0) #f ()) ((cddadr) variable cddadr (0) #f ()) ((cddaar) variable cddaar (0) #f ()) ((cdaddr) variable cdaddr (0) #f ()) ((cdadar) variable cdadar (0) #f ()) ((cdaadr) variable cdaadr (0) #f ()) ((cdaaar) variable cdaaar (0) #f ()) ((cadddr) variable cadddr (0) #f ()) ((caddar) variable caddar (0) #f ()) ((cadadr) variable cadadr (0) #f ()) ((cadaar) variable cadaar (0) #f ()) ((caaddr) variable caaddr (0) #f ()) ((caadar) variable caadar (0) #f ()) ((caaadr) variable caaadr (0) #f ()) ((caaaar) variable caaaar (0) #f ()) ((cdddr) variable cdddr (0) #f ()) ((cddar) variable cddar (0) #f ()) ((cdadr) variable cdadr (0) #f ()) ((cdaar) variable cdaar (0) #f ()) ((caddr) variable caddr (0) #f ()) ((cadar) variable cadar (0) #f ()) ((caadr) variable caadr (0) #f ()) ((caaar) variable caaar (0) #f ()) ((cddr) variable cddr (0) #f ()) ((cdar) variable cdar (0) #f ()) ((cadr) variable cadr (0) #f ()) ((caar) variable caar (0) #f ()) ((cdr) variable cdr (0) #f ()) ((car) variable car (0) #f ()) ((call-with-values) variable call-with-values (0) #f ()) ((call-with-current-continuation) variable call-with-current-continuation (0) #f ()) ((boolean?) variable boolean? (0) #f ()) ((atan) variable atan (0) #f ()) ((asin) variable asin (0) #f ()) ((apply) variable apply (0) #f ()) ((append) variable append (0) #f ()) ((acos) variable acos (0) #f ()) ((abs) variable abs (0) #f ()) ((>=) variable >= (0) #f ()) ((>) variable > (0) #f ()) ((=) variable = (0) #f ()) ((<=) variable <= (0) #f ()) ((<) variable < (0) #f ()) ((/) variable / (0) #f ()) ((-) variable - (0) #f ()) ((+) variable + (0) #f ()) ((*) variable * (0) #f ()) ((identifier-syntax) macro &identifier-syntax~1622177385~491 (1) #f (core identifier-syntax)) ((syntax-rules) macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) ((unquote-splicing) macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)) ((unquote) macro &unquote~1622177385~1198 (0) #f (core quasiquote)) ((quasiquote) macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) ((assert) macro &assert~1622177385~1618 (0) #f (rnrs base)) ((=>) macro &=>~1622177385~482 (0) #f (core derived)) ((else) macro &else~1622177385~486 (0) #f (core derived)) ((cond) macro &cond~1622177385~286 (0) #f (core derived)) ((case) macro &case~1622177385~402 (0) #f (core derived)) ((let*-values) macro &let*-values~1622177385~1347 (0) #f (core let-values)) ((let-values) macro &let-values~1622177385~1207 (0) #f (core let-values)) ((letrec*) macro &letrec*~1622177385~180 (0) #f (core let)) ((letrec) macro &letrec~1622177385~149 (0) #f (core let)) ((let*) macro &let*~1622177385~205 (0) #f (core derived)) ((let) macro &let~1622177385~101 (0) #f (core let)) ((...) macro ... (1) #f ()) ((_) macro _ (1) #f ()) ((letrec-syntax) macro letrec-syntax (0) #f ()) ((let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((case-lambda) macro &case-lambda~1622177385~1480 (0) #f (rnrs control)) ((do) macro &do~1622177385~1420 (0) #f (rnrs control)) ((unless) macro &unless~1622177385~1401 (0) #f (rnrs control)) ((when) macro &when~1622177385~1382 (0) #f (rnrs control)))) (2 (((x &c~1622177385~1643) variable &x~1622177385~1645 (0) #f (rnrs r5rs)))) (1 ()) (0 (((dummy &c~1622177385~1643) . #f) ((expression) . #f))))))) (quote ((null-environment variable &null-environment~1622177385~1640 (0) #f (rnrs r5rs)) (scheme-report-environment variable &scheme-report-environment~1622177385~1639 (0) #f (rnrs r5rs)) (delay macro &delay~1622177385~1642 (0) #f (rnrs r5rs)) (force variable &force~1622177385~1641 (0) #f (rnrs r5rs)) (exact->inexact variable exact->inexact (0) #f ()) (inexact->exact variable inexact->exact (0) #f ()) (quotient variable quotient (0) #f ()) (remainder variable remainder (0) #f ()) (modulo variable modulo (0) #f ()))) (quote (((rnrs control) 0) ((rnrs base) 0) ((rnrs eval) 0))) (quote (&build~1622177385~1606 &build~1622177385~1633 &build~1622177385~1637)) (lambda () (ex:register-macro! (quote &delay~1622177385~1642) (lambda (&x~1622177385~1645) (let ((&input~1622177385~1647 &x~1622177385~1645)) (let ((&fail~1622177385~1648 (lambda () (ex:invalid-form &input~1622177385~1647)))) (if (pair? &input~1622177385~1647) (let ((&temp~1622177385~1656 (car &input~1622177385~1647))) (let ((&dummy~1622177385~1649 &temp~1622177385~1656)) (let ((&temp~1622177385~1653 (cdr &input~1622177385~1647))) (if (pair? &temp~1622177385~1653) (let ((&temp~1622177385~1655 (car &temp~1622177385~1653))) (let ((&expression~1622177385~1650 &temp~1622177385~1655)) (let ((&temp~1622177385~1654 (cdr &temp~1622177385~1653))) (if (null? &temp~1622177385~1654) (cons (ex:syntax-rename (quote make-promise) (quote ()) (quote (&env~1622177385~1652)) 0 (quote (rnrs r5rs))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1652)) 0 (quote (rnrs r5rs))) (cons (quote ()) (cons &expression~1622177385~1650 (quote ())))) (quote ()))) (&fail~1622177385~1648))))) (&fail~1622177385~1648))))) (&fail~1622177385~1648)))))) (values)) (lambda () (set! &make-promise~1622177385~1657 ex:undefined) (set! &force~1622177385~1641 ex:undefined) (set! &null-environment~1622177385~1640 ex:undefined) (set! &scheme-report-environment~1622177385~1639 ex:undefined) (set! &scheme-report-environment~1622177385~1639 (lambda (&n~1622177385~1687) (if (not (= &n~1622177385~1687 5)) (begin (assertion-violation (quote scheme-report-environment) "Argument should be 5" &n~1622177385~1687))) (ex:environment (quote (r5rs))))) (set! &null-environment~1622177385~1640 ((lambda (&null-env~1622177385~1677) (lambda (&n~1622177385~1679) (if (not (= &n~1622177385~1679 5)) (begin (assertion-violation (quote scheme-report-environment) "Argument should be 5" &n~1622177385~1679))) &null-env~1622177385~1677)) (ex:environment (quote (only (rnrs base) begin if lambda quote set! and or define define-syntax let-syntax letrec-syntax let let* letrec case cond else => quasiquote unquote unquote-splicing syntax-rules ...)) (quote (only (rnrs control) do))))) (set! &force~1622177385~1641 (lambda (&object~1622177385~1674) (&object~1622177385~1674))) (set! &make-promise~1622177385~1657 (lambda (&proc~1622177385~1659) ((lambda (&result-ready?~1622177385~1662 &result~1622177385~1663) (lambda () (if &result-ready?~1622177385~1662 &result~1622177385~1663 ((lambda (&x~1622177385~1668) (if &result-ready?~1622177385~1662 &result~1622177385~1663 (begin (set! &result-ready?~1622177385~1662 #t) (set! &result~1622177385~1663 &x~1622177385~1668) &result~1622177385~1663))) (&proc~1622177385~1659))))) #f #f))) (values)) (quote &build~1622177385~1693))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs load)) (lambda () (quote ())) (quote ((load variable ex:load (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1694))) (values))
(begin (ex:register-library! (ex:make-library (quote (r5rs)) (lambda () (quote ())) (quote ((set! macro set! (0) #f ()) (begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (... macro ... (1) #f ()) (let macro &let~1622177385~101 (0) #f (core let)) (let* macro &let*~1622177385~205 (0) #f (core derived)) (letrec macro &letrec~1622177385~149 (0) #f (core let)) (case macro &case~1622177385~402 (0) #f (core derived)) (cond macro &cond~1622177385~286 (0) #f (core derived)) (else macro &else~1622177385~486 (0) #f (core derived)) (=> macro &=>~1622177385~482 (0) #f (core derived)) (quasiquote macro &quasiquote~1622177385~764 (0) #f (core quasiquote)) (unquote macro &unquote~1622177385~1198 (0) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1622177385~1202 (0) #f (core quasiquote)) (syntax-rules macro &syntax-rules~1622177385~59 (1) #f (core syntax-rules)) (* variable * (0) #f ()) (+ variable + (0) #f ()) (- variable - (0) #f ()) (/ variable / (0) #f ()) (< variable < (0) #f ()) (<= variable <= (0) #f ()) (= variable = (0) #f ()) (> variable > (0) #f ()) (>= variable >= (0) #f ()) (abs variable abs (0) #f ()) (acos variable acos (0) #f ()) (append variable append (0) #f ()) (apply variable apply (0) #f ()) (asin variable asin (0) #f ()) (atan variable atan (0) #f ()) (boolean? variable boolean? (0) #f ()) (call-with-current-continuation variable call-with-current-continuation (0) #f ()) (call-with-values variable call-with-values (0) #f ()) (car variable car (0) #f ()) (cdr variable cdr (0) #f ()) (caar variable caar (0) #f ()) (cadr variable cadr (0) #f ()) (cdar variable cdar (0) #f ()) (cddr variable cddr (0) #f ()) (caaar variable caaar (0) #f ()) (caadr variable caadr (0) #f ()) (cadar variable cadar (0) #f ()) (caddr variable caddr (0) #f ()) (cdaar variable cdaar (0) #f ()) (cdadr variable cdadr (0) #f ()) (cddar variable cddar (0) #f ()) (cdddr variable cdddr (0) #f ()) (caaaar variable caaaar (0) #f ()) (caaadr variable caaadr (0) #f ()) (caadar variable caadar (0) #f ()) (caaddr variable caaddr (0) #f ()) (cadaar variable cadaar (0) #f ()) (cadadr variable cadadr (0) #f ()) (caddar variable caddar (0) #f ()) (cadddr variable cadddr (0) #f ()) (cdaaar variable cdaaar (0) #f ()) (cdaadr variable cdaadr (0) #f ()) (cdadar variable cdadar (0) #f ()) (cdaddr variable cdaddr (0) #f ()) (cddaar variable cddaar (0) #f ()) (cddadr variable cddadr (0) #f ()) (cdddar variable cdddar (0) #f ()) (cddddr variable cddddr (0) #f ()) (ceiling variable ceiling (0) #f ()) (char? variable char? (0) #f ()) (char->integer variable char->integer (0) #f ()) (complex? variable complex? (0) #f ()) (cons variable cons (0) #f ()) (cos variable cos (0) #f ()) (denominator variable denominator (0) #f ()) (dynamic-wind variable dynamic-wind (0) #f ()) (eq? variable eq? (0) #f ()) (equal? variable equal? (0) #f ()) (eqv? variable eqv? (0) #f ()) (even? variable even? (0) #f ()) (exact? variable exact? (0) #f ()) (exp variable exp (0) #f ()) (expt variable expt (0) #f ()) (floor variable floor (0) #f ()) (for-each variable for-each (0) #f ()) (gcd variable gcd (0) #f ()) (imag-part variable imag-part (0) #f ()) (inexact? variable inexact? (0) #f ()) (integer->char variable integer->char (0) #f ()) (integer? variable integer? (0) #f ()) (lcm variable lcm (0) #f ()) (length variable length (0) #f ()) (list variable list (0) #f ()) (list->string variable list->string (0) #f ()) (list->vector variable list->vector (0) #f ()) (list-ref variable list-ref (0) #f ()) (list-tail variable list-tail (0) #f ()) (list? variable list? (0) #f ()) (log variable log (0) #f ()) (magnitude variable magnitude (0) #f ()) (make-polar variable make-polar (0) #f ()) (make-rectangular variable make-rectangular (0) #f ()) (make-string variable make-string (0) #f ()) (make-vector variable make-vector (0) #f ()) (map variable map (0) #f ()) (max variable max (0) #f ()) (min variable min (0) #f ()) (negative? variable negative? (0) #f ()) (not variable not (0) #f ()) (null? variable null? (0) #f ()) (number->string variable number->string (0) #f ()) (number? variable number? (0) #f ()) (numerator variable numerator (0) #f ()) (odd? variable odd? (0) #f ()) (pair? variable pair? (0) #f ()) (positive? variable positive? (0) #f ()) (procedure? variable procedure? (0) #f ()) (rational? variable rational? (0) #f ()) (rationalize variable rationalize (0) #f ()) (real-part variable real-part (0) #f ()) (real? variable real? (0) #f ()) (reverse variable reverse (0) #f ()) (round variable round (0) #f ()) (sin variable sin (0) #f ()) (sqrt variable sqrt (0) #f ()) (string variable string (0) #f ()) (string->list variable string->list (0) #f ()) (string->number variable string->number (0) #f ()) (string->symbol variable string->symbol (0) #f ()) (string-append variable string-append (0) #f ()) (string-copy variable string-copy (0) #f ()) (string-length variable string-length (0) #f ()) (string-ref variable string-ref (0) #f ()) (string<=? variable string<=? (0) #f ()) (string<? variable string<? (0) #f ()) (string=? variable string=? (0) #f ()) (string>=? variable string>=? (0) #f ()) (string>? variable string>? (0) #f ()) (string? variable string? (0) #f ()) (substring variable substring (0) #f ()) (symbol->string variable symbol->string (0) #f ()) (symbol? variable symbol? (0) #f ()) (tan variable tan (0) #f ()) (truncate variable truncate (0) #f ()) (values variable values (0) #f ()) (vector variable vector (0) #f ()) (vector->list variable vector->list (0) #f ()) (vector-fill! variable vector-fill! (0) #f ()) (vector-length variable vector-length (0) #f ()) (vector-ref variable vector-ref (0) #f ()) (vector-set! variable vector-set! (0) #f ()) (vector? variable vector? (0) #f ()) (zero? variable zero? (0) #f ()) (eval variable ex:eval (0) #f ()) (load variable ex:load (0) #f ()) (do macro &do~1622177385~1420 (0) #f (rnrs control)) (call-with-input-file variable call-with-input-file (0) #f ()) (call-with-output-file variable call-with-output-file (0) #f ()) (close-input-port variable close-input-port (0) #f ()) (close-output-port variable close-output-port (0) #f ()) (current-input-port variable current-input-port (0) #f ()) (current-output-port variable current-output-port (0) #f ()) (display variable display (0) #f ()) (eof-object? variable eof-object? (0) #f ()) (newline variable newline (0) #f ()) (open-input-file variable open-input-file (0) #f ()) (open-output-file variable open-output-file (0) #f ()) (peek-char variable peek-char (0) #f ()) (read variable read (0) #f ()) (read-char variable read-char (0) #f ()) (with-input-from-file variable with-input-from-file (0) #f ()) (with-output-to-file variable with-output-to-file (0) #f ()) (write variable write (0) #f ()) (write-char variable write-char (0) #f ()) (char-upcase variable char-upcase (0) #f ()) (char-downcase variable char-downcase (0) #f ()) (char-ci=? variable char-ci=? (0) #f ()) (char-ci<? variable char-ci<? (0) #f ()) (char-ci>? variable char-ci>? (0) #f ()) (char-ci<=? variable char-ci<=? (0) #f ()) (char-ci>=? variable char-ci>=? (0) #f ()) (char-alphabetic? variable char-alphabetic? (0) #f ()) (char-numeric? variable char-numeric? (0) #f ()) (char-whitespace? variable char-whitespace? (0) #f ()) (char-upper-case? variable char-upper-case? (0) #f ()) (char-lower-case? variable char-lower-case? (0) #f ()) (string-ci=? variable string-ci=? (0) #f ()) (string-ci<? variable string-ci<? (0) #f ()) (string-ci>? variable string-ci>? (0) #f ()) (string-ci<=? variable string-ci<=? (0) #f ()) (string-ci>=? variable string-ci>=? (0) #f ()) (set-car! variable set-car! (0) #f ()) (set-cdr! variable set-cdr! (0) #f ()) (assoc variable assoc (0) #f ()) (assv variable assv (0) #f ()) (assq variable assq (0) #f ()) (member variable member (0) #f ()) (memv variable memv (0) #f ()) (memq variable memq (0) #f ()) (string-set! variable string-set! (0) #f ()) (string-fill! variable string-fill! (0) #f ()) (null-environment variable &null-environment~1622177385~1640 (0) #f (rnrs r5rs)) (scheme-report-environment variable &scheme-report-environment~1622177385~1639 (0) #f (rnrs r5rs)) (delay macro &delay~1622177385~1642 (0) #f (rnrs r5rs)) (force variable &force~1622177385~1641 (0) #f (rnrs r5rs)) (exact->inexact variable exact->inexact (0) #f ()) (inexact->exact variable inexact->exact (0) #f ()) (quotient variable quotient (0) #f ()) (remainder variable remainder (0) #f ()) (modulo variable modulo (0) #f ()))) (quote (((rnrs r5rs) 0) ((rnrs mutable-strings) 0) ((rnrs lists) 0) ((rnrs mutable-pairs) 0) ((rnrs unicode) 0) ((rnrs io simple) 0) ((rnrs control) 0) ((rnrs load) 0) ((rnrs eval) 0) ((rnrs base) 0) ((core primitives) 0))) (quote (&build~1622177385~1693 &build~1622177385~1636 &build~1622177385~1607 &build~1622177385~1635 &build~1622177385~1609 &build~1622177385~1608 &build~1622177385~1606 &build~1622177385~1694 &build~1622177385~1637 &build~1622177385~1633 &build~1622177385~3)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1695))) (values))
(begin (ex:register-library! (ex:make-library (quote (explicit-renaming helper)) (lambda () (ex:uncompress (quote (((&env~1622177385~1705 0 1 2 3)) (3 (((er-transformer) macro &er-transformer~1622177385~1696 (0) #f (explicit-renaming helper)) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()))) (2 (((exp) variable &exp~1622177385~1698 (1) #f (explicit-renaming helper)))) (1 ()) (0 (((k) . #f) ((proc) . #f))))))) (quote ((er-transformer macro &er-transformer~1622177385~1696 (0) #f (explicit-renaming helper)))) (quote (((rnrs) 0))) (quote (&build~1622177385~1634)) (lambda () (ex:register-macro! (quote &er-transformer~1622177385~1696) (lambda (&exp~1622177385~1698) (let ((&input~1622177385~1700 &exp~1622177385~1698)) (let ((&fail~1622177385~1701 (lambda () (ex:invalid-form &input~1622177385~1700)))) (if (pair? &input~1622177385~1700) (let ((&temp~1622177385~1709 (car &input~1622177385~1700))) (let ((&k~1622177385~1702 &temp~1622177385~1709)) (let ((&temp~1622177385~1706 (cdr &input~1622177385~1700))) (if (pair? &temp~1622177385~1706) (let ((&temp~1622177385~1708 (car &temp~1622177385~1706))) (let ((&proc~1622177385~1703 &temp~1622177385~1708)) (let ((&temp~1622177385~1707 (cdr &temp~1622177385~1706))) (if (null? &temp~1622177385~1707) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote form) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (quote ())) (cons (cons &proc~1622177385~1703 (cons (ex:syntax-rename (quote form) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote symbol) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (quote ())) (cons (cons (ex:syntax-rename (quote datum->syntax) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (cons &k~1622177385~1702 (quote ()))) (cons (ex:syntax-rename (quote symbol) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (quote ())))) (quote ())))) (cons (ex:syntax-rename (quote free-identifier=?) (quote ()) (quote (&env~1622177385~1705)) 0 (quote (explicit-renaming helper))) (quote ()))))) (quote ())))) (&fail~1622177385~1701))))) (&fail~1622177385~1701))))) (&fail~1622177385~1701)))))) (values)) (lambda () (values)) (quote &build~1622177385~1710))) (values))
(begin (ex:register-library! (ex:make-library (quote (explicit-renaming)) (lambda () (quote ())) (quote ((er-transformer macro &er-transformer~1622177385~1696 (0) #f (explicit-renaming helper)) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()))) (quote (((rnrs syntax-case) 0) ((explicit-renaming helper) 0))) (quote (&build~1622177385~1617 &build~1622177385~1710)) (lambda () (values)) (lambda () (values)) (quote &build~1622177385~1711))) (values))
