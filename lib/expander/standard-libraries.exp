(begin (ex:register-library! (ex:make-library (quote (core primitives)) (lambda () (quote ())) (quote ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (0) #f ()) (... macro ... (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0) #f ()) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (free-identifier=? variable ex:free-identifier=? (0) #f ()) (generate-temporaries variable ex:generate-temporaries (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()) (syntax->datum variable ex:syntax->datum (0) #f ()) (syntax-violation variable ex:syntax-violation (0) #f ()) (environment variable ex:environment (0) #f ()) (environment-bindings variable ex:environment-bindings (0) #f ()) (eval variable ex:eval (0) #f ()) (undefined variable ex:undefined (0) #f ()))) (quote (((core primitive-macros) 0))) (quote (system)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~2))) (values))
(begin (ex:register-library! (ex:make-library (quote (core with-syntax)) (lambda () (ex:uncompress (quote (((&env~1623545778~50 0 1 2 3) (&env~1623545778~34 4 1 2 3) (&env~1623545778~16 5 1 2 3)) (5 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (4 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (3 (((with-syntax) macro &with-syntax~1623545778~3 (0) #f (core with-syntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((list) variable list (0) #f ()))) (2 (((x) variable &x~1623545778~5 (1) #f (core with-syntax)))) (1 ()) (0 (((e1) . #f) ((e2) . #f))))))) (quote ((with-syntax macro &with-syntax~1623545778~3 (0) #f (core with-syntax)))) (quote (((core primitives) 0 1))) (quote (&build~1623545778~2)) (lambda () (ex:register-macro! (quote &with-syntax~1623545778~3) (lambda (&x~1623545778~5) (let ((&input~1623545778~7 &x~1623545778~5)) (let ((&fail~1623545778~8 (lambda () (let ((&fail~1623545778~9 (lambda () (let ((&fail~1623545778~10 (lambda () (ex:invalid-form &input~1623545778~7)))) (if (pair? &input~1623545778~7) (let ((&temp~1623545778~28 (car &input~1623545778~7))) (let ((&temp~1623545778~17 (cdr &input~1623545778~7))) (if (pair? &temp~1623545778~17) (let ((&temp~1623545778~21 (car &temp~1623545778~17))) (ex:map-while (lambda (&temp~1623545778~21) (if (pair? &temp~1623545778~21) (let ((&temp~1623545778~27 (car &temp~1623545778~21))) (let ((&out~1623545778~11 &temp~1623545778~27)) (let ((&temp~1623545778~24 (cdr &temp~1623545778~21))) (if (pair? &temp~1623545778~24) (let ((&temp~1623545778~26 (car &temp~1623545778~24))) (let ((&in~1623545778~12 &temp~1623545778~26)) (let ((&temp~1623545778~25 (cdr &temp~1623545778~24))) (if (null? &temp~1623545778~25) (list &out~1623545778~11 &in~1623545778~12) #f)))) #f)))) #f)) &temp~1623545778~21 (lambda (&cols~1623545778~22 &rest~1623545778~23) (if (null? &rest~1623545778~23) (apply (lambda (&out~1623545778~11 &in~1623545778~12) (let ((&temp~1623545778~18 (cdr &temp~1623545778~17))) (if (pair? &temp~1623545778~18) (let ((&temp~1623545778~20 (car &temp~1623545778~18))) (let ((&e1~1623545778~13 &temp~1623545778~20)) (let ((&temp~1623545778~19 (cdr &temp~1623545778~18))) (if (list? &temp~1623545778~19) (let ((&e2~1623545778~14 &temp~1623545778~19)) (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1623545778~16)) 0 (quote (core with-syntax))) (cons (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1623545778~16)) 0 (quote (core with-syntax))) &in~1623545778~12) (cons (quote ()) (cons (cons &out~1623545778~11 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~16)) 0 (quote (core with-syntax))) (cons &e1~1623545778~13 &e2~1623545778~14)) (quote ()))) (quote ())))))) (&fail~1623545778~10))))) (&fail~1623545778~10)))) (if (null? &cols~1623545778~22) (quote (() ())) (apply map list &cols~1623545778~22))) (&fail~1623545778~10))))) (&fail~1623545778~10)))) (&fail~1623545778~10)))))) (if (pair? &input~1623545778~7) (let ((&temp~1623545778~46 (car &input~1623545778~7))) (let ((&temp~1623545778~35 (cdr &input~1623545778~7))) (if (pair? &temp~1623545778~35) (let ((&temp~1623545778~39 (car &temp~1623545778~35))) (if (pair? &temp~1623545778~39) (let ((&temp~1623545778~41 (car &temp~1623545778~39))) (if (pair? &temp~1623545778~41) (let ((&temp~1623545778~45 (car &temp~1623545778~41))) (let ((&out~1623545778~29 &temp~1623545778~45)) (let ((&temp~1623545778~42 (cdr &temp~1623545778~41))) (if (pair? &temp~1623545778~42) (let ((&temp~1623545778~44 (car &temp~1623545778~42))) (let ((&in~1623545778~30 &temp~1623545778~44)) (let ((&temp~1623545778~43 (cdr &temp~1623545778~42))) (if (null? &temp~1623545778~43) (let ((&temp~1623545778~40 (cdr &temp~1623545778~39))) (if (null? &temp~1623545778~40) (let ((&temp~1623545778~36 (cdr &temp~1623545778~35))) (if (pair? &temp~1623545778~36) (let ((&temp~1623545778~38 (car &temp~1623545778~36))) (let ((&e1~1623545778~31 &temp~1623545778~38)) (let ((&temp~1623545778~37 (cdr &temp~1623545778~36))) (if (list? &temp~1623545778~37) (let ((&e2~1623545778~32 &temp~1623545778~37)) (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1623545778~34)) 0 (quote (core with-syntax))) (cons &in~1623545778~30 (cons (quote ()) (cons (cons &out~1623545778~29 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~34)) 0 (quote (core with-syntax))) (cons &e1~1623545778~31 &e2~1623545778~32)) (quote ()))) (quote ())))))) (&fail~1623545778~9))))) (&fail~1623545778~9))) (&fail~1623545778~9))) (&fail~1623545778~9))))) (&fail~1623545778~9))))) (&fail~1623545778~9))) (&fail~1623545778~9))) (&fail~1623545778~9)))) (&fail~1623545778~9)))))) (if (pair? &input~1623545778~7) (let ((&temp~1623545778~56 (car &input~1623545778~7))) (let ((&temp~1623545778~51 (cdr &input~1623545778~7))) (if (pair? &temp~1623545778~51) (let ((&temp~1623545778~55 (car &temp~1623545778~51))) (if (null? &temp~1623545778~55) (let ((&temp~1623545778~52 (cdr &temp~1623545778~51))) (if (pair? &temp~1623545778~52) (let ((&temp~1623545778~54 (car &temp~1623545778~52))) (let ((&e1~1623545778~47 &temp~1623545778~54)) (let ((&temp~1623545778~53 (cdr &temp~1623545778~52))) (if (list? &temp~1623545778~53) (let ((&e2~1623545778~48 &temp~1623545778~53)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~50)) 0 (quote (core with-syntax))) (cons &e1~1623545778~47 &e2~1623545778~48))) (&fail~1623545778~8))))) (&fail~1623545778~8))) (&fail~1623545778~8))) (&fail~1623545778~8)))) (&fail~1623545778~8)))))) (values)) (lambda () (values)) (quote &build~1623545778~57))) (values))
(begin (ex:register-library! (ex:make-library (quote (core syntax-rules)) (lambda () (ex:uncompress (quote (((&env~1623545778~92 0 1 2 3 4 5) (&env~1623545778~76 6 7 3 4 5)) (7 (((k) . #f) ((cl) . #f))) (6 (((cl) . #f))) (5 (((syntax-rules) macro &syntax-rules~1623545778~58 (0) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro &with-syntax~1623545778~3 (1) #f (core with-syntax)) ((map) variable map (1) #f ()) ((for-all) variable for-all (1) #f ()))) (4 (((x) variable &x~1623545778~60 (1) #f (core syntax-rules)))) (3 (((clause) variable &clause~1623545778~61 (1) #f (core syntax-rules)))) (2 (((y) variable &y~1623545778~82 (1) #f (core syntax-rules)))) (1 ()) (0 (((keyword) . #f) ((pattern) . #f) ((template) . #f))))))) (quote ((syntax-rules macro &syntax-rules~1623545778~58 (0) #f (core syntax-rules)))) (quote (((core with-syntax) 1) ((core primitives) 1 0))) (quote (&build~1623545778~57 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &syntax-rules~1623545778~58) (lambda (&x~1623545778~60) ((lambda (&clause~1623545778~61) (set! &clause~1623545778~61 (lambda (&y~1623545778~82) (let ((&input~1623545778~84 &y~1623545778~82)) (let ((&fail~1623545778~85 (lambda () (let ((&fail~1623545778~86 (lambda () (ex:invalid-form &input~1623545778~84)))) (ex:syntax-violation (quote syntax-rules) "Invalid expression" &x~1623545778~60))))) (if (pair? &input~1623545778~84) (let ((&temp~1623545778~96 (car &input~1623545778~84))) (if (pair? &temp~1623545778~96) (let ((&temp~1623545778~98 (car &temp~1623545778~96))) (let ((&keyword~1623545778~88 &temp~1623545778~98)) (let ((&temp~1623545778~97 (cdr &temp~1623545778~96))) (let ((&pattern~1623545778~89 &temp~1623545778~97)) (let ((&temp~1623545778~93 (cdr &input~1623545778~84))) (if (pair? &temp~1623545778~93) (let ((&temp~1623545778~95 (car &temp~1623545778~93))) (let ((&template~1623545778~90 &temp~1623545778~95)) (let ((&temp~1623545778~94 (cdr &temp~1623545778~93))) (if (null? &temp~1623545778~94) (cons (cons (ex:syntax-rename (quote dummy) (quote ()) (quote (&env~1623545778~92)) 0 (quote (core syntax-rules))) &pattern~1623545778~89) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~92)) 0 (quote (core syntax-rules))) (cons &template~1623545778~90 (quote ()))) (quote ()))) (&fail~1623545778~85))))) (&fail~1623545778~85))))))) (&fail~1623545778~85))) (&fail~1623545778~85)))))) (let ((&input~1623545778~63 &x~1623545778~60)) (let ((&fail~1623545778~64 (lambda () (ex:invalid-form &input~1623545778~63)))) (if (pair? &input~1623545778~63) (let ((&temp~1623545778~80 (car &input~1623545778~63))) (let ((&temp~1623545778~77 (cdr &input~1623545778~63))) (if (pair? &temp~1623545778~77) (let ((&temp~1623545778~79 (car &temp~1623545778~77))) (if (list? &temp~1623545778~79) (let ((&k~1623545778~65 &temp~1623545778~79)) (let ((&temp~1623545778~78 (cdr &temp~1623545778~77))) (if (list? &temp~1623545778~78) (let ((&cl~1623545778~66 &temp~1623545778~78)) (if (for-all ex:identifier? &k~1623545778~65) (let ((&input~1623545778~70 (map &clause~1623545778~61 &cl~1623545778~66))) (let ((&fail~1623545778~72 (lambda () (ex:invalid-form &input~1623545778~70)))) (if (list? &input~1623545778~70) (let ((&cl~1623545778~73 &input~1623545778~70)) (begin (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~76)) 0 (quote (core syntax-rules))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~76)) 0 (quote (core syntax-rules))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1623545778~76)) 0 (quote (core syntax-rules))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~76)) 0 (quote (core syntax-rules))) (cons &k~1623545778~65 &cl~1623545778~73))) (quote ())))))) (&fail~1623545778~72)))) (&fail~1623545778~64))) (&fail~1623545778~64)))) (&fail~1623545778~64))) (&fail~1623545778~64)))) (&fail~1623545778~64))))) ex:undefined))) (values)) (lambda () (values)) (quote &build~1623545778~99))) (values))
(begin (ex:register-library! (ex:make-library (quote (core let)) (lambda () (ex:uncompress (quote (((&env~1623545778~190 0 1 2 3) (&env~1623545778~166 4 5 6 7 3) (&env~1623545778~135 8 9 10 3) (&env~1623545778~114 11 9 10 3)) (11 (((f) . #f) ((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (10 (((x) variable &x~1623545778~102 (1) #f (core let)))) (9 ()) (8 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (7 (((x) variable &x~1623545778~150 (1) #f (core let)))) (6 ()) (5 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (4 (((t) . #f))) (3 (((letrec*) macro &letrec*~1623545778~179 (0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0) #f (core let)) ((let) macro &let~1623545778~100 (0) #f (core let)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro &with-syntax~1623545778~3 (1) #f (core with-syntax)) ((for-all) variable for-all (1) #f ()))) (2 (((x) variable &x~1623545778~181 (1) #f (core let)))) (1 ()) (0 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))))))) (quote ((let macro &let~1623545778~100 (0) #f (core let)) (letrec macro &letrec~1623545778~148 (0) #f (core let)) (letrec* macro &letrec*~1623545778~179 (0) #f (core let)))) (quote (((core with-syntax) 1) ((core primitives) 1 0))) (quote (&build~1623545778~57 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &let~1623545778~100) (lambda (&x~1623545778~102) (let ((&input~1623545778~104 &x~1623545778~102)) (let ((&fail~1623545778~105 (lambda () (let ((&fail~1623545778~106 (lambda () (ex:invalid-form &input~1623545778~104)))) (if (pair? &input~1623545778~104) (let ((&temp~1623545778~128 (car &input~1623545778~104))) (let ((&temp~1623545778~115 (cdr &input~1623545778~104))) (if (pair? &temp~1623545778~115) (let ((&temp~1623545778~127 (car &temp~1623545778~115))) (let ((&f~1623545778~107 &temp~1623545778~127)) (let ((&temp~1623545778~116 (cdr &temp~1623545778~115))) (if (pair? &temp~1623545778~116) (let ((&temp~1623545778~120 (car &temp~1623545778~116))) (ex:map-while (lambda (&temp~1623545778~120) (if (pair? &temp~1623545778~120) (let ((&temp~1623545778~126 (car &temp~1623545778~120))) (let ((&x~1623545778~108 &temp~1623545778~126)) (let ((&temp~1623545778~123 (cdr &temp~1623545778~120))) (if (pair? &temp~1623545778~123) (let ((&temp~1623545778~125 (car &temp~1623545778~123))) (let ((&v~1623545778~109 &temp~1623545778~125)) (let ((&temp~1623545778~124 (cdr &temp~1623545778~123))) (if (null? &temp~1623545778~124) (list &x~1623545778~108 &v~1623545778~109) #f)))) #f)))) #f)) &temp~1623545778~120 (lambda (&cols~1623545778~121 &rest~1623545778~122) (if (null? &rest~1623545778~122) (apply (lambda (&x~1623545778~108 &v~1623545778~109) (let ((&temp~1623545778~117 (cdr &temp~1623545778~116))) (if (pair? &temp~1623545778~117) (let ((&temp~1623545778~119 (car &temp~1623545778~117))) (let ((&e1~1623545778~110 &temp~1623545778~119)) (let ((&temp~1623545778~118 (cdr &temp~1623545778~117))) (if (list? &temp~1623545778~118) (let ((&e2~1623545778~111 &temp~1623545778~118)) (if (for-all ex:identifier? (cons &f~1623545778~107 &x~1623545778~108)) (cons (cons (ex:syntax-rename (quote letrec) (quote ()) (quote (&env~1623545778~114)) 0 (quote (core let))) (cons (cons (cons &f~1623545778~107 (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~114)) 0 (quote (core let))) (cons &x~1623545778~108 (cons &e1~1623545778~110 &e2~1623545778~111))) (quote ()))) (quote ())) (cons &f~1623545778~107 (quote ())))) &v~1623545778~109) (&fail~1623545778~106))) (&fail~1623545778~106))))) (&fail~1623545778~106)))) (if (null? &cols~1623545778~121) (quote (() ())) (apply map list &cols~1623545778~121))) (&fail~1623545778~106))))) (&fail~1623545778~106))))) (&fail~1623545778~106)))) (&fail~1623545778~106)))))) (if (pair? &input~1623545778~104) (let ((&temp~1623545778~147 (car &input~1623545778~104))) (let ((&temp~1623545778~136 (cdr &input~1623545778~104))) (if (pair? &temp~1623545778~136) (let ((&temp~1623545778~140 (car &temp~1623545778~136))) (ex:map-while (lambda (&temp~1623545778~140) (if (pair? &temp~1623545778~140) (let ((&temp~1623545778~146 (car &temp~1623545778~140))) (let ((&x~1623545778~129 &temp~1623545778~146)) (let ((&temp~1623545778~143 (cdr &temp~1623545778~140))) (if (pair? &temp~1623545778~143) (let ((&temp~1623545778~145 (car &temp~1623545778~143))) (let ((&v~1623545778~130 &temp~1623545778~145)) (let ((&temp~1623545778~144 (cdr &temp~1623545778~143))) (if (null? &temp~1623545778~144) (list &x~1623545778~129 &v~1623545778~130) #f)))) #f)))) #f)) &temp~1623545778~140 (lambda (&cols~1623545778~141 &rest~1623545778~142) (if (null? &rest~1623545778~142) (apply (lambda (&x~1623545778~129 &v~1623545778~130) (let ((&temp~1623545778~137 (cdr &temp~1623545778~136))) (if (pair? &temp~1623545778~137) (let ((&temp~1623545778~139 (car &temp~1623545778~137))) (let ((&e1~1623545778~131 &temp~1623545778~139)) (let ((&temp~1623545778~138 (cdr &temp~1623545778~137))) (if (list? &temp~1623545778~138) (let ((&e2~1623545778~132 &temp~1623545778~138)) (if (for-all ex:identifier? &x~1623545778~129) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~135)) 0 (quote (core let))) (cons &x~1623545778~129 (cons &e1~1623545778~131 &e2~1623545778~132))) &v~1623545778~130) (&fail~1623545778~105))) (&fail~1623545778~105))))) (&fail~1623545778~105)))) (if (null? &cols~1623545778~141) (quote (() ())) (apply map list &cols~1623545778~141))) (&fail~1623545778~105))))) (&fail~1623545778~105)))) (&fail~1623545778~105)))))) (ex:register-macro! (quote &letrec~1623545778~148) (lambda (&x~1623545778~150) (let ((&input~1623545778~152 &x~1623545778~150)) (let ((&fail~1623545778~153 (lambda () (ex:invalid-form &input~1623545778~152)))) (if (pair? &input~1623545778~152) (let ((&temp~1623545778~178 (car &input~1623545778~152))) (let ((&temp~1623545778~167 (cdr &input~1623545778~152))) (if (pair? &temp~1623545778~167) (let ((&temp~1623545778~171 (car &temp~1623545778~167))) (ex:map-while (lambda (&temp~1623545778~171) (if (pair? &temp~1623545778~171) (let ((&temp~1623545778~177 (car &temp~1623545778~171))) (let ((&i~1623545778~154 &temp~1623545778~177)) (let ((&temp~1623545778~174 (cdr &temp~1623545778~171))) (if (pair? &temp~1623545778~174) (let ((&temp~1623545778~176 (car &temp~1623545778~174))) (let ((&v~1623545778~155 &temp~1623545778~176)) (let ((&temp~1623545778~175 (cdr &temp~1623545778~174))) (if (null? &temp~1623545778~175) (list &i~1623545778~154 &v~1623545778~155) #f)))) #f)))) #f)) &temp~1623545778~171 (lambda (&cols~1623545778~172 &rest~1623545778~173) (if (null? &rest~1623545778~173) (apply (lambda (&i~1623545778~154 &v~1623545778~155) (let ((&temp~1623545778~168 (cdr &temp~1623545778~167))) (if (pair? &temp~1623545778~168) (let ((&temp~1623545778~170 (car &temp~1623545778~168))) (let ((&e1~1623545778~156 &temp~1623545778~170)) (let ((&temp~1623545778~169 (cdr &temp~1623545778~168))) (if (list? &temp~1623545778~169) (let ((&e2~1623545778~157 &temp~1623545778~169)) (let ((&input~1623545778~160 (ex:generate-temporaries &i~1623545778~154))) (let ((&fail~1623545778~162 (lambda () (ex:invalid-form &input~1623545778~160)))) (if (list? &input~1623545778~160) (let ((&t~1623545778~163 &input~1623545778~160)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~166)) 0 (quote (core let))) (cons (map (lambda (&i~1623545778~154) (cons &i~1623545778~154 (cons (ex:syntax-rename (quote undefined) (quote ()) (quote (&env~1623545778~166)) 0 (quote (core let))) (quote ())))) &i~1623545778~154) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~166)) 0 (quote (core let))) (cons (if (= (length &t~1623545778~163) (length &v~1623545778~155)) (map (lambda (&t~1623545778~163 &v~1623545778~155) (cons &t~1623545778~163 (cons &v~1623545778~155 (quote ())))) &t~1623545778~163 &v~1623545778~155) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((t v) ...)) (list &t~1623545778~163 &v~1623545778~155))) (append (if (= (length &i~1623545778~154) (length &t~1623545778~163)) (map (lambda (&i~1623545778~154 &t~1623545778~163) (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1623545778~166)) 0 (quote (core let))) (cons &i~1623545778~154 (cons &t~1623545778~163 (quote ()))))) &i~1623545778~154 &t~1623545778~163) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((set! i t) ... (let () e1 e2 ...))) (list &i~1623545778~154 &t~1623545778~163))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~166)) 0 (quote (core let))) (cons (quote ()) (cons &e1~1623545778~156 &e2~1623545778~157))) (quote ()))))) (quote ())))))) (&fail~1623545778~162))))) (&fail~1623545778~153))))) (&fail~1623545778~153)))) (if (null? &cols~1623545778~172) (quote (() ())) (apply map list &cols~1623545778~172))) (&fail~1623545778~153))))) (&fail~1623545778~153)))) (&fail~1623545778~153)))))) (ex:register-macro! (quote &letrec*~1623545778~179) (lambda (&x~1623545778~181) (let ((&input~1623545778~183 &x~1623545778~181)) (let ((&fail~1623545778~184 (lambda () (ex:invalid-form &input~1623545778~183)))) (if (pair? &input~1623545778~183) (let ((&temp~1623545778~202 (car &input~1623545778~183))) (let ((&temp~1623545778~191 (cdr &input~1623545778~183))) (if (pair? &temp~1623545778~191) (let ((&temp~1623545778~195 (car &temp~1623545778~191))) (ex:map-while (lambda (&temp~1623545778~195) (if (pair? &temp~1623545778~195) (let ((&temp~1623545778~201 (car &temp~1623545778~195))) (let ((&i~1623545778~185 &temp~1623545778~201)) (let ((&temp~1623545778~198 (cdr &temp~1623545778~195))) (if (pair? &temp~1623545778~198) (let ((&temp~1623545778~200 (car &temp~1623545778~198))) (let ((&v~1623545778~186 &temp~1623545778~200)) (let ((&temp~1623545778~199 (cdr &temp~1623545778~198))) (if (null? &temp~1623545778~199) (list &i~1623545778~185 &v~1623545778~186) #f)))) #f)))) #f)) &temp~1623545778~195 (lambda (&cols~1623545778~196 &rest~1623545778~197) (if (null? &rest~1623545778~197) (apply (lambda (&i~1623545778~185 &v~1623545778~186) (let ((&temp~1623545778~192 (cdr &temp~1623545778~191))) (if (pair? &temp~1623545778~192) (let ((&temp~1623545778~194 (car &temp~1623545778~192))) (let ((&e1~1623545778~187 &temp~1623545778~194)) (let ((&temp~1623545778~193 (cdr &temp~1623545778~192))) (if (list? &temp~1623545778~193) (let ((&e2~1623545778~188 &temp~1623545778~193)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~190)) 0 (quote (core let))) (cons (quote ()) (append (if (= (length &i~1623545778~185) (length &v~1623545778~186)) (map (lambda (&i~1623545778~185 &v~1623545778~186) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~190)) 0 (quote (core let))) (cons &i~1623545778~185 (cons &v~1623545778~186 (quote ()))))) &i~1623545778~185 &v~1623545778~186) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((define i v) ... (let () e1 e2 ...))) (list &i~1623545778~185 &v~1623545778~186))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~190)) 0 (quote (core let))) (cons (quote ()) (cons &e1~1623545778~187 &e2~1623545778~188))) (quote ())))))) (&fail~1623545778~184))))) (&fail~1623545778~184)))) (if (null? &cols~1623545778~196) (quote (() ())) (apply map list &cols~1623545778~196))) (&fail~1623545778~184))))) (&fail~1623545778~184)))) (&fail~1623545778~184)))))) (values)) (lambda () (values)) (quote &build~1623545778~203))) (values))
(begin (ex:register-library! (ex:make-library (quote (core derived)) (lambda () (ex:uncompress (quote (((&env~1623545778~474 0 1 2 3 4) (&env~1623545778~463 5 6 7 8 9 10 1 2 3 4) (&env~1623545778~445 11 7 8 9 10 1 2 3 4) (&env~1623545778~437 12 7 8 9 10 1 2 3 4) (&env~1623545778~390 13 14 15 16 17 18 19 20 21 4) (&env~1623545778~384 22 14 15 16 17 18 19 20 21 4) (&env~1623545778~375 23 14 15 16 17 18 19 20 21 4) (&env~1623545778~367 24 14 15 16 17 18 19 20 21 4) (&env~1623545778~350 25 26 27 15 16 17 18 19 20 21 4) (&env~1623545778~341 28 26 27 15 16 17 18 19 20 21 4) (&env~1623545778~333 29 26 27 15 16 17 18 19 20 21 4) (&env~1623545778~278 30 31 32 4) (&env~1623545778~255 33 34 35 36 37 38 31 32 4) (&env~1623545778~245 39 40 34 35 36 37 38 31 32 4)) (40 (((x) . #f) ((v) . #f) ((rest) . #f))) (39 (((body) . #f))) (38 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (37 (((f) variable &f~1623545778~221 (1) #t (core derived)))) (36 ()) (35 (((bindings) variable &bindings~1623545778~229 (1) #f (core derived)))) (34 ()) (33 (((x) . #f) ((v) . #f))) (32 (((x) variable &x~1623545778~206 (1) #f (core derived)))) (31 ()) (30 (((e1) . #f) ((e2) . #f))) (29 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (28 (((e0) . #f) ((e1) . #f))) (27 (((c2) . #f) ((c3) . #f))) (26 (((rest) . #f))) (25 (((e0) . #f))) (24 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (23 (((e0) . #f) ((e1) . #f))) (22 (((e0) . #f))) (21 (((x) variable &x~1623545778~287 (1) #f (core derived)))) (20 ()) (19 (((c1) . #f) ((c2) . #f))) (18 (((f) variable &f~1623545778~298 (1) #t (core derived)))) (17 ()) (16 (((c1) variable &c1~1623545778~306 (1) #f (core derived)) ((c2*) variable &c2*~1623545778~307 (1) #f (core derived)))) (15 ()) (14 ()) (13 (((e1) . #f) ((e2) . #f))) (12 (((k) . #f) ((e1) . #f) ((e2) . #f))) (11 (((e1) . #f) ((e2) . #f))) (10 (((f) variable &f~1623545778~418 (1) #t (core derived)))) (9 ()) (8 (((c1) variable &c1~1623545778~426 (1) #f (core derived)) ((cmore) variable &cmore~1623545778~427 (1) #f (core derived)))) (7 ()) (6 (((rest) . #f))) (5 (((k) . #f) ((e1) . #f) ((e2) . #f))) (4 (((else) macro &else~1623545778~485 (0) #f (core derived)) ((=>) macro &=>~1623545778~481 (0) #f (core derived)) ((case) macro &case~1623545778~401 (0) #f (core derived)) ((cond) macro &cond~1623545778~285 (0) #f (core derived)) ((let*) macro &let*~1623545778~204 (0) #f (core derived)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro &letrec*~1623545778~179 (1 0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (1 0) #f (core let)) ((let) macro &let~1623545778~100 (1 0) #f (core let)) ((with-syntax) macro &with-syntax~1623545778~3 (1) #f (core with-syntax)) ((syntax-rules) macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) ((cdr) variable cdr (1 0) #f ()) ((car) variable car (1 0) #f ()) ((memv) variable memv (1 0) #f ()) ((null?) variable null? (1 0) #f ()) ((for-all) variable for-all (1 0) #f ()))) (3 (((x) variable &x~1623545778~403 (1) #f (core derived)))) (2 ()) (1 (((e) . #f) ((c1) . #f) ((c2) . #f))) (0 (((body) . #f))))))) (quote ((let* macro &let*~1623545778~204 (0) #f (core derived)) (cond macro &cond~1623545778~285 (0) #f (core derived)) (case macro &case~1623545778~401 (0) #f (core derived)) (else macro &else~1623545778~485 (0) #f (core derived)) (=> macro &=>~1623545778~481 (0) #f (core derived)))) (quote (((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0))) (quote (&build~1623545778~99 &build~1623545778~57 &build~1623545778~203 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &let*~1623545778~204) (lambda (&x~1623545778~206) (let ((&input~1623545778~208 &x~1623545778~206)) (let ((&fail~1623545778~209 (lambda () (let ((&fail~1623545778~210 (lambda () (ex:invalid-form &input~1623545778~208)))) (if (pair? &input~1623545778~208) (let ((&temp~1623545778~274 (car &input~1623545778~208))) (let ((&temp~1623545778~263 (cdr &input~1623545778~208))) (if (pair? &temp~1623545778~263) (let ((&temp~1623545778~267 (car &temp~1623545778~263))) (ex:map-while (lambda (&temp~1623545778~267) (if (pair? &temp~1623545778~267) (let ((&temp~1623545778~273 (car &temp~1623545778~267))) (let ((&x~1623545778~211 &temp~1623545778~273)) (let ((&temp~1623545778~270 (cdr &temp~1623545778~267))) (if (pair? &temp~1623545778~270) (let ((&temp~1623545778~272 (car &temp~1623545778~270))) (let ((&v~1623545778~212 &temp~1623545778~272)) (let ((&temp~1623545778~271 (cdr &temp~1623545778~270))) (if (null? &temp~1623545778~271) (list &x~1623545778~211 &v~1623545778~212) #f)))) #f)))) #f)) &temp~1623545778~267 (lambda (&cols~1623545778~268 &rest~1623545778~269) (if (null? &rest~1623545778~269) (apply (lambda (&x~1623545778~211 &v~1623545778~212) (let ((&temp~1623545778~264 (cdr &temp~1623545778~263))) (if (pair? &temp~1623545778~264) (let ((&temp~1623545778~266 (car &temp~1623545778~264))) (let ((&e1~1623545778~213 &temp~1623545778~266)) (let ((&temp~1623545778~265 (cdr &temp~1623545778~264))) (if (list? &temp~1623545778~265) (let ((&e2~1623545778~214 &temp~1623545778~265)) (if (for-all ex:identifier? &x~1623545778~211) (((lambda (&f~1623545778~221) ((lambda (&temp~1623545778~224) (set! &f~1623545778~221 &temp~1623545778~224) ((lambda () &f~1623545778~221))) (lambda (&bindings~1623545778~229) (let ((&input~1623545778~231 &bindings~1623545778~229)) (let ((&fail~1623545778~232 (lambda () (let ((&fail~1623545778~233 (lambda () (ex:invalid-form &input~1623545778~231)))) (if (pair? &input~1623545778~231) (let ((&temp~1623545778~247 (car &input~1623545778~231))) (if (pair? &temp~1623545778~247) (let ((&temp~1623545778~251 (car &temp~1623545778~247))) (let ((&x~1623545778~234 &temp~1623545778~251)) (let ((&temp~1623545778~248 (cdr &temp~1623545778~247))) (if (pair? &temp~1623545778~248) (let ((&temp~1623545778~250 (car &temp~1623545778~248))) (let ((&v~1623545778~235 &temp~1623545778~250)) (let ((&temp~1623545778~249 (cdr &temp~1623545778~248))) (if (null? &temp~1623545778~249) (let ((&temp~1623545778~246 (cdr &input~1623545778~231))) (let ((&rest~1623545778~236 &temp~1623545778~246)) (let ((&input~1623545778~239 (&f~1623545778~221 &rest~1623545778~236))) (let ((&fail~1623545778~241 (lambda () (ex:invalid-form &input~1623545778~239)))) (let ((&body~1623545778~242 &input~1623545778~239)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~245)) 0 (quote (core derived))) (cons (cons (cons &x~1623545778~234 (cons &v~1623545778~235 (quote ()))) (quote ())) (cons &body~1623545778~242 (quote ())))))))))) (&fail~1623545778~233))))) (&fail~1623545778~233))))) (&fail~1623545778~233))) (&fail~1623545778~233)))))) (if (pair? &input~1623545778~231) (let ((&temp~1623545778~257 (car &input~1623545778~231))) (if (pair? &temp~1623545778~257) (let ((&temp~1623545778~261 (car &temp~1623545778~257))) (let ((&x~1623545778~252 &temp~1623545778~261)) (let ((&temp~1623545778~258 (cdr &temp~1623545778~257))) (if (pair? &temp~1623545778~258) (let ((&temp~1623545778~260 (car &temp~1623545778~258))) (let ((&v~1623545778~253 &temp~1623545778~260)) (let ((&temp~1623545778~259 (cdr &temp~1623545778~258))) (if (null? &temp~1623545778~259) (let ((&temp~1623545778~256 (cdr &input~1623545778~231))) (if (null? &temp~1623545778~256) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~255)) 0 (quote (core derived))) (cons (cons (cons &x~1623545778~252 (cons &v~1623545778~253 (quote ()))) (quote ())) (cons &e1~1623545778~213 &e2~1623545778~214))) (&fail~1623545778~232))) (&fail~1623545778~232))))) (&fail~1623545778~232))))) (&fail~1623545778~232))) (&fail~1623545778~232))))))) ex:undefined) (if (= (length &x~1623545778~211) (length &v~1623545778~212)) (map (lambda (&x~1623545778~211 &v~1623545778~212) (cons &x~1623545778~211 (cons &v~1623545778~212 (quote ())))) &x~1623545778~211 &v~1623545778~212) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((x v) ...)) (list &x~1623545778~211 &v~1623545778~212)))) (&fail~1623545778~210))) (&fail~1623545778~210))))) (&fail~1623545778~210)))) (if (null? &cols~1623545778~268) (quote (() ())) (apply map list &cols~1623545778~268))) (&fail~1623545778~210))))) (&fail~1623545778~210)))) (&fail~1623545778~210)))))) (if (pair? &input~1623545778~208) (let ((&temp~1623545778~284 (car &input~1623545778~208))) (let ((&temp~1623545778~279 (cdr &input~1623545778~208))) (if (pair? &temp~1623545778~279) (let ((&temp~1623545778~283 (car &temp~1623545778~279))) (if (null? &temp~1623545778~283) (let ((&temp~1623545778~280 (cdr &temp~1623545778~279))) (if (pair? &temp~1623545778~280) (let ((&temp~1623545778~282 (car &temp~1623545778~280))) (let ((&e1~1623545778~275 &temp~1623545778~282)) (let ((&temp~1623545778~281 (cdr &temp~1623545778~280))) (if (list? &temp~1623545778~281) (let ((&e2~1623545778~276 &temp~1623545778~281)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~278)) 0 (quote (core derived))) (cons (quote ()) (cons &e1~1623545778~275 &e2~1623545778~276)))) (&fail~1623545778~209))))) (&fail~1623545778~209))) (&fail~1623545778~209))) (&fail~1623545778~209)))) (&fail~1623545778~209)))))) (ex:register-macro! (quote &cond~1623545778~285) (lambda (&x~1623545778~287) (let ((&input~1623545778~289 &x~1623545778~287)) (let ((&fail~1623545778~290 (lambda () (ex:invalid-form &input~1623545778~289)))) (if (pair? &input~1623545778~289) (let ((&temp~1623545778~400 (car &input~1623545778~289))) (let ((&temp~1623545778~397 (cdr &input~1623545778~289))) (if (pair? &temp~1623545778~397) (let ((&temp~1623545778~399 (car &temp~1623545778~397))) (let ((&c1~1623545778~291 &temp~1623545778~399)) (let ((&temp~1623545778~398 (cdr &temp~1623545778~397))) (if (list? &temp~1623545778~398) (let ((&c2~1623545778~292 &temp~1623545778~398)) (((lambda (&f~1623545778~298) ((lambda (&temp~1623545778~301) (set! &f~1623545778~298 &temp~1623545778~301) ((lambda () &f~1623545778~298))) (lambda (&c1~1623545778~306 &c2*~1623545778~307) (let ((&input~1623545778~309 &c2*~1623545778~307)) (let ((&fail~1623545778~310 (lambda () (let ((&fail~1623545778~311 (lambda () (ex:invalid-form &input~1623545778~309)))) (if (pair? &input~1623545778~309) (let ((&temp~1623545778~354 (car &input~1623545778~309))) (let ((&c2~1623545778~312 &temp~1623545778~354)) (let ((&temp~1623545778~353 (cdr &input~1623545778~309))) (if (list? &temp~1623545778~353) (let ((&c3~1623545778~313 &temp~1623545778~353)) (let ((&input~1623545778~316 (&f~1623545778~298 &c2~1623545778~312 &c3~1623545778~313))) (let ((&fail~1623545778~319 (lambda () (ex:invalid-form &input~1623545778~316)))) (let ((&rest~1623545778~320 &input~1623545778~316)) (begin (let ((&input~1623545778~323 &c1~1623545778~306)) (let ((&fail~1623545778~324 (lambda () (let ((&fail~1623545778~325 (lambda () (let ((&fail~1623545778~326 (lambda () (let ((&fail~1623545778~327 (lambda () (ex:invalid-form &input~1623545778~323)))) (ex:syntax-violation (quote cond) "Invalid expression" &x~1623545778~287))))) (if (pair? &input~1623545778~323) (let ((&temp~1623545778~337 (car &input~1623545778~323))) (let ((&e0~1623545778~329 &temp~1623545778~337)) (let ((&temp~1623545778~334 (cdr &input~1623545778~323))) (if (pair? &temp~1623545778~334) (let ((&temp~1623545778~336 (car &temp~1623545778~334))) (let ((&e1~1623545778~330 &temp~1623545778~336)) (let ((&temp~1623545778~335 (cdr &temp~1623545778~334))) (if (list? &temp~1623545778~335) (let ((&e2~1623545778~331 &temp~1623545778~335)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~333)) 0 (quote (core derived))) (cons &e0~1623545778~329 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~333)) 0 (quote (core derived))) (cons &e1~1623545778~330 &e2~1623545778~331)) (cons &rest~1623545778~320 (quote ())))))) (&fail~1623545778~326))))) (&fail~1623545778~326))))) (&fail~1623545778~326)))))) (if (pair? &input~1623545778~323) (let ((&temp~1623545778~347 (car &input~1623545778~323))) (let ((&e0~1623545778~338 &temp~1623545778~347)) (let ((&temp~1623545778~342 (cdr &input~1623545778~323))) (if (pair? &temp~1623545778~342) (let ((&temp~1623545778~346 (car &temp~1623545778~342))) (if (and (ex:identifier? &temp~1623545778~346) (ex:free-identifier=? &temp~1623545778~346 (ex:syntax-rename (quote =>) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))))) (let ((&temp~1623545778~343 (cdr &temp~1623545778~342))) (if (pair? &temp~1623545778~343) (let ((&temp~1623545778~345 (car &temp~1623545778~343))) (let ((&e1~1623545778~339 &temp~1623545778~345)) (let ((&temp~1623545778~344 (cdr &temp~1623545778~343))) (if (null? &temp~1623545778~344) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))) (cons &e0~1623545778~338 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))) (cons (cons &e1~1623545778~339 (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~341)) 0 (quote (core derived))) (quote ()))) (cons &rest~1623545778~320 (quote ()))))) (quote ())))) (&fail~1623545778~325))))) (&fail~1623545778~325))) (&fail~1623545778~325))) (&fail~1623545778~325))))) (&fail~1623545778~325)))))) (if (pair? &input~1623545778~323) (let ((&temp~1623545778~352 (car &input~1623545778~323))) (let ((&e0~1623545778~348 &temp~1623545778~352)) (let ((&temp~1623545778~351 (cdr &input~1623545778~323))) (if (null? &temp~1623545778~351) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~350)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~350)) 0 (quote (core derived))) (cons &e0~1623545778~348 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~350)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~350)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~350)) 0 (quote (core derived))) (cons &rest~1623545778~320 (quote ()))))) (quote ())))) (&fail~1623545778~324))))) (&fail~1623545778~324))))))))) (&fail~1623545778~311))))) (&fail~1623545778~311)))))) (if (null? &input~1623545778~309) (let ((&input~1623545778~356 &c1~1623545778~306)) (let ((&fail~1623545778~357 (lambda () (let ((&fail~1623545778~358 (lambda () (let ((&fail~1623545778~359 (lambda () (let ((&fail~1623545778~360 (lambda () (let ((&fail~1623545778~361 (lambda () (ex:invalid-form &input~1623545778~356)))) (ex:syntax-violation (quote cond) "Invalid expression" &x~1623545778~287))))) (if (pair? &input~1623545778~356) (let ((&temp~1623545778~371 (car &input~1623545778~356))) (let ((&e0~1623545778~363 &temp~1623545778~371)) (let ((&temp~1623545778~368 (cdr &input~1623545778~356))) (if (pair? &temp~1623545778~368) (let ((&temp~1623545778~370 (car &temp~1623545778~368))) (let ((&e1~1623545778~364 &temp~1623545778~370)) (let ((&temp~1623545778~369 (cdr &temp~1623545778~368))) (if (list? &temp~1623545778~369) (let ((&e2~1623545778~365 &temp~1623545778~369)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~367)) 0 (quote (core derived))) (cons &e0~1623545778~363 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~367)) 0 (quote (core derived))) (cons &e1~1623545778~364 &e2~1623545778~365)) (quote ()))))) (&fail~1623545778~360))))) (&fail~1623545778~360))))) (&fail~1623545778~360)))))) (if (pair? &input~1623545778~356) (let ((&temp~1623545778~381 (car &input~1623545778~356))) (let ((&e0~1623545778~372 &temp~1623545778~381)) (let ((&temp~1623545778~376 (cdr &input~1623545778~356))) (if (pair? &temp~1623545778~376) (let ((&temp~1623545778~380 (car &temp~1623545778~376))) (if (and (ex:identifier? &temp~1623545778~380) (ex:free-identifier=? &temp~1623545778~380 (ex:syntax-rename (quote =>) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))))) (let ((&temp~1623545778~377 (cdr &temp~1623545778~376))) (if (pair? &temp~1623545778~377) (let ((&temp~1623545778~379 (car &temp~1623545778~377))) (let ((&e1~1623545778~373 &temp~1623545778~379)) (let ((&temp~1623545778~378 (cdr &temp~1623545778~377))) (if (null? &temp~1623545778~378) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))) (cons &e0~1623545778~372 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))) (cons (cons &e1~1623545778~373 (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~375)) 0 (quote (core derived))) (quote ()))) (quote ())))) (quote ())))) (&fail~1623545778~359))))) (&fail~1623545778~359))) (&fail~1623545778~359))) (&fail~1623545778~359))))) (&fail~1623545778~359)))))) (if (pair? &input~1623545778~356) (let ((&temp~1623545778~386 (car &input~1623545778~356))) (let ((&e0~1623545778~382 &temp~1623545778~386)) (let ((&temp~1623545778~385 (cdr &input~1623545778~356))) (if (null? &temp~1623545778~385) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~384)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~384)) 0 (quote (core derived))) (cons &e0~1623545778~382 (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~384)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~384)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~384)) 0 (quote (core derived))) (quote ())))) (quote ())))) (&fail~1623545778~358))))) (&fail~1623545778~358)))))) (if (pair? &input~1623545778~356) (let ((&temp~1623545778~394 (car &input~1623545778~356))) (if (and (ex:identifier? &temp~1623545778~394) (ex:free-identifier=? &temp~1623545778~394 (ex:syntax-rename (quote else) (quote ()) (quote (&env~1623545778~390)) 0 (quote (core derived))))) (let ((&temp~1623545778~391 (cdr &input~1623545778~356))) (if (pair? &temp~1623545778~391) (let ((&temp~1623545778~393 (car &temp~1623545778~391))) (let ((&e1~1623545778~387 &temp~1623545778~393)) (let ((&temp~1623545778~392 (cdr &temp~1623545778~391))) (if (list? &temp~1623545778~392) (let ((&e2~1623545778~388 &temp~1623545778~392)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~390)) 0 (quote (core derived))) (cons &e1~1623545778~387 &e2~1623545778~388))) (&fail~1623545778~357))))) (&fail~1623545778~357))) (&fail~1623545778~357))) (&fail~1623545778~357)))) (&fail~1623545778~310))))))) ex:undefined) &c1~1623545778~291 &c2~1623545778~292)) (&fail~1623545778~290))))) (&fail~1623545778~290)))) (&fail~1623545778~290)))))) (ex:register-macro! (quote &case~1623545778~401) (lambda (&x~1623545778~403) (let ((&input~1623545778~405 &x~1623545778~403)) (let ((&fail~1623545778~406 (lambda () (ex:invalid-form &input~1623545778~405)))) (if (pair? &input~1623545778~405) (let ((&temp~1623545778~480 (car &input~1623545778~405))) (let ((&temp~1623545778~475 (cdr &input~1623545778~405))) (if (pair? &temp~1623545778~475) (let ((&temp~1623545778~479 (car &temp~1623545778~475))) (let ((&e~1623545778~407 &temp~1623545778~479)) (let ((&temp~1623545778~476 (cdr &temp~1623545778~475))) (if (pair? &temp~1623545778~476) (let ((&temp~1623545778~478 (car &temp~1623545778~476))) (let ((&c1~1623545778~408 &temp~1623545778~478)) (let ((&temp~1623545778~477 (cdr &temp~1623545778~476))) (if (list? &temp~1623545778~477) (let ((&c2~1623545778~409 &temp~1623545778~477)) (let ((&input~1623545778~412 (((lambda (&f~1623545778~418) ((lambda (&temp~1623545778~421) (set! &f~1623545778~418 &temp~1623545778~421) ((lambda () &f~1623545778~418))) (lambda (&c1~1623545778~426 &cmore~1623545778~427) (if (null? &cmore~1623545778~427) (let ((&input~1623545778~430 &c1~1623545778~426)) (let ((&fail~1623545778~431 (lambda () (let ((&fail~1623545778~432 (lambda () (ex:invalid-form &input~1623545778~430)))) (if (pair? &input~1623545778~430) (let ((&temp~1623545778~441 (car &input~1623545778~430))) (if (list? &temp~1623545778~441) (let ((&k~1623545778~433 &temp~1623545778~441)) (let ((&temp~1623545778~438 (cdr &input~1623545778~430))) (if (pair? &temp~1623545778~438) (let ((&temp~1623545778~440 (car &temp~1623545778~438))) (let ((&e1~1623545778~434 &temp~1623545778~440)) (let ((&temp~1623545778~439 (cdr &temp~1623545778~438))) (if (list? &temp~1623545778~439) (let ((&e2~1623545778~435 &temp~1623545778~439)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~437)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote memv) (quote ()) (quote (&env~1623545778~437)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~437)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1623545778~437)) 0 (quote (core derived))) (cons &k~1623545778~433 (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~437)) 0 (quote (core derived))) (cons &e1~1623545778~434 &e2~1623545778~435)) (quote ()))))) (&fail~1623545778~432))))) (&fail~1623545778~432)))) (&fail~1623545778~432))) (&fail~1623545778~432)))))) (if (pair? &input~1623545778~430) (let ((&temp~1623545778~449 (car &input~1623545778~430))) (if (and (ex:identifier? &temp~1623545778~449) (ex:free-identifier=? &temp~1623545778~449 (ex:syntax-rename (quote else) (quote ()) (quote (&env~1623545778~445)) 0 (quote (core derived))))) (let ((&temp~1623545778~446 (cdr &input~1623545778~430))) (if (pair? &temp~1623545778~446) (let ((&temp~1623545778~448 (car &temp~1623545778~446))) (let ((&e1~1623545778~442 &temp~1623545778~448)) (let ((&temp~1623545778~447 (cdr &temp~1623545778~446))) (if (list? &temp~1623545778~447) (let ((&e2~1623545778~443 &temp~1623545778~447)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~445)) 0 (quote (core derived))) (cons &e1~1623545778~442 &e2~1623545778~443))) (&fail~1623545778~431))))) (&fail~1623545778~431))) (&fail~1623545778~431))) (&fail~1623545778~431)))) (let ((&input~1623545778~452 (&f~1623545778~418 (car &cmore~1623545778~427) (cdr &cmore~1623545778~427)))) (let ((&fail~1623545778~453 (lambda () (ex:invalid-form &input~1623545778~452)))) (let ((&rest~1623545778~454 &input~1623545778~452)) (begin (let ((&input~1623545778~457 &c1~1623545778~426)) (let ((&fail~1623545778~458 (lambda () (ex:invalid-form &input~1623545778~457)))) (if (pair? &input~1623545778~457) (let ((&temp~1623545778~467 (car &input~1623545778~457))) (if (list? &temp~1623545778~467) (let ((&k~1623545778~459 &temp~1623545778~467)) (let ((&temp~1623545778~464 (cdr &input~1623545778~457))) (if (pair? &temp~1623545778~464) (let ((&temp~1623545778~466 (car &temp~1623545778~464))) (let ((&e1~1623545778~460 &temp~1623545778~466)) (let ((&temp~1623545778~465 (cdr &temp~1623545778~464))) (if (list? &temp~1623545778~465) (let ((&e2~1623545778~461 &temp~1623545778~465)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~463)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote memv) (quote ()) (quote (&env~1623545778~463)) 0 (quote (core derived))) (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~463)) 0 (quote (core derived))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1623545778~463)) 0 (quote (core derived))) (cons &k~1623545778~459 (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~463)) 0 (quote (core derived))) (cons &e1~1623545778~460 &e2~1623545778~461)) (cons &rest~1623545778~454 (quote ())))))) (&fail~1623545778~458))))) (&fail~1623545778~458)))) (&fail~1623545778~458))) (&fail~1623545778~458)))))))))))) ex:undefined) &c1~1623545778~408 &c2~1623545778~409))) (let ((&fail~1623545778~470 (lambda () (ex:invalid-form &input~1623545778~412)))) (let ((&body~1623545778~471 &input~1623545778~412)) (begin (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~474)) 0 (quote (core derived))) (cons (cons (cons (ex:syntax-rename (quote t) (quote ()) (quote (&env~1623545778~474)) 0 (quote (core derived))) (cons &e~1623545778~407 (quote ()))) (quote ())) (cons &body~1623545778~471 (quote ()))))))))) (&fail~1623545778~406))))) (&fail~1623545778~406))))) (&fail~1623545778~406)))) (&fail~1623545778~406)))))) (ex:register-macro! (quote &=>~1623545778~481) (lambda (&x~1623545778~483) (ex:syntax-violation (quote =>) "Invalid expression" &x~1623545778~483))) (ex:register-macro! (quote &else~1623545778~485) (lambda (&x~1623545778~487) (ex:syntax-violation (quote else) "Invalid expression" &x~1623545778~487))) (values)) (lambda () (values)) (quote &build~1623545778~489))) (values))
(begin (ex:register-library! (ex:make-library (quote (core identifier-syntax)) (lambda () (ex:uncompress (quote (((&env~1623545778~530 0 1 2 3) (&env~1623545778~507 4 1 2 3)) (4 (((id) . #f) ((exp1) . #f) ((var) . #f) ((val) . #f) ((exp2) . #f))) (3 (((identifier-syntax) macro &identifier-syntax~1623545778~490 (0) #f (core identifier-syntax)) ((undefined) variable ex:undefined (1 0 -1) #f ()) ((eval) variable ex:eval (1 0 -1) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0 -1) #f ()) ((environment) variable ex:environment (1 0 -1) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0 -1) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0 -1) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0 -1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0 -1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0 -1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0 -1) #f ()) ((identifier?) variable ex:identifier? (1 0 -1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0 -1) #f ()) ((syntax-case) macro syntax-case (1 0 -1) #f ()) ((syntax) macro syntax (1 0 -1) #f ()) ((...) macro ... (1 0 -1) #f ()) ((_) macro _ (1 0 -1) #f ()) ((letrec-syntax) macro letrec-syntax (1 0 -1) #f ()) ((let-syntax) macro let-syntax (1 0 -1) #f ()) ((define-syntax) macro define-syntax (1 0 -1) #f ()) ((define) macro define (1 0 -1) #f ()) ((or) macro or (1 0 -1) #f ()) ((and) macro and (1 0 -1) #f ()) ((set!) macro set! (1 0 -1) #f ()) ((quote) macro quote (1 0 -1) #f ()) ((lambda) macro lambda (1 0 -1) #f ()) ((if) macro if (1 0 -1) #f ()) ((begin) macro begin (1 0 -1) #f ()))) (2 (((x) variable &x~1623545778~492 (1) #f (core identifier-syntax)))) (1 ()) (0 (((e) . #f))))))) (quote ((identifier-syntax macro &identifier-syntax~1623545778~490 (0) #f (core identifier-syntax)))) (quote (((core primitives) 1 0 -1))) (quote (&build~1623545778~2)) (lambda () (ex:register-macro! (quote &identifier-syntax~1623545778~490) (lambda (&x~1623545778~492) (let ((&input~1623545778~494 &x~1623545778~492)) (let ((&fail~1623545778~495 (lambda () (let ((&fail~1623545778~496 (lambda () (ex:invalid-form &input~1623545778~494)))) (if (pair? &input~1623545778~494) (let ((&temp~1623545778~527 (car &input~1623545778~494))) (let ((&temp~1623545778~508 (cdr &input~1623545778~494))) (if (pair? &temp~1623545778~508) (let ((&temp~1623545778~522 (car &temp~1623545778~508))) (if (pair? &temp~1623545778~522) (let ((&temp~1623545778~526 (car &temp~1623545778~522))) (let ((&id~1623545778~497 &temp~1623545778~526)) (let ((&temp~1623545778~523 (cdr &temp~1623545778~522))) (if (pair? &temp~1623545778~523) (let ((&temp~1623545778~525 (car &temp~1623545778~523))) (let ((&exp1~1623545778~498 &temp~1623545778~525)) (let ((&temp~1623545778~524 (cdr &temp~1623545778~523))) (if (null? &temp~1623545778~524) (let ((&temp~1623545778~509 (cdr &temp~1623545778~508))) (if (pair? &temp~1623545778~509) (let ((&temp~1623545778~511 (car &temp~1623545778~509))) (if (pair? &temp~1623545778~511) (let ((&temp~1623545778~515 (car &temp~1623545778~511))) (if (pair? &temp~1623545778~515) (let ((&temp~1623545778~521 (car &temp~1623545778~515))) (if (and (ex:identifier? &temp~1623545778~521) (ex:free-identifier=? &temp~1623545778~521 (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))))) (let ((&temp~1623545778~516 (cdr &temp~1623545778~515))) (if (pair? &temp~1623545778~516) (let ((&temp~1623545778~520 (car &temp~1623545778~516))) (let ((&var~1623545778~499 &temp~1623545778~520)) (let ((&temp~1623545778~517 (cdr &temp~1623545778~516))) (if (pair? &temp~1623545778~517) (let ((&temp~1623545778~519 (car &temp~1623545778~517))) (let ((&val~1623545778~500 &temp~1623545778~519)) (let ((&temp~1623545778~518 (cdr &temp~1623545778~517))) (if (null? &temp~1623545778~518) (let ((&temp~1623545778~512 (cdr &temp~1623545778~511))) (if (pair? &temp~1623545778~512) (let ((&temp~1623545778~514 (car &temp~1623545778~512))) (let ((&exp2~1623545778~501 &temp~1623545778~514)) (let ((&temp~1623545778~513 (cdr &temp~1623545778~512))) (if (null? &temp~1623545778~513) (let ((&temp~1623545778~510 (cdr &temp~1623545778~509))) (if (null? &temp~1623545778~510) (if (if (ex:identifier? &id~1623545778~497) (ex:identifier? &var~1623545778~499) #f) (cons (ex:syntax-rename (quote make-variable-transformer) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons &var~1623545778~499 (cons &val~1623545778~500 (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons &exp2~1623545778~501 (quote ()))) (quote ()))) (cons (cons (cons &id~1623545778~497 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (cons &exp1~1623545778~498 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (quote ())))) (quote ()))) (quote ()))) (cons (cons &id~1623545778~497 (cons (cons (ex:syntax-rename (quote identifier?) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons &id~1623545778~497 (quote ()))) (quote ()))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~507)) 0 (quote (core identifier-syntax))) (cons &exp1~1623545778~498 (quote ()))) (quote ())))) (quote ()))))))) (quote ())))) (quote ()))) (&fail~1623545778~496)) (&fail~1623545778~496))) (&fail~1623545778~496))))) (&fail~1623545778~496))) (&fail~1623545778~496))))) (&fail~1623545778~496))))) (&fail~1623545778~496))) (&fail~1623545778~496))) (&fail~1623545778~496))) (&fail~1623545778~496))) (&fail~1623545778~496))) (&fail~1623545778~496))))) (&fail~1623545778~496))))) (&fail~1623545778~496))) (&fail~1623545778~496)))) (&fail~1623545778~496)))))) (if (pair? &input~1623545778~494) (let ((&temp~1623545778~534 (car &input~1623545778~494))) (let ((&temp~1623545778~531 (cdr &input~1623545778~494))) (if (pair? &temp~1623545778~531) (let ((&temp~1623545778~533 (car &temp~1623545778~531))) (let ((&e~1623545778~528 &temp~1623545778~533)) (let ((&temp~1623545778~532 (cdr &temp~1623545778~531))) (if (null? &temp~1623545778~532) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (quote ())) (cons (cons (ex:syntax-rename (quote syntax-case) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (quote ()) (cons (cons (ex:syntax-rename (quote id) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote identifier?) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote id) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (quote ()))) (quote ()))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons &e~1623545778~528 (quote ()))) (quote ())))) (cons (cons (cons (ex:syntax-rename (quote _) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (quote ())))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (cons &e~1623545778~528 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1623545778~530)) 0 (quote (core identifier-syntax))) (quote ())))) (quote ()))) (quote ()))) (quote ())))))) (quote ())))) (&fail~1623545778~495))))) (&fail~1623545778~495)))) (&fail~1623545778~495)))))) (values)) (lambda () (values)) (quote &build~1623545778~535))) (values))
(begin (ex:register-library! (ex:make-library (quote (core quasisyntax)) (lambda () (ex:uncompress (quote (((&env~1623545778~753 0 1 2 3 4 5) (&env~1623545778~725 6 1 2 3 4 5) (&env~1623545778~709 7 1 2 3 4 5) (&env~1623545778~683 8 1 2 3 4 5) (&env~1623545778~664 9 8 1 2 3 4 5) (&env~1623545778~629 10 1 2 3 4 5) (&env~1623545778~553 11 12 3 4 5)) (12 (((template) . #f))) (11 (((template*) . #f) ((replacements) . #f))) (10 (((k) . #f) ((r) . #f))) (9 (((r*) . #f) ((rep) . #f) ((t) . #f))) (8 (((e) . #f) ((r) . #f))) (7 (((e) . #f) ((r) . #f))) (6 (((e) . #f))) (5 (((unsyntax-splicing) macro &unsyntax-splicing~1623545778~758 (0) #f (core quasisyntax)) ((unsyntax) macro &unsyntax~1623545778~754 (0) #f (core quasisyntax)) ((quasisyntax) macro &quasisyntax~1623545778~536 (0) #f (core quasisyntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro &letrec*~1623545778~179 (0 1) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0 1) #f (core let)) ((let) macro &let~1623545778~100 (0 1) #f (core let)) ((=>) macro &=>~1623545778~481 (0 1) #f (core derived)) ((else) macro &else~1623545778~485 (0 1) #f (core derived)) ((case) macro &case~1623545778~401 (0 1) #f (core derived)) ((cond) macro &cond~1623545778~285 (0 1) #f (core derived)) ((let*) macro &let*~1623545778~204 (0 1) #f (core derived)) ((with-syntax) macro &with-syntax~1623545778~3 (0 1) #f (core with-syntax)) ((vector->list) variable vector->list (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((>) variable > (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 (((e) variable &e~1623545778~538 (1) #f (core quasisyntax)))) (3 (((expand) variable &expand~1623545778~539 (1) #f (core quasisyntax)))) (2 (((x) variable &x~1623545778~563 (1) #f (core quasisyntax)) ((level) variable &level~1623545778~564 (1) #f (core quasisyntax)))) (1 ()) (0 (((e) . #f))))))) (quote ((quasisyntax macro &quasisyntax~1623545778~536 (0) #f (core quasisyntax)) (unsyntax macro &unsyntax~1623545778~754 (0) #f (core quasisyntax)) (unsyntax-splicing macro &unsyntax-splicing~1623545778~758 (0) #f (core quasisyntax)))) (quote (((core with-syntax) 0 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1))) (quote (&build~1623545778~57 &build~1623545778~489 &build~1623545778~203 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &quasisyntax~1623545778~536) (lambda (&e~1623545778~538) ((lambda (&expand~1623545778~539) (set! &expand~1623545778~539 (lambda (&x~1623545778~563 &level~1623545778~564) (let ((&input~1623545778~566 &x~1623545778~563)) (let ((&fail~1623545778~567 (lambda () (let ((&fail~1623545778~568 (lambda () (let ((&fail~1623545778~569 (lambda () (let ((&fail~1623545778~570 (lambda () (let ((&fail~1623545778~571 (lambda () (let ((&fail~1623545778~572 (lambda () (let ((&fail~1623545778~573 (lambda () (let ((&fail~1623545778~574 (lambda () (ex:invalid-form &input~1623545778~566)))) (let ((&other~1623545778~575 &input~1623545778~566)) (cons &other~1623545778~575 (cons (quote ()) (quote ())))))))) (if (vector? &input~1623545778~566) (let ((&temp~1623545778~591 (vector->list &input~1623545778~566))) (if (list? &temp~1623545778~591) (let ((&e~1623545778~577 &temp~1623545778~591)) (let ((&input~1623545778~580 (&expand~1623545778~539 (vector->list (list->vector &e~1623545778~577)) &level~1623545778~564))) (let ((&fail~1623545778~582 (lambda () (ex:invalid-form &input~1623545778~580)))) (if (pair? &input~1623545778~580) (let ((&temp~1623545778~590 (car &input~1623545778~580))) (if (list? &temp~1623545778~590) (let ((&e*~1623545778~583 &temp~1623545778~590)) (let ((&temp~1623545778~587 (cdr &input~1623545778~580))) (if (pair? &temp~1623545778~587) (let ((&temp~1623545778~589 (car &temp~1623545778~587))) (let ((&reps~1623545778~584 &temp~1623545778~589)) (let ((&temp~1623545778~588 (cdr &temp~1623545778~587))) (if (null? &temp~1623545778~588) (begin (cons (list->vector &e*~1623545778~583) (cons &reps~1623545778~584 (quote ())))) (&fail~1623545778~582))))) (&fail~1623545778~582)))) (&fail~1623545778~582))) (&fail~1623545778~582))))) (&fail~1623545778~573))) (&fail~1623545778~573)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~619 (car &input~1623545778~566))) (let ((&h~1623545778~592 &temp~1623545778~619)) (let ((&temp~1623545778~618 (cdr &input~1623545778~566))) (let ((&t~1623545778~593 &temp~1623545778~618)) (let ((&input~1623545778~596 (list (&expand~1623545778~539 &h~1623545778~592 &level~1623545778~564) (&expand~1623545778~539 &t~1623545778~593 &level~1623545778~564)))) (let ((&fail~1623545778~599 (lambda () (ex:invalid-form &input~1623545778~596)))) (if (pair? &input~1623545778~596) (let ((&temp~1623545778~613 (car &input~1623545778~596))) (if (pair? &temp~1623545778~613) (let ((&temp~1623545778~617 (car &temp~1623545778~613))) (let ((&h*~1623545778~600 &temp~1623545778~617)) (let ((&temp~1623545778~614 (cdr &temp~1623545778~613))) (if (pair? &temp~1623545778~614) (let ((&temp~1623545778~616 (car &temp~1623545778~614))) (if (list? &temp~1623545778~616) (let ((&rep1~1623545778~601 &temp~1623545778~616)) (let ((&temp~1623545778~615 (cdr &temp~1623545778~614))) (if (null? &temp~1623545778~615) (let ((&temp~1623545778~606 (cdr &input~1623545778~596))) (if (pair? &temp~1623545778~606) (let ((&temp~1623545778~608 (car &temp~1623545778~606))) (if (pair? &temp~1623545778~608) (let ((&temp~1623545778~612 (car &temp~1623545778~608))) (let ((&t*~1623545778~602 &temp~1623545778~612)) (let ((&temp~1623545778~609 (cdr &temp~1623545778~608))) (if (pair? &temp~1623545778~609) (let ((&temp~1623545778~611 (car &temp~1623545778~609))) (if (list? &temp~1623545778~611) (let ((&rep2~1623545778~603 &temp~1623545778~611)) (let ((&temp~1623545778~610 (cdr &temp~1623545778~609))) (if (null? &temp~1623545778~610) (let ((&temp~1623545778~607 (cdr &temp~1623545778~606))) (if (null? &temp~1623545778~607) (begin (cons (cons &h*~1623545778~600 &t*~1623545778~602) (cons (append &rep1~1623545778~601 &rep2~1623545778~603) (quote ())))) (&fail~1623545778~599))) (&fail~1623545778~599)))) (&fail~1623545778~599))) (&fail~1623545778~599))))) (&fail~1623545778~599))) (&fail~1623545778~599))) (&fail~1623545778~599)))) (&fail~1623545778~599))) (&fail~1623545778~599))))) (&fail~1623545778~599))) (&fail~1623545778~599)))))))) (&fail~1623545778~572)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~647 (car &input~1623545778~566))) (let ((&k~1623545778~620 &temp~1623545778~647)) (let ((&temp~1623545778~646 (cdr &input~1623545778~566))) (let ((&r~1623545778~621 &temp~1623545778~646)) (if (if (> &level~1623545778~564 0) (if (ex:identifier? &k~1623545778~620) (let ((x (ex:free-identifier=? &k~1623545778~620 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1623545778~629)) 0 (quote (core quasisyntax)))))) (if x x (ex:free-identifier=? &k~1623545778~620 (ex:syntax-rename (quote unsyntax-splicing) (quote ()) (quote (&env~1623545778~629)) 0 (quote (core quasisyntax)))))) #f) #f) (let ((&input~1623545778~635 (&expand~1623545778~539 &r~1623545778~621 (- &level~1623545778~564 1)))) (let ((&fail~1623545778~637 (lambda () (ex:invalid-form &input~1623545778~635)))) (if (pair? &input~1623545778~635) (let ((&temp~1623545778~645 (car &input~1623545778~635))) (let ((&r*~1623545778~638 &temp~1623545778~645)) (let ((&temp~1623545778~642 (cdr &input~1623545778~635))) (if (pair? &temp~1623545778~642) (let ((&temp~1623545778~644 (car &temp~1623545778~642))) (let ((&reps~1623545778~639 &temp~1623545778~644)) (let ((&temp~1623545778~643 (cdr &temp~1623545778~642))) (if (null? &temp~1623545778~643) (begin (cons (cons &k~1623545778~620 &r*~1623545778~638) (cons &reps~1623545778~639 (quote ())))) (&fail~1623545778~637))))) (&fail~1623545778~637))))) (&fail~1623545778~637)))) (&fail~1623545778~571)))))) (&fail~1623545778~571)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~680 (car &input~1623545778~566))) (if (pair? &temp~1623545778~680) (let ((&temp~1623545778~682 (car &temp~1623545778~680))) (if (and (ex:identifier? &temp~1623545778~682) (ex:free-identifier=? &temp~1623545778~682 (ex:syntax-rename (quote unsyntax-splicing) (quote ()) (quote (&env~1623545778~683)) 0 (quote (core quasisyntax))))) (let ((&temp~1623545778~681 (cdr &temp~1623545778~680))) (if (list? &temp~1623545778~681) (let ((&e~1623545778~648 &temp~1623545778~681)) (let ((&temp~1623545778~679 (cdr &input~1623545778~566))) (let ((&r~1623545778~649 &temp~1623545778~679)) (if (= &level~1623545778~564 0) (let ((&input~1623545778~652 (list (&expand~1623545778~539 &r~1623545778~649 0) (ex:generate-temporaries &e~1623545778~648)))) (let ((&fail~1623545778~655 (lambda () (ex:invalid-form &input~1623545778~652)))) (if (pair? &input~1623545778~652) (let ((&temp~1623545778~674 (car &input~1623545778~652))) (if (pair? &temp~1623545778~674) (let ((&temp~1623545778~678 (car &temp~1623545778~674))) (let ((&r*~1623545778~656 &temp~1623545778~678)) (let ((&temp~1623545778~675 (cdr &temp~1623545778~674))) (if (pair? &temp~1623545778~675) (let ((&temp~1623545778~677 (car &temp~1623545778~675))) (if (list? &temp~1623545778~677) (let ((&rep~1623545778~657 &temp~1623545778~677)) (let ((&temp~1623545778~676 (cdr &temp~1623545778~675))) (if (null? &temp~1623545778~676) (let ((&temp~1623545778~671 (cdr &input~1623545778~652))) (if (pair? &temp~1623545778~671) (let ((&temp~1623545778~673 (car &temp~1623545778~671))) (if (list? &temp~1623545778~673) (let ((&t~1623545778~658 &temp~1623545778~673)) (let ((&temp~1623545778~672 (cdr &temp~1623545778~671))) (if (null? &temp~1623545778~672) (begin (let ((&input~1623545778~662 (map (lambda (&t~1623545778~658) (cons &t~1623545778~658 (cons (ex:syntax-rename (quote ...) (quote ()) (quote (&env~1623545778~664)) 0 (quote (core quasisyntax))) (quote ())))) &t~1623545778~658))) (let ((&fail~1623545778~665 (lambda () (ex:invalid-form &input~1623545778~662)))) (ex:map-while (lambda (&input~1623545778~662) (if (list? &input~1623545778~662) (let ((&t~1623545778~666 &input~1623545778~662)) (list &t~1623545778~666)) #f)) &input~1623545778~662 (lambda (&cols~1623545778~669 &rest~1623545778~670) (if (null? &rest~1623545778~670) (apply (lambda (&t~1623545778~666) (begin (cons (append (apply append &t~1623545778~666) &r*~1623545778~656) (cons (append (if (= (length &t~1623545778~666) (length &e~1623545778~648)) (map (lambda (&t~1623545778~666 &e~1623545778~648) (cons &t~1623545778~666 (cons &e~1623545778~648 (quote ())))) &t~1623545778~666 &e~1623545778~648) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote (((t ...) e) ... rep ...)) (list &t~1623545778~666 &e~1623545778~648))) &rep~1623545778~657) (quote ()))))) (if (null? &cols~1623545778~669) (quote (())) (apply map list &cols~1623545778~669))) (&fail~1623545778~665))))))) (&fail~1623545778~655)))) (&fail~1623545778~655))) (&fail~1623545778~655))) (&fail~1623545778~655)))) (&fail~1623545778~655))) (&fail~1623545778~655))))) (&fail~1623545778~655))) (&fail~1623545778~655)))) (&fail~1623545778~570))))) (&fail~1623545778~570))) (&fail~1623545778~570))) (&fail~1623545778~570))) (&fail~1623545778~570)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~706 (car &input~1623545778~566))) (if (pair? &temp~1623545778~706) (let ((&temp~1623545778~708 (car &temp~1623545778~706))) (if (and (ex:identifier? &temp~1623545778~708) (ex:free-identifier=? &temp~1623545778~708 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1623545778~709)) 0 (quote (core quasisyntax))))) (let ((&temp~1623545778~707 (cdr &temp~1623545778~706))) (if (list? &temp~1623545778~707) (let ((&e~1623545778~684 &temp~1623545778~707)) (let ((&temp~1623545778~705 (cdr &input~1623545778~566))) (let ((&r~1623545778~685 &temp~1623545778~705)) (if (= &level~1623545778~564 0) (let ((&input~1623545778~688 (list (&expand~1623545778~539 &r~1623545778~685 0) (ex:generate-temporaries &e~1623545778~684)))) (let ((&fail~1623545778~691 (lambda () (ex:invalid-form &input~1623545778~688)))) (if (pair? &input~1623545778~688) (let ((&temp~1623545778~700 (car &input~1623545778~688))) (if (pair? &temp~1623545778~700) (let ((&temp~1623545778~704 (car &temp~1623545778~700))) (let ((&r*~1623545778~692 &temp~1623545778~704)) (let ((&temp~1623545778~701 (cdr &temp~1623545778~700))) (if (pair? &temp~1623545778~701) (let ((&temp~1623545778~703 (car &temp~1623545778~701))) (if (list? &temp~1623545778~703) (let ((&rep~1623545778~693 &temp~1623545778~703)) (let ((&temp~1623545778~702 (cdr &temp~1623545778~701))) (if (null? &temp~1623545778~702) (let ((&temp~1623545778~697 (cdr &input~1623545778~688))) (if (pair? &temp~1623545778~697) (let ((&temp~1623545778~699 (car &temp~1623545778~697))) (if (list? &temp~1623545778~699) (let ((&t~1623545778~694 &temp~1623545778~699)) (let ((&temp~1623545778~698 (cdr &temp~1623545778~697))) (if (null? &temp~1623545778~698) (begin (cons (append &t~1623545778~694 &r*~1623545778~692) (cons (append (if (= (length &t~1623545778~694) (length &e~1623545778~684)) (map (lambda (&t~1623545778~694 &e~1623545778~684) (cons &t~1623545778~694 (cons &e~1623545778~684 (quote ())))) &t~1623545778~694 &e~1623545778~684) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((t e) ... rep ...)) (list &t~1623545778~694 &e~1623545778~684))) &rep~1623545778~693) (quote ())))) (&fail~1623545778~691)))) (&fail~1623545778~691))) (&fail~1623545778~691))) (&fail~1623545778~691)))) (&fail~1623545778~691))) (&fail~1623545778~691))))) (&fail~1623545778~691))) (&fail~1623545778~691)))) (&fail~1623545778~569))))) (&fail~1623545778~569))) (&fail~1623545778~569))) (&fail~1623545778~569))) (&fail~1623545778~569)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~724 (car &input~1623545778~566))) (if (and (ex:identifier? &temp~1623545778~724) (ex:free-identifier=? &temp~1623545778~724 (ex:syntax-rename (quote unsyntax) (quote ()) (quote (&env~1623545778~725)) 0 (quote (core quasisyntax))))) (let ((&temp~1623545778~721 (cdr &input~1623545778~566))) (if (pair? &temp~1623545778~721) (let ((&temp~1623545778~723 (car &temp~1623545778~721))) (let ((&e~1623545778~710 &temp~1623545778~723)) (let ((&temp~1623545778~722 (cdr &temp~1623545778~721))) (if (null? &temp~1623545778~722) (if (= &level~1623545778~564 0) (let ((&input~1623545778~713 (ex:generate-temporaries (quote (t))))) (let ((&fail~1623545778~715 (lambda () (ex:invalid-form &input~1623545778~713)))) (if (pair? &input~1623545778~713) (let ((&temp~1623545778~720 (car &input~1623545778~713))) (let ((&t~1623545778~716 &temp~1623545778~720)) (let ((&temp~1623545778~719 (cdr &input~1623545778~713))) (if (null? &temp~1623545778~719) (begin (cons &t~1623545778~716 (cons (cons (cons &t~1623545778~716 (cons &e~1623545778~710 (quote ()))) (quote ())) (quote ())))) (&fail~1623545778~715))))) (&fail~1623545778~715)))) (&fail~1623545778~568)) (&fail~1623545778~568))))) (&fail~1623545778~568))) (&fail~1623545778~568))) (&fail~1623545778~568)))))) (if (pair? &input~1623545778~566) (let ((&temp~1623545778~752 (car &input~1623545778~566))) (if (and (ex:identifier? &temp~1623545778~752) (ex:free-identifier=? &temp~1623545778~752 (ex:syntax-rename (quote quasisyntax) (quote ()) (quote (&env~1623545778~753)) 0 (quote (core quasisyntax))))) (let ((&temp~1623545778~749 (cdr &input~1623545778~566))) (if (pair? &temp~1623545778~749) (let ((&temp~1623545778~751 (car &temp~1623545778~749))) (let ((&e~1623545778~726 &temp~1623545778~751)) (let ((&temp~1623545778~750 (cdr &temp~1623545778~749))) (if (null? &temp~1623545778~750) (let ((&input~1623545778~729 (list &x~1623545778~563 (&expand~1623545778~539 &e~1623545778~726 (+ &level~1623545778~564 1))))) (let ((&fail~1623545778~731 (lambda () (ex:invalid-form &input~1623545778~729)))) (if (pair? &input~1623545778~729) (let ((&temp~1623545778~744 (car &input~1623545778~729))) (if (pair? &temp~1623545778~744) (let ((&temp~1623545778~748 (car &temp~1623545778~744))) (let ((&k~1623545778~732 &temp~1623545778~748)) (let ((&temp~1623545778~745 (cdr &temp~1623545778~744))) (if (pair? &temp~1623545778~745) (let ((&temp~1623545778~747 (car &temp~1623545778~745))) (let ((&temp~1623545778~746 (cdr &temp~1623545778~745))) (if (null? &temp~1623545778~746) (let ((&temp~1623545778~737 (cdr &input~1623545778~729))) (if (pair? &temp~1623545778~737) (let ((&temp~1623545778~739 (car &temp~1623545778~737))) (if (pair? &temp~1623545778~739) (let ((&temp~1623545778~743 (car &temp~1623545778~739))) (let ((&e*~1623545778~733 &temp~1623545778~743)) (let ((&temp~1623545778~740 (cdr &temp~1623545778~739))) (if (pair? &temp~1623545778~740) (let ((&temp~1623545778~742 (car &temp~1623545778~740))) (let ((&reps~1623545778~734 &temp~1623545778~742)) (let ((&temp~1623545778~741 (cdr &temp~1623545778~740))) (if (null? &temp~1623545778~741) (let ((&temp~1623545778~738 (cdr &temp~1623545778~737))) (if (null? &temp~1623545778~738) (begin (cons (cons &k~1623545778~732 (cons &e*~1623545778~733 (quote ()))) (cons &reps~1623545778~734 (quote ())))) (&fail~1623545778~731))) (&fail~1623545778~731))))) (&fail~1623545778~731))))) (&fail~1623545778~731))) (&fail~1623545778~731))) (&fail~1623545778~731)))) (&fail~1623545778~731))))) (&fail~1623545778~731))) (&fail~1623545778~731)))) (&fail~1623545778~567))))) (&fail~1623545778~567))) (&fail~1623545778~567))) (&fail~1623545778~567)))))) (let ((&input~1623545778~541 &e~1623545778~538)) (let ((&fail~1623545778~542 (lambda () (ex:invalid-form &input~1623545778~541)))) (if (pair? &input~1623545778~541) (let ((&temp~1623545778~561 (car &input~1623545778~541))) (let ((&temp~1623545778~558 (cdr &input~1623545778~541))) (if (pair? &temp~1623545778~558) (let ((&temp~1623545778~560 (car &temp~1623545778~558))) (let ((&template~1623545778~543 &temp~1623545778~560)) (let ((&temp~1623545778~559 (cdr &temp~1623545778~558))) (if (null? &temp~1623545778~559) (let ((&input~1623545778~546 (&expand~1623545778~539 &template~1623545778~543 0))) (let ((&fail~1623545778~548 (lambda () (ex:invalid-form &input~1623545778~546)))) (if (pair? &input~1623545778~546) (let ((&temp~1623545778~557 (car &input~1623545778~546))) (let ((&template*~1623545778~549 &temp~1623545778~557)) (let ((&temp~1623545778~554 (cdr &input~1623545778~546))) (if (pair? &temp~1623545778~554) (let ((&temp~1623545778~556 (car &temp~1623545778~554))) (let ((&replacements~1623545778~550 &temp~1623545778~556)) (let ((&temp~1623545778~555 (cdr &temp~1623545778~554))) (if (null? &temp~1623545778~555) (begin (cons (ex:syntax-rename (quote with-syntax) (quote ()) (quote (&env~1623545778~553)) 0 (quote (core quasisyntax))) (cons &replacements~1623545778~550 (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~553)) 0 (quote (core quasisyntax))) (cons &template*~1623545778~549 (quote ()))) (quote ()))))) (&fail~1623545778~548))))) (&fail~1623545778~548))))) (&fail~1623545778~548)))) (&fail~1623545778~542))))) (&fail~1623545778~542)))) (&fail~1623545778~542))))) ex:undefined))) (ex:register-macro! (quote &unsyntax~1623545778~754) (lambda (&e~1623545778~756) (ex:syntax-violation (quote unsyntax) "Invalid expression" &e~1623545778~756))) (ex:register-macro! (quote &unsyntax-splicing~1623545778~758) (lambda (&e~1623545778~760) (ex:syntax-violation (quote unsyntax) "Invalid expression" &e~1623545778~760))) (values)) (lambda () (values)) (quote &build~1623545778~762))) (values))
(begin (ex:register-library! (ex:make-library (quote (core quasiquote)) (lambda () (ex:uncompress (quote (((&env~1623545778~1191 0 1 2 3 4 5) (&env~1623545778~1181 6 1 2 3 4 5) (&env~1623545778~1172 7 8 1 2 3 4 5) (&env~1623545778~1162 9 8 1 2 3 4 5) (&env~1623545778~1125 10 11 12 13 3 4 5) (&env~1623545778~1115 14 11 12 13 3 4 5) (&env~1623545778~902 15 16 17 3 4 5) (&env~1623545778~897 18 19 16 17 3 4 5) (&env~1623545778~874 20 21 22 23 24 25 16 17 3 4 5) (&env~1623545778~842 26 27 16 17 3 4 5) (&env~1623545778~828 28 29 16 17 3 4 5) (&env~1623545778~812 30 31 16 17 3 4 5)) (31 (((x) . #f))) (30 (((temp &c~1623545778~803) . #f))) (29 (((x) . #f))) (28 (((temp &c~1623545778~819) . #f))) (27 (((x) . #f))) (26 (((temp &c~1623545778~833) . #f))) (25 (((x) . #f) ((y) . #f))) (24 (((f) variable &f~1623545778~852 (1) #t (core quasiquote)))) (23 ()) (22 (((x*) variable &x*~1623545778~860 (1) #f (core quasiquote)))) (21 ()) (20 (((temp &c~1623545778~865) . #f) ((temp &c~1623545778~864) . #f))) (19 (((x) . #f))) (18 (((temp &c~1623545778~888) . #f))) (17 (((x) variable &x~1623545778~785 (1) #f (core quasiquote)))) (16 ()) (15 (((x) . #f))) (14 (((p) . #f))) (13 (((p) variable &p~1623545778~1093 (1) #f (core quasiquote)) ((lev) variable &lev~1623545778~1094 (1) #f (core quasiquote)))) (12 ()) (11 (((p) . #f) ((q) . #f))) (10 (((p) . #f))) (9 (((p) . #f))) (8 (((p) . #f) ((q) . #f))) (7 (((p) . #f))) (6 (((p) . #f))) (5 (((unquote-splicing) macro &unquote-splicing~1623545778~1201 (0) #f (core quasiquote)) ((unquote) macro &unquote~1623545778~1197 (0) #f (core quasiquote)) ((quasiquote) macro &quasiquote~1623545778~763 (0) #f (core quasiquote)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro &letrec*~1623545778~179 (0 1) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0 1) #f (core let)) ((let) macro &let~1623545778~100 (0 1) #f (core let)) ((=>) macro &=>~1623545778~481 (0 1) #f (core derived)) ((else) macro &else~1623545778~485 (0 1) #f (core derived)) ((case) macro &case~1623545778~401 (0 1) #f (core derived)) ((cond) macro &cond~1623545778~285 (0 1) #f (core derived)) ((let*) macro &let*~1623545778~204 (0 1) #f (core derived)) ((with-syntax) macro &with-syntax~1623545778~3 (1) #f (core with-syntax)) ((unsyntax-splicing) macro &unsyntax-splicing~1623545778~758 (1) #f (core quasisyntax)) ((unsyntax) macro &unsyntax~1623545778~754 (1) #f (core quasisyntax)) ((quasisyntax) macro &quasisyntax~1623545778~536 (1) #f (core quasisyntax)) ((list->vector) variable list->vector (0 1) #f ()) ((vector) variable vector (0 1) #f ()) ((list) variable list (0 1) #f ()) ((map) variable map (0 1) #f ()) ((append) variable append (0 1) #f ()) ((cdr) variable cdr (0 1) #f ()) ((car) variable car (0 1) #f ()) ((cons) variable cons (0 1) #f ()) ((null?) variable null? (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 ()) (3 (((emit) variable &emit~1623545778~772 (1) #f (core quasiquote)) ((quasivector) variable &quasivector~1623545778~771 (1) #f (core quasiquote)) ((quasilist*) variable &quasilist*~1623545778~770 (1) #f (core quasiquote)) ((quasiappend) variable &quasiappend~1623545778~769 (1) #f (core quasiquote)) ((quasicons) variable &quasicons~1623545778~768 (1) #f (core quasiquote)) ((vquasi) variable &vquasi~1623545778~767 (1) #f (core quasiquote)) ((quasi) variable &quasi~1623545778~766 (1) #f (core quasiquote)))) (2 (((p) variable &p~1623545778~1133 (1) #f (core quasiquote)) ((lev) variable &lev~1623545778~1134 (1) #f (core quasiquote)))) (1 ()) (0 (((p) . #f))))))) (quote ((quasiquote macro &quasiquote~1623545778~763 (0) #f (core quasiquote)) (unquote macro &unquote~1623545778~1197 (0) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1623545778~1201 (0) #f (core quasiquote)))) (quote (((core quasisyntax) 1) ((core with-syntax) 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1))) (quote (&build~1623545778~762 &build~1623545778~57 &build~1623545778~489 &build~1623545778~203 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &quasiquote~1623545778~763) ((lambda () ((lambda (&emit~1623545778~772 &quasivector~1623545778~771 &quasilist*~1623545778~770 &quasiappend~1623545778~769 &quasicons~1623545778~768 &vquasi~1623545778~767 &quasi~1623545778~766) (set! &quasi~1623545778~766 (lambda (&p~1623545778~1133 &lev~1623545778~1134) (let ((&input~1623545778~1136 &p~1623545778~1133)) (let ((&fail~1623545778~1137 (lambda () (let ((&fail~1623545778~1138 (lambda () (let ((&fail~1623545778~1139 (lambda () (let ((&fail~1623545778~1140 (lambda () (let ((&fail~1623545778~1141 (lambda () (ex:invalid-form &input~1623545778~1136)))) (let ((&p~1623545778~1142 &input~1623545778~1136)) (cons (quote "quote") (cons &p~1623545778~1142 (quote ())))))))) (if (vector? &input~1623545778~1136) (let ((&temp~1623545778~1146 (vector->list &input~1623545778~1136))) (if (list? &temp~1623545778~1146) (let ((&x~1623545778~1144 &temp~1623545778~1146)) (&quasivector~1623545778~771 (&vquasi~1623545778~767 &x~1623545778~1144 &lev~1623545778~1134))) (&fail~1623545778~1140))) (&fail~1623545778~1140)))))) (if (pair? &input~1623545778~1136) (let ((&temp~1623545778~1178 (car &input~1623545778~1136))) (let ((&p~1623545778~1147 &temp~1623545778~1178)) (let ((&temp~1623545778~1177 (cdr &input~1623545778~1136))) (let ((&q~1623545778~1148 &temp~1623545778~1177)) (let ((&input~1623545778~1150 &p~1623545778~1147)) (let ((&fail~1623545778~1152 (lambda () (let ((&fail~1623545778~1153 (lambda () (let ((&fail~1623545778~1154 (lambda () (ex:invalid-form &input~1623545778~1150)))) (&quasicons~1623545778~768 (&quasi~1623545778~766 &p~1623545778~1147 &lev~1623545778~1134) (&quasi~1623545778~766 &q~1623545778~1148 &lev~1623545778~1134)))))) (if (pair? &input~1623545778~1150) (let ((&temp~1623545778~1166 (car &input~1623545778~1150))) (if (and (ex:identifier? &temp~1623545778~1166) (ex:free-identifier=? &temp~1623545778~1166 (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1623545778~1162)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1165 (cdr &input~1623545778~1150))) (if (list? &temp~1623545778~1165) (let ((&p~1623545778~1157 &temp~1623545778~1165)) (if (= &lev~1623545778~1134 0) (&quasiappend~1623545778~769 (map (lambda (&p~1623545778~1157) (cons (quote "value") (cons &p~1623545778~1157 (quote ())))) &p~1623545778~1157) (&quasi~1623545778~766 &q~1623545778~1148 &lev~1623545778~1134)) (&quasicons~1623545778~768 (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1623545778~1162)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 &p~1623545778~1157 (- &lev~1623545778~1134 1))) (&quasi~1623545778~766 &q~1623545778~1148 &lev~1623545778~1134)))) (&fail~1623545778~1153))) (&fail~1623545778~1153))) (&fail~1623545778~1153)))))) (if (pair? &input~1623545778~1150) (let ((&temp~1623545778~1176 (car &input~1623545778~1150))) (if (and (ex:identifier? &temp~1623545778~1176) (ex:free-identifier=? &temp~1623545778~1176 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1172)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1175 (cdr &input~1623545778~1150))) (if (list? &temp~1623545778~1175) (let ((&p~1623545778~1167 &temp~1623545778~1175)) (if (= &lev~1623545778~1134 0) (&quasilist*~1623545778~770 (map (lambda (&p~1623545778~1167) (cons (quote "value") (cons &p~1623545778~1167 (quote ())))) &p~1623545778~1167) (&quasi~1623545778~766 &q~1623545778~1148 &lev~1623545778~1134)) (&quasicons~1623545778~768 (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1172)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 &p~1623545778~1167 (- &lev~1623545778~1134 1))) (&quasi~1623545778~766 &q~1623545778~1148 &lev~1623545778~1134)))) (&fail~1623545778~1152))) (&fail~1623545778~1152))) (&fail~1623545778~1152)))))))) (&fail~1623545778~1139)))))) (if (pair? &input~1623545778~1136) (let ((&temp~1623545778~1186 (car &input~1623545778~1136))) (if (and (ex:identifier? &temp~1623545778~1186) (ex:free-identifier=? &temp~1623545778~1186 (ex:syntax-rename (quote quasiquote) (quote ()) (quote (&env~1623545778~1181)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1183 (cdr &input~1623545778~1136))) (if (pair? &temp~1623545778~1183) (let ((&temp~1623545778~1185 (car &temp~1623545778~1183))) (let ((&p~1623545778~1179 &temp~1623545778~1185)) (let ((&temp~1623545778~1184 (cdr &temp~1623545778~1183))) (if (null? &temp~1623545778~1184) (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote quasiquote) (quote ()) (quote (&env~1623545778~1181)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 (cons &p~1623545778~1179 (quote ())) (+ &lev~1623545778~1134 1))) (&fail~1623545778~1138))))) (&fail~1623545778~1138))) (&fail~1623545778~1138))) (&fail~1623545778~1138)))))) (if (pair? &input~1623545778~1136) (let ((&temp~1623545778~1196 (car &input~1623545778~1136))) (if (and (ex:identifier? &temp~1623545778~1196) (ex:free-identifier=? &temp~1623545778~1196 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1191)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1193 (cdr &input~1623545778~1136))) (if (pair? &temp~1623545778~1193) (let ((&temp~1623545778~1195 (car &temp~1623545778~1193))) (let ((&p~1623545778~1187 &temp~1623545778~1195)) (let ((&temp~1623545778~1194 (cdr &temp~1623545778~1193))) (if (null? &temp~1623545778~1194) (if (= &lev~1623545778~1134 0) (cons (quote "value") (cons &p~1623545778~1187 (quote ()))) (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1191)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 (cons &p~1623545778~1187 (quote ())) (- &lev~1623545778~1134 1)))) (&fail~1623545778~1137))))) (&fail~1623545778~1137))) (&fail~1623545778~1137))) (&fail~1623545778~1137)))))) (set! &vquasi~1623545778~767 (lambda (&p~1623545778~1093 &lev~1623545778~1094) (let ((&input~1623545778~1096 &p~1623545778~1093)) (let ((&fail~1623545778~1097 (lambda () (let ((&fail~1623545778~1098 (lambda () (ex:invalid-form &input~1623545778~1096)))) (if (null? &input~1623545778~1096) (cons (quote "quote") (cons (quote ()) (quote ()))) (&fail~1623545778~1098)))))) (if (pair? &input~1623545778~1096) (let ((&temp~1623545778~1131 (car &input~1623545778~1096))) (let ((&p~1623545778~1100 &temp~1623545778~1131)) (let ((&temp~1623545778~1130 (cdr &input~1623545778~1096))) (let ((&q~1623545778~1101 &temp~1623545778~1130)) (let ((&input~1623545778~1103 &p~1623545778~1100)) (let ((&fail~1623545778~1105 (lambda () (let ((&fail~1623545778~1106 (lambda () (let ((&fail~1623545778~1107 (lambda () (ex:invalid-form &input~1623545778~1103)))) (&quasicons~1623545778~768 (&quasi~1623545778~766 &p~1623545778~1100 &lev~1623545778~1094) (&vquasi~1623545778~767 &q~1623545778~1101 &lev~1623545778~1094)))))) (if (pair? &input~1623545778~1103) (let ((&temp~1623545778~1119 (car &input~1623545778~1103))) (if (and (ex:identifier? &temp~1623545778~1119) (ex:free-identifier=? &temp~1623545778~1119 (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1623545778~1115)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1118 (cdr &input~1623545778~1103))) (if (list? &temp~1623545778~1118) (let ((&p~1623545778~1110 &temp~1623545778~1118)) (if (= &lev~1623545778~1094 0) (&quasiappend~1623545778~769 (map (lambda (&p~1623545778~1110) (cons (quote "value") (cons &p~1623545778~1110 (quote ())))) &p~1623545778~1110) (&vquasi~1623545778~767 &q~1623545778~1101 &lev~1623545778~1094)) (&quasicons~1623545778~768 (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote-splicing) (quote ()) (quote (&env~1623545778~1115)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 &p~1623545778~1110 (- &lev~1623545778~1094 1))) (&vquasi~1623545778~767 &q~1623545778~1101 &lev~1623545778~1094)))) (&fail~1623545778~1106))) (&fail~1623545778~1106))) (&fail~1623545778~1106)))))) (if (pair? &input~1623545778~1103) (let ((&temp~1623545778~1129 (car &input~1623545778~1103))) (if (and (ex:identifier? &temp~1623545778~1129) (ex:free-identifier=? &temp~1623545778~1129 (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1125)) 0 (quote (core quasiquote))))) (let ((&temp~1623545778~1128 (cdr &input~1623545778~1103))) (if (list? &temp~1623545778~1128) (let ((&p~1623545778~1120 &temp~1623545778~1128)) (if (= &lev~1623545778~1094 0) (&quasilist*~1623545778~770 (map (lambda (&p~1623545778~1120) (cons (quote "value") (cons &p~1623545778~1120 (quote ())))) &p~1623545778~1120) (&vquasi~1623545778~767 &q~1623545778~1101 &lev~1623545778~1094)) (&quasicons~1623545778~768 (&quasicons~1623545778~768 (cons (quote "quote") (cons (ex:syntax-rename (quote unquote) (quote ()) (quote (&env~1623545778~1125)) 0 (quote (core quasiquote))) (quote ()))) (&quasi~1623545778~766 &p~1623545778~1120 (- &lev~1623545778~1094 1))) (&vquasi~1623545778~767 &q~1623545778~1101 &lev~1623545778~1094)))) (&fail~1623545778~1105))) (&fail~1623545778~1105))) (&fail~1623545778~1105)))))))) (&fail~1623545778~1097)))))) (set! &quasicons~1623545778~768 (lambda (&x~1623545778~1043 &y~1623545778~1044) (let ((&input~1623545778~1047 (list &x~1623545778~1043 &y~1623545778~1044))) (let ((&fail~1623545778~1048 (lambda () (ex:invalid-form &input~1623545778~1047)))) (if (pair? &input~1623545778~1047) (let ((&temp~1623545778~1091 (car &input~1623545778~1047))) (let ((&x~1623545778~1049 &temp~1623545778~1091)) (let ((&temp~1623545778~1088 (cdr &input~1623545778~1047))) (if (pair? &temp~1623545778~1088) (let ((&temp~1623545778~1090 (car &temp~1623545778~1088))) (let ((&y~1623545778~1050 &temp~1623545778~1090)) (let ((&temp~1623545778~1089 (cdr &temp~1623545778~1088))) (if (null? &temp~1623545778~1089) (begin (let ((&input~1623545778~1053 &y~1623545778~1050)) (let ((&fail~1623545778~1055 (lambda () (let ((&fail~1623545778~1056 (lambda () (let ((&fail~1623545778~1057 (lambda () (let ((&fail~1623545778~1058 (lambda () (ex:invalid-form &input~1623545778~1053)))) (cons (quote "list*") (cons &x~1623545778~1049 (cons &y~1623545778~1050 (quote ())))))))) (if (pair? &input~1623545778~1053) (let ((&temp~1623545778~1063 (car &input~1623545778~1053))) (if (equal? &temp~1623545778~1063 (quote "list*")) (let ((&temp~1623545778~1062 (cdr &input~1623545778~1053))) (let ((&stuff~1623545778~1060 &temp~1623545778~1062)) (cons (quote "list*") (cons &x~1623545778~1049 &stuff~1623545778~1060)))) (&fail~1623545778~1057))) (&fail~1623545778~1057)))))) (if (pair? &input~1623545778~1053) (let ((&temp~1623545778~1067 (car &input~1623545778~1053))) (if (equal? &temp~1623545778~1067 (quote "list")) (let ((&temp~1623545778~1066 (cdr &input~1623545778~1053))) (let ((&stuff~1623545778~1064 &temp~1623545778~1066)) (cons (quote "list") (cons &x~1623545778~1049 &stuff~1623545778~1064)))) (&fail~1623545778~1056))) (&fail~1623545778~1056)))))) (if (pair? &input~1623545778~1053) (let ((&temp~1623545778~1087 (car &input~1623545778~1053))) (if (equal? &temp~1623545778~1087 (quote "quote")) (let ((&temp~1623545778~1084 (cdr &input~1623545778~1053))) (if (pair? &temp~1623545778~1084) (let ((&temp~1623545778~1086 (car &temp~1623545778~1084))) (let ((&dy~1623545778~1068 &temp~1623545778~1086)) (let ((&temp~1623545778~1085 (cdr &temp~1623545778~1084))) (if (null? &temp~1623545778~1085) (let ((&input~1623545778~1070 &x~1623545778~1049)) (let ((&fail~1623545778~1072 (lambda () (let ((&fail~1623545778~1073 (lambda () (ex:invalid-form &input~1623545778~1070)))) (if (null? &dy~1623545778~1068) (cons (quote "list") (cons &x~1623545778~1049 (quote ()))) (cons (quote "list*") (cons &x~1623545778~1049 (cons &y~1623545778~1050 (quote ()))))))))) (if (pair? &input~1623545778~1070) (let ((&temp~1623545778~1083 (car &input~1623545778~1070))) (if (equal? &temp~1623545778~1083 (quote "quote")) (let ((&temp~1623545778~1080 (cdr &input~1623545778~1070))) (if (pair? &temp~1623545778~1080) (let ((&temp~1623545778~1082 (car &temp~1623545778~1080))) (let ((&dx~1623545778~1078 &temp~1623545778~1082)) (let ((&temp~1623545778~1081 (cdr &temp~1623545778~1080))) (if (null? &temp~1623545778~1081) (cons (quote "quote") (cons (cons &dx~1623545778~1078 &dy~1623545778~1068) (quote ()))) (&fail~1623545778~1072))))) (&fail~1623545778~1072))) (&fail~1623545778~1072))) (&fail~1623545778~1072)))) (&fail~1623545778~1055))))) (&fail~1623545778~1055))) (&fail~1623545778~1055))) (&fail~1623545778~1055))))) (&fail~1623545778~1048))))) (&fail~1623545778~1048))))) (&fail~1623545778~1048)))))) (set! &quasiappend~1623545778~769 (lambda (&x~1623545778~1002 &y~1623545778~1003) (let ((&input~1623545778~1005 &y~1623545778~1003)) (let ((&fail~1623545778~1006 (lambda () (let ((&fail~1623545778~1007 (lambda () (ex:invalid-form &input~1623545778~1005)))) (if (null? &x~1623545778~1002) (begin &y~1623545778~1003) (begin (let ((&input~1623545778~1014 (list &x~1623545778~1002 &y~1623545778~1003))) (let ((&fail~1623545778~1015 (lambda () (ex:invalid-form &input~1623545778~1014)))) (if (pair? &input~1623545778~1014) (let ((&temp~1623545778~1023 (car &input~1623545778~1014))) (if (list? &temp~1623545778~1023) (let ((&p~1623545778~1016 &temp~1623545778~1023)) (let ((&temp~1623545778~1020 (cdr &input~1623545778~1014))) (if (pair? &temp~1623545778~1020) (let ((&temp~1623545778~1022 (car &temp~1623545778~1020))) (let ((&y~1623545778~1017 &temp~1623545778~1022)) (let ((&temp~1623545778~1021 (cdr &temp~1623545778~1020))) (if (null? &temp~1623545778~1021) (begin (cons (quote "append") (append &p~1623545778~1016 (cons &y~1623545778~1017 (quote ()))))) (&fail~1623545778~1015))))) (&fail~1623545778~1015)))) (&fail~1623545778~1015))) (&fail~1623545778~1015)))))))))) (if (pair? &input~1623545778~1005) (let ((&temp~1623545778~1041 (car &input~1623545778~1005))) (if (equal? &temp~1623545778~1041 (quote "quote")) (let ((&temp~1623545778~1038 (cdr &input~1623545778~1005))) (if (pair? &temp~1623545778~1038) (let ((&temp~1623545778~1040 (car &temp~1623545778~1038))) (if (null? &temp~1623545778~1040) (let ((&temp~1623545778~1039 (cdr &temp~1623545778~1038))) (if (null? &temp~1623545778~1039) (if (null? &x~1623545778~1002) (begin (cons (quote "quote") (cons (quote ()) (quote ())))) (if (null? (cdr &x~1623545778~1002)) (begin (car &x~1623545778~1002)) (begin (let ((&input~1623545778~1033 &x~1623545778~1002)) (let ((&fail~1623545778~1034 (lambda () (ex:invalid-form &input~1623545778~1033)))) (if (list? &input~1623545778~1033) (let ((&p~1623545778~1035 &input~1623545778~1033)) (begin (cons (quote "append") &p~1623545778~1035))) (&fail~1623545778~1034))))))) (&fail~1623545778~1006))) (&fail~1623545778~1006))) (&fail~1623545778~1006))) (&fail~1623545778~1006))) (&fail~1623545778~1006)))))) (set! &quasilist*~1623545778~770 (lambda (&x~1623545778~984 &y~1623545778~985) (((lambda (&f~1623545778~991) ((lambda (&temp~1623545778~994) (set! &f~1623545778~991 &temp~1623545778~994) ((lambda () &f~1623545778~991))) (lambda (&x~1623545778~999) (if (null? &x~1623545778~999) &y~1623545778~985 (&quasicons~1623545778~768 (car &x~1623545778~999) (&f~1623545778~991 (cdr &x~1623545778~999))))))) ex:undefined) &x~1623545778~984))) (set! &quasivector~1623545778~771 (lambda (&x~1623545778~908) (let ((&input~1623545778~910 &x~1623545778~908)) (let ((&fail~1623545778~911 (lambda () (let ((&fail~1623545778~912 (lambda () (ex:invalid-form &input~1623545778~910)))) (((lambda (&f~1623545778~918) ((lambda (&temp~1623545778~921) (set! &f~1623545778~918 &temp~1623545778~921) ((lambda () &f~1623545778~918))) (lambda (&y~1623545778~926 &k~1623545778~927) (let ((&input~1623545778~929 &y~1623545778~926)) (let ((&fail~1623545778~930 (lambda () (let ((&fail~1623545778~931 (lambda () (let ((&fail~1623545778~932 (lambda () (let ((&fail~1623545778~933 (lambda () (ex:invalid-form &input~1623545778~929)))) (let ((&else~1623545778~934 &input~1623545778~929)) (let ((&input~1623545778~939 &x~1623545778~908)) (let ((&fail~1623545778~940 (lambda () (ex:invalid-form &input~1623545778~939)))) (let ((&temp~1623545778~941 &input~1623545778~939)) (begin (cons (quote "list->vector") (cons &temp~1623545778~941 (quote ())))))))))))) (if (pair? &input~1623545778~929) (let ((&temp~1623545778~955 (car &input~1623545778~929))) (if (equal? &temp~1623545778~955 (quote "list*")) (let ((&temp~1623545778~950 (cdr &input~1623545778~929))) (if (>= (ex:dotted-length &temp~1623545778~950) 1) (let ((&temp~1623545778~954 (ex:dotted-butlast &temp~1623545778~950 1))) (if (list? &temp~1623545778~954) (let ((&y~1623545778~944 &temp~1623545778~954)) (let ((&temp~1623545778~951 (ex:dotted-last &temp~1623545778~950 1))) (if (pair? &temp~1623545778~951) (let ((&temp~1623545778~953 (car &temp~1623545778~951))) (let ((&z~1623545778~945 &temp~1623545778~953)) (let ((&temp~1623545778~952 (cdr &temp~1623545778~951))) (if (null? &temp~1623545778~952) (&f~1623545778~918 &z~1623545778~945 (lambda (&ls~1623545778~948) (&k~1623545778~927 (append &y~1623545778~944 &ls~1623545778~948)))) (&fail~1623545778~932))))) (&fail~1623545778~932)))) (&fail~1623545778~932))) (&fail~1623545778~932))) (&fail~1623545778~932))) (&fail~1623545778~932)))))) (if (pair? &input~1623545778~929) (let ((&temp~1623545778~959 (car &input~1623545778~929))) (if (equal? &temp~1623545778~959 (quote "list")) (let ((&temp~1623545778~958 (cdr &input~1623545778~929))) (if (list? &temp~1623545778~958) (let ((&y~1623545778~956 &temp~1623545778~958)) (&k~1623545778~927 &y~1623545778~956)) (&fail~1623545778~931))) (&fail~1623545778~931))) (&fail~1623545778~931)))))) (if (pair? &input~1623545778~929) (let ((&temp~1623545778~965 (car &input~1623545778~929))) (if (equal? &temp~1623545778~965 (quote "quote")) (let ((&temp~1623545778~962 (cdr &input~1623545778~929))) (if (pair? &temp~1623545778~962) (let ((&temp~1623545778~964 (car &temp~1623545778~962))) (if (list? &temp~1623545778~964) (let ((&y~1623545778~960 &temp~1623545778~964)) (let ((&temp~1623545778~963 (cdr &temp~1623545778~962))) (if (null? &temp~1623545778~963) (&k~1623545778~927 (map (lambda (&y~1623545778~960) (cons (quote "quote") (cons &y~1623545778~960 (quote ())))) &y~1623545778~960)) (&fail~1623545778~930)))) (&fail~1623545778~930))) (&fail~1623545778~930))) (&fail~1623545778~930))) (&fail~1623545778~930))))))) ex:undefined) &x~1623545778~908 (lambda (&ls~1623545778~967) (let ((&input~1623545778~972 &ls~1623545778~967)) (let ((&fail~1623545778~973 (lambda () (ex:invalid-form &input~1623545778~972)))) (if (list? &input~1623545778~972) (let ((&temp~1623545778~974 &input~1623545778~972)) (begin (cons (quote "vector") &temp~1623545778~974))) (&fail~1623545778~973)))))))))) (if (pair? &input~1623545778~910) (let ((&temp~1623545778~982 (car &input~1623545778~910))) (if (equal? &temp~1623545778~982 (quote "quote")) (let ((&temp~1623545778~979 (cdr &input~1623545778~910))) (if (pair? &temp~1623545778~979) (let ((&temp~1623545778~981 (car &temp~1623545778~979))) (if (list? &temp~1623545778~981) (let ((&x~1623545778~977 &temp~1623545778~981)) (let ((&temp~1623545778~980 (cdr &temp~1623545778~979))) (if (null? &temp~1623545778~980) (cons (quote "quote") (cons (list->vector &x~1623545778~977) (quote ()))) (&fail~1623545778~911)))) (&fail~1623545778~911))) (&fail~1623545778~911))) (&fail~1623545778~911))) (&fail~1623545778~911)))))) (set! &emit~1623545778~772 (lambda (&x~1623545778~785) (let ((&input~1623545778~787 &x~1623545778~785)) (let ((&fail~1623545778~788 (lambda () (let ((&fail~1623545778~789 (lambda () (let ((&fail~1623545778~790 (lambda () (let ((&fail~1623545778~791 (lambda () (let ((&fail~1623545778~792 (lambda () (let ((&fail~1623545778~793 (lambda () (let ((&fail~1623545778~794 (lambda () (ex:invalid-form &input~1623545778~787)))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~800 (car &input~1623545778~787))) (if (equal? &temp~1623545778~800 (quote "value")) (let ((&temp~1623545778~797 (cdr &input~1623545778~787))) (if (pair? &temp~1623545778~797) (let ((&temp~1623545778~799 (car &temp~1623545778~797))) (let ((&x~1623545778~795 &temp~1623545778~799)) (let ((&temp~1623545778~798 (cdr &temp~1623545778~797))) (if (null? &temp~1623545778~798) &x~1623545778~795 (&fail~1623545778~794))))) (&fail~1623545778~794))) (&fail~1623545778~794))) (&fail~1623545778~794)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~816 (car &input~1623545778~787))) (if (equal? &temp~1623545778~816 (quote "list->vector")) (let ((&temp~1623545778~813 (cdr &input~1623545778~787))) (if (pair? &temp~1623545778~813) (let ((&temp~1623545778~815 (car &temp~1623545778~813))) (let ((&x~1623545778~801 &temp~1623545778~815)) (let ((&temp~1623545778~814 (cdr &temp~1623545778~813))) (if (null? &temp~1623545778~814) (let ((&input~1623545778~806 (&emit~1623545778~772 &x~1623545778~801))) (let ((&fail~1623545778~808 (lambda () (ex:invalid-form &input~1623545778~806)))) (let ((&temp~1623545778~809 &input~1623545778~806)) (begin (cons (ex:syntax-rename (quote list->vector) (quote ()) (quote (&env~1623545778~812)) 0 (quote (core quasiquote))) (cons &temp~1623545778~809 (quote ()))))))) (&fail~1623545778~793))))) (&fail~1623545778~793))) (&fail~1623545778~793))) (&fail~1623545778~793)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~830 (car &input~1623545778~787))) (if (equal? &temp~1623545778~830 (quote "vector")) (let ((&temp~1623545778~829 (cdr &input~1623545778~787))) (if (list? &temp~1623545778~829) (let ((&x~1623545778~817 &temp~1623545778~829)) (let ((&input~1623545778~822 (map &emit~1623545778~772 &x~1623545778~817))) (let ((&fail~1623545778~824 (lambda () (ex:invalid-form &input~1623545778~822)))) (if (list? &input~1623545778~822) (let ((&temp~1623545778~825 &input~1623545778~822)) (begin (cons (ex:syntax-rename (quote vector) (quote ()) (quote (&env~1623545778~828)) 0 (quote (core quasiquote))) &temp~1623545778~825))) (&fail~1623545778~824))))) (&fail~1623545778~792))) (&fail~1623545778~792))) (&fail~1623545778~792)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~844 (car &input~1623545778~787))) (if (equal? &temp~1623545778~844 (quote "append")) (let ((&temp~1623545778~843 (cdr &input~1623545778~787))) (if (list? &temp~1623545778~843) (let ((&x~1623545778~831 &temp~1623545778~843)) (let ((&input~1623545778~836 (map &emit~1623545778~772 &x~1623545778~831))) (let ((&fail~1623545778~838 (lambda () (ex:invalid-form &input~1623545778~836)))) (if (list? &input~1623545778~836) (let ((&temp~1623545778~839 &input~1623545778~836)) (begin (cons (ex:syntax-rename (quote append) (quote ()) (quote (&env~1623545778~842)) 0 (quote (core quasiquote))) &temp~1623545778~839))) (&fail~1623545778~838))))) (&fail~1623545778~791))) (&fail~1623545778~791))) (&fail~1623545778~791)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~885 (car &input~1623545778~787))) (if (equal? &temp~1623545778~885 (quote "list*")) (let ((&temp~1623545778~880 (cdr &input~1623545778~787))) (if (>= (ex:dotted-length &temp~1623545778~880) 1) (let ((&temp~1623545778~884 (ex:dotted-butlast &temp~1623545778~880 1))) (if (list? &temp~1623545778~884) (let ((&x~1623545778~845 &temp~1623545778~884)) (let ((&temp~1623545778~881 (ex:dotted-last &temp~1623545778~880 1))) (if (pair? &temp~1623545778~881) (let ((&temp~1623545778~883 (car &temp~1623545778~881))) (let ((&y~1623545778~846 &temp~1623545778~883)) (let ((&temp~1623545778~882 (cdr &temp~1623545778~881))) (if (null? &temp~1623545778~882) (((lambda (&f~1623545778~852) ((lambda (&temp~1623545778~855) (set! &f~1623545778~852 &temp~1623545778~855) ((lambda () &f~1623545778~852))) (lambda (&x*~1623545778~860) (if (null? &x*~1623545778~860) (&emit~1623545778~772 &y~1623545778~846) (let ((&input~1623545778~868 (list (&emit~1623545778~772 (car &x*~1623545778~860)) (&f~1623545778~852 (cdr &x*~1623545778~860))))) (let ((&fail~1623545778~869 (lambda () (ex:invalid-form &input~1623545778~868)))) (if (pair? &input~1623545778~868) (let ((&temp~1623545778~878 (car &input~1623545778~868))) (let ((&temp~1623545778~870 &temp~1623545778~878)) (let ((&temp~1623545778~875 (cdr &input~1623545778~868))) (if (pair? &temp~1623545778~875) (let ((&temp~1623545778~877 (car &temp~1623545778~875))) (let ((&temp~1623545778~871 &temp~1623545778~877)) (let ((&temp~1623545778~876 (cdr &temp~1623545778~875))) (if (null? &temp~1623545778~876) (begin (cons (ex:syntax-rename (quote cons) (quote ()) (quote (&env~1623545778~874)) 0 (quote (core quasiquote))) (cons &temp~1623545778~870 (cons &temp~1623545778~871 (quote ()))))) (&fail~1623545778~869))))) (&fail~1623545778~869))))) (&fail~1623545778~869)))))))) ex:undefined) &x~1623545778~845) (&fail~1623545778~790))))) (&fail~1623545778~790)))) (&fail~1623545778~790))) (&fail~1623545778~790))) (&fail~1623545778~790))) (&fail~1623545778~790)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~899 (car &input~1623545778~787))) (if (equal? &temp~1623545778~899 (quote "list")) (let ((&temp~1623545778~898 (cdr &input~1623545778~787))) (if (list? &temp~1623545778~898) (let ((&x~1623545778~886 &temp~1623545778~898)) (let ((&input~1623545778~891 (map &emit~1623545778~772 &x~1623545778~886))) (let ((&fail~1623545778~893 (lambda () (ex:invalid-form &input~1623545778~891)))) (if (list? &input~1623545778~891) (let ((&temp~1623545778~894 &input~1623545778~891)) (begin (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1623545778~897)) 0 (quote (core quasiquote))) &temp~1623545778~894))) (&fail~1623545778~893))))) (&fail~1623545778~789))) (&fail~1623545778~789))) (&fail~1623545778~789)))))) (if (pair? &input~1623545778~787) (let ((&temp~1623545778~906 (car &input~1623545778~787))) (if (equal? &temp~1623545778~906 (quote "quote")) (let ((&temp~1623545778~903 (cdr &input~1623545778~787))) (if (pair? &temp~1623545778~903) (let ((&temp~1623545778~905 (car &temp~1623545778~903))) (let ((&x~1623545778~900 &temp~1623545778~905)) (let ((&temp~1623545778~904 (cdr &temp~1623545778~903))) (if (null? &temp~1623545778~904) (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1623545778~902)) 0 (quote (core quasiquote))) (cons &x~1623545778~900 (quote ()))) (&fail~1623545778~788))))) (&fail~1623545778~788))) (&fail~1623545778~788))) (&fail~1623545778~788)))))) (lambda (&x~1623545778~774) (let ((&input~1623545778~776 &x~1623545778~774)) (let ((&fail~1623545778~777 (lambda () (ex:invalid-form &input~1623545778~776)))) (if (pair? &input~1623545778~776) (let ((&temp~1623545778~783 (car &input~1623545778~776))) (let ((&temp~1623545778~780 (cdr &input~1623545778~776))) (if (pair? &temp~1623545778~780) (let ((&temp~1623545778~782 (car &temp~1623545778~780))) (let ((&e~1623545778~778 &temp~1623545778~782)) (let ((&temp~1623545778~781 (cdr &temp~1623545778~780))) (if (null? &temp~1623545778~781) (&emit~1623545778~772 (&quasi~1623545778~766 &e~1623545778~778 0)) (&fail~1623545778~777))))) (&fail~1623545778~777)))) (&fail~1623545778~777)))))) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)))) (ex:register-macro! (quote &unquote~1623545778~1197) (lambda (&e~1623545778~1199) (ex:syntax-violation (quote unquote) "Invalid expression" &e~1623545778~1199))) (ex:register-macro! (quote &unquote-splicing~1623545778~1201) (lambda (&e~1623545778~1203) (ex:syntax-violation (quote unquote-splicing) "Invalid expression" &e~1623545778~1203))) (values)) (lambda () (values)) (quote &build~1623545778~1205))) (values))
(begin (ex:register-library! (ex:make-library (quote (core let-values)) (lambda () (ex:uncompress (quote (((&env~1623545778~1373 0 1 2 3) (&env~1623545778~1360 4 1 2 3) (&env~1623545778~1339 5 6 7 3) (&env~1623545778~1323 8 6 7 3) (&env~1623545778~1302 9 6 7 3) (&env~1623545778~1278 10 6 7 3) (&env~1623545778~1252 11 6 7 3) (&env~1623545778~1226 12 6 7 3)) (12 (((dummy &c~1623545778~1207) . #f) ((?a) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (11 (((dummy &c~1623545778~1207) . #f) ((?a) . #f) ((?b) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (10 (((dummy &c~1623545778~1207) . #f) ((?e0) . #f) ((?args) . #f) ((?bindings) . #f) ((?tmps) . #f) ((?body) . #f))) (9 (((dummy &c~1623545778~1207) . #f) ((?b0) . #f) ((?e0) . #f) ((?binding) . #f) ((?tmps) . #f) ((?body) . #f))) (8 (((dummy &c~1623545778~1207) . #f) ((?tmps) . #f) ((?body) . #f))) (7 (((x &c~1623545778~1207) variable &x~1623545778~1209 (0) #f (core let-values)))) (6 ()) (5 (((dummy &c~1623545778~1207) . #f) ((?binding) . #f) ((?body0) . #f) ((?body1) . #f))) (4 (((dummy &c~1623545778~1347) . #f) ((?binding0) . #f) ((?binding1) . #f) ((?body0) . #f) ((?body1) . #f))) (3 (((let*-values) macro &let*-values~1623545778~1346 (0) #f (core let-values)) ((let-values) macro &let-values~1623545778~1206 (0) #f (core let-values)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((syntax-rules) macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) ((letrec*) macro &letrec*~1623545778~179 (0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0) #f (core let)) ((let) macro &let~1623545778~100 (0) #f (core let)) ((call-with-values) variable call-with-values (0) #f ()))) (2 (((x &c~1623545778~1347) variable &x~1623545778~1349 (0) #f (core let-values)))) (1 ()) (0 (((dummy &c~1623545778~1347) . #f) ((?body0) . #f) ((?body1) . #f))))))) (quote ((let-values macro &let-values~1623545778~1206 (0) #f (core let-values)) (let*-values macro &let*-values~1623545778~1346 (0) #f (core let-values)))) (quote (((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0))) (quote (&build~1623545778~203 &build~1623545778~99 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &let-values~1623545778~1206) (lambda (&x~1623545778~1209) (let ((&input~1623545778~1211 &x~1623545778~1209)) (let ((&fail~1623545778~1212 (lambda () (let ((&fail~1623545778~1213 (lambda () (let ((&fail~1623545778~1214 (lambda () (let ((&fail~1623545778~1215 (lambda () (let ((&fail~1623545778~1216 (lambda () (let ((&fail~1623545778~1217 (lambda () (ex:invalid-form &input~1623545778~1211)))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1242 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1218 &temp~1623545778~1242)) (let ((&temp~1623545778~1227 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1227) (let ((&temp~1623545778~1241 (car &temp~1623545778~1227))) (if (equal? &temp~1623545778~1241 (quote "mktmp")) (let ((&temp~1623545778~1228 (cdr &temp~1623545778~1227))) (if (pair? &temp~1623545778~1228) (let ((&temp~1623545778~1240 (car &temp~1623545778~1228))) (let ((&?a~1623545778~1219 &temp~1623545778~1240)) (let ((&temp~1623545778~1229 (cdr &temp~1623545778~1228))) (if (pair? &temp~1623545778~1229) (let ((&temp~1623545778~1239 (car &temp~1623545778~1229))) (let ((&?e0~1623545778~1220 &temp~1623545778~1239)) (let ((&temp~1623545778~1230 (cdr &temp~1623545778~1229))) (if (pair? &temp~1623545778~1230) (let ((&temp~1623545778~1238 (car &temp~1623545778~1230))) (if (list? &temp~1623545778~1238) (let ((&?arg~1623545778~1221 &temp~1623545778~1238)) (let ((&temp~1623545778~1231 (cdr &temp~1623545778~1230))) (if (pair? &temp~1623545778~1231) (let ((&temp~1623545778~1237 (car &temp~1623545778~1231))) (let ((&?bindings~1623545778~1222 &temp~1623545778~1237)) (let ((&temp~1623545778~1232 (cdr &temp~1623545778~1231))) (if (pair? &temp~1623545778~1232) (let ((&temp~1623545778~1236 (car &temp~1623545778~1232))) (if (list? &temp~1623545778~1236) (let ((&?tmp~1623545778~1223 &temp~1623545778~1236)) (let ((&temp~1623545778~1233 (cdr &temp~1623545778~1232))) (if (pair? &temp~1623545778~1233) (let ((&temp~1623545778~1235 (car &temp~1623545778~1233))) (let ((&?body~1623545778~1224 &temp~1623545778~1235)) (let ((&temp~1623545778~1234 (cdr &temp~1623545778~1233))) (if (null? &temp~1623545778~1234) (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values))) (cons (quote ()) (cons &?e0~1623545778~1220 (quote ())))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values))) (cons (append &?arg~1623545778~1221 (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values)))) (cons (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?bindings~1623545778~1222 (cons (append &?tmp~1623545778~1223 (cons (cons &?a~1623545778~1219 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~1226)) 0 (quote (core let-values))) (quote ()))) (quote ()))) (cons &?body~1623545778~1224 (quote ())))))) (quote ())))) (quote ())))) (&fail~1623545778~1217))))) (&fail~1623545778~1217)))) (&fail~1623545778~1217))) (&fail~1623545778~1217))))) (&fail~1623545778~1217)))) (&fail~1623545778~1217))) (&fail~1623545778~1217))))) (&fail~1623545778~1217))))) (&fail~1623545778~1217))) (&fail~1623545778~1217))) (&fail~1623545778~1217))))) (&fail~1623545778~1217)))))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1270 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1243 &temp~1623545778~1270)) (let ((&temp~1623545778~1253 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1253) (let ((&temp~1623545778~1269 (car &temp~1623545778~1253))) (if (equal? &temp~1623545778~1269 (quote "mktmp")) (let ((&temp~1623545778~1254 (cdr &temp~1623545778~1253))) (if (pair? &temp~1623545778~1254) (let ((&temp~1623545778~1266 (car &temp~1623545778~1254))) (if (pair? &temp~1623545778~1266) (let ((&temp~1623545778~1268 (car &temp~1623545778~1266))) (let ((&?a~1623545778~1244 &temp~1623545778~1268)) (let ((&temp~1623545778~1267 (cdr &temp~1623545778~1266))) (let ((&?b~1623545778~1245 &temp~1623545778~1267)) (let ((&temp~1623545778~1255 (cdr &temp~1623545778~1254))) (if (pair? &temp~1623545778~1255) (let ((&temp~1623545778~1265 (car &temp~1623545778~1255))) (let ((&?e0~1623545778~1246 &temp~1623545778~1265)) (let ((&temp~1623545778~1256 (cdr &temp~1623545778~1255))) (if (pair? &temp~1623545778~1256) (let ((&temp~1623545778~1264 (car &temp~1623545778~1256))) (if (list? &temp~1623545778~1264) (let ((&?arg~1623545778~1247 &temp~1623545778~1264)) (let ((&temp~1623545778~1257 (cdr &temp~1623545778~1256))) (if (pair? &temp~1623545778~1257) (let ((&temp~1623545778~1263 (car &temp~1623545778~1257))) (let ((&?bindings~1623545778~1248 &temp~1623545778~1263)) (let ((&temp~1623545778~1258 (cdr &temp~1623545778~1257))) (if (pair? &temp~1623545778~1258) (let ((&temp~1623545778~1262 (car &temp~1623545778~1258))) (if (list? &temp~1623545778~1262) (let ((&?tmp~1623545778~1249 &temp~1623545778~1262)) (let ((&temp~1623545778~1259 (cdr &temp~1623545778~1258))) (if (pair? &temp~1623545778~1259) (let ((&temp~1623545778~1261 (car &temp~1623545778~1259))) (let ((&?body~1623545778~1250 &temp~1623545778~1261)) (let ((&temp~1623545778~1260 (cdr &temp~1623545778~1259))) (if (null? &temp~1623545778~1260) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1252)) 0 (quote (core let-values))) (cons (quote "mktmp") (cons &?b~1623545778~1245 (cons &?e0~1623545778~1246 (cons (append &?arg~1623545778~1247 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~1252)) 0 (quote (core let-values))) (quote ()))) (cons &?bindings~1623545778~1248 (cons (append &?tmp~1623545778~1249 (cons (cons &?a~1623545778~1244 (cons (ex:syntax-rename (quote x) (quote ()) (quote (&env~1623545778~1252)) 0 (quote (core let-values))) (quote ()))) (quote ()))) (cons &?body~1623545778~1250 (quote ()))))))))) (&fail~1623545778~1216))))) (&fail~1623545778~1216)))) (&fail~1623545778~1216))) (&fail~1623545778~1216))))) (&fail~1623545778~1216)))) (&fail~1623545778~1216))) (&fail~1623545778~1216))))) (&fail~1623545778~1216))))))) (&fail~1623545778~1216))) (&fail~1623545778~1216))) (&fail~1623545778~1216))) (&fail~1623545778~1216))))) (&fail~1623545778~1216)))))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1294 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1271 &temp~1623545778~1294)) (let ((&temp~1623545778~1279 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1279) (let ((&temp~1623545778~1293 (car &temp~1623545778~1279))) (if (equal? &temp~1623545778~1293 (quote "mktmp")) (let ((&temp~1623545778~1280 (cdr &temp~1623545778~1279))) (if (pair? &temp~1623545778~1280) (let ((&temp~1623545778~1292 (car &temp~1623545778~1280))) (if (null? &temp~1623545778~1292) (let ((&temp~1623545778~1281 (cdr &temp~1623545778~1280))) (if (pair? &temp~1623545778~1281) (let ((&temp~1623545778~1291 (car &temp~1623545778~1281))) (let ((&?e0~1623545778~1272 &temp~1623545778~1291)) (let ((&temp~1623545778~1282 (cdr &temp~1623545778~1281))) (if (pair? &temp~1623545778~1282) (let ((&temp~1623545778~1290 (car &temp~1623545778~1282))) (let ((&?args~1623545778~1273 &temp~1623545778~1290)) (let ((&temp~1623545778~1283 (cdr &temp~1623545778~1282))) (if (pair? &temp~1623545778~1283) (let ((&temp~1623545778~1289 (car &temp~1623545778~1283))) (let ((&?bindings~1623545778~1274 &temp~1623545778~1289)) (let ((&temp~1623545778~1284 (cdr &temp~1623545778~1283))) (if (pair? &temp~1623545778~1284) (let ((&temp~1623545778~1288 (car &temp~1623545778~1284))) (let ((&?tmps~1623545778~1275 &temp~1623545778~1288)) (let ((&temp~1623545778~1285 (cdr &temp~1623545778~1284))) (if (pair? &temp~1623545778~1285) (let ((&temp~1623545778~1287 (car &temp~1623545778~1285))) (let ((&?body~1623545778~1276 &temp~1623545778~1287)) (let ((&temp~1623545778~1286 (cdr &temp~1623545778~1285))) (if (null? &temp~1623545778~1286) (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1623545778~1278)) 0 (quote (core let-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1278)) 0 (quote (core let-values))) (cons (quote ()) (cons &?e0~1623545778~1272 (quote ())))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1278)) 0 (quote (core let-values))) (cons &?args~1623545778~1273 (cons (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1278)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?bindings~1623545778~1274 (cons &?tmps~1623545778~1275 (cons &?body~1623545778~1276 (quote ())))))) (quote ())))) (quote ())))) (&fail~1623545778~1215))))) (&fail~1623545778~1215))))) (&fail~1623545778~1215))))) (&fail~1623545778~1215))))) (&fail~1623545778~1215))))) (&fail~1623545778~1215))) (&fail~1623545778~1215))) (&fail~1623545778~1215))) (&fail~1623545778~1215))) (&fail~1623545778~1215))))) (&fail~1623545778~1215)))))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1318 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1295 &temp~1623545778~1318)) (let ((&temp~1623545778~1303 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1303) (let ((&temp~1623545778~1317 (car &temp~1623545778~1303))) (if (equal? &temp~1623545778~1317 (quote "bind")) (let ((&temp~1623545778~1304 (cdr &temp~1623545778~1303))) (if (pair? &temp~1623545778~1304) (let ((&temp~1623545778~1310 (car &temp~1623545778~1304))) (if (pair? &temp~1623545778~1310) (let ((&temp~1623545778~1312 (car &temp~1623545778~1310))) (if (pair? &temp~1623545778~1312) (let ((&temp~1623545778~1316 (car &temp~1623545778~1312))) (let ((&?b0~1623545778~1296 &temp~1623545778~1316)) (let ((&temp~1623545778~1313 (cdr &temp~1623545778~1312))) (if (pair? &temp~1623545778~1313) (let ((&temp~1623545778~1315 (car &temp~1623545778~1313))) (let ((&?e0~1623545778~1297 &temp~1623545778~1315)) (let ((&temp~1623545778~1314 (cdr &temp~1623545778~1313))) (if (null? &temp~1623545778~1314) (let ((&temp~1623545778~1311 (cdr &temp~1623545778~1310))) (if (list? &temp~1623545778~1311) (let ((&?binding~1623545778~1298 &temp~1623545778~1311)) (let ((&temp~1623545778~1305 (cdr &temp~1623545778~1304))) (if (pair? &temp~1623545778~1305) (let ((&temp~1623545778~1309 (car &temp~1623545778~1305))) (let ((&?tmps~1623545778~1299 &temp~1623545778~1309)) (let ((&temp~1623545778~1306 (cdr &temp~1623545778~1305))) (if (pair? &temp~1623545778~1306) (let ((&temp~1623545778~1308 (car &temp~1623545778~1306))) (let ((&?body~1623545778~1300 &temp~1623545778~1308)) (let ((&temp~1623545778~1307 (cdr &temp~1623545778~1306))) (if (null? &temp~1623545778~1307) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1302)) 0 (quote (core let-values))) (cons (quote "mktmp") (cons &?b0~1623545778~1296 (cons &?e0~1623545778~1297 (cons (quote ()) (cons &?binding~1623545778~1298 (cons &?tmps~1623545778~1299 (cons &?body~1623545778~1300 (quote ()))))))))) (&fail~1623545778~1214))))) (&fail~1623545778~1214))))) (&fail~1623545778~1214)))) (&fail~1623545778~1214))) (&fail~1623545778~1214))))) (&fail~1623545778~1214))))) (&fail~1623545778~1214))) (&fail~1623545778~1214))) (&fail~1623545778~1214))) (&fail~1623545778~1214))) (&fail~1623545778~1214))))) (&fail~1623545778~1214)))))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1333 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1319 &temp~1623545778~1333)) (let ((&temp~1623545778~1324 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1324) (let ((&temp~1623545778~1332 (car &temp~1623545778~1324))) (if (equal? &temp~1623545778~1332 (quote "bind")) (let ((&temp~1623545778~1325 (cdr &temp~1623545778~1324))) (if (pair? &temp~1623545778~1325) (let ((&temp~1623545778~1331 (car &temp~1623545778~1325))) (if (null? &temp~1623545778~1331) (let ((&temp~1623545778~1326 (cdr &temp~1623545778~1325))) (if (pair? &temp~1623545778~1326) (let ((&temp~1623545778~1330 (car &temp~1623545778~1326))) (let ((&?tmps~1623545778~1320 &temp~1623545778~1330)) (let ((&temp~1623545778~1327 (cdr &temp~1623545778~1326))) (if (pair? &temp~1623545778~1327) (let ((&temp~1623545778~1329 (car &temp~1623545778~1327))) (let ((&?body~1623545778~1321 &temp~1623545778~1329)) (let ((&temp~1623545778~1328 (cdr &temp~1623545778~1327))) (if (null? &temp~1623545778~1328) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1323)) 0 (quote (core let-values))) (cons &?tmps~1623545778~1320 (cons &?body~1623545778~1321 (quote ())))) (&fail~1623545778~1213))))) (&fail~1623545778~1213))))) (&fail~1623545778~1213))) (&fail~1623545778~1213))) (&fail~1623545778~1213))) (&fail~1623545778~1213))) (&fail~1623545778~1213))))) (&fail~1623545778~1213)))))) (if (pair? &input~1623545778~1211) (let ((&temp~1623545778~1345 (car &input~1623545778~1211))) (let ((&dummy~1623545778~1334 &temp~1623545778~1345)) (let ((&temp~1623545778~1340 (cdr &input~1623545778~1211))) (if (pair? &temp~1623545778~1340) (let ((&temp~1623545778~1344 (car &temp~1623545778~1340))) (if (list? &temp~1623545778~1344) (let ((&?binding~1623545778~1335 &temp~1623545778~1344)) (let ((&temp~1623545778~1341 (cdr &temp~1623545778~1340))) (if (pair? &temp~1623545778~1341) (let ((&temp~1623545778~1343 (car &temp~1623545778~1341))) (let ((&?body0~1623545778~1336 &temp~1623545778~1343)) (let ((&temp~1623545778~1342 (cdr &temp~1623545778~1341))) (if (list? &temp~1623545778~1342) (let ((&?body1~1623545778~1337 &temp~1623545778~1342)) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1339)) 0 (quote (core let-values))) (cons (quote "bind") (cons &?binding~1623545778~1335 (cons (quote ()) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1339)) 0 (quote (core let-values))) (cons &?body0~1623545778~1336 &?body1~1623545778~1337)) (quote ()))))))) (&fail~1623545778~1212))))) (&fail~1623545778~1212)))) (&fail~1623545778~1212))) (&fail~1623545778~1212))))) (&fail~1623545778~1212)))))) (ex:register-macro! (quote &let*-values~1623545778~1346) (lambda (&x~1623545778~1349) (let ((&input~1623545778~1351 &x~1623545778~1349)) (let ((&fail~1623545778~1352 (lambda () (let ((&fail~1623545778~1353 (lambda () (ex:invalid-form &input~1623545778~1351)))) (if (pair? &input~1623545778~1351) (let ((&temp~1623545778~1368 (car &input~1623545778~1351))) (let ((&dummy~1623545778~1354 &temp~1623545778~1368)) (let ((&temp~1623545778~1361 (cdr &input~1623545778~1351))) (if (pair? &temp~1623545778~1361) (let ((&temp~1623545778~1365 (car &temp~1623545778~1361))) (if (pair? &temp~1623545778~1365) (let ((&temp~1623545778~1367 (car &temp~1623545778~1365))) (let ((&?binding0~1623545778~1355 &temp~1623545778~1367)) (let ((&temp~1623545778~1366 (cdr &temp~1623545778~1365))) (if (list? &temp~1623545778~1366) (let ((&?binding1~1623545778~1356 &temp~1623545778~1366)) (let ((&temp~1623545778~1362 (cdr &temp~1623545778~1361))) (if (pair? &temp~1623545778~1362) (let ((&temp~1623545778~1364 (car &temp~1623545778~1362))) (let ((&?body0~1623545778~1357 &temp~1623545778~1364)) (let ((&temp~1623545778~1363 (cdr &temp~1623545778~1362))) (if (list? &temp~1623545778~1363) (let ((&?body1~1623545778~1358 &temp~1623545778~1363)) (cons (ex:syntax-rename (quote let-values) (quote ()) (quote (&env~1623545778~1360)) 0 (quote (core let-values))) (cons (cons &?binding0~1623545778~1355 (quote ())) (cons (cons (ex:syntax-rename (quote let*-values) (quote ()) (quote (&env~1623545778~1360)) 0 (quote (core let-values))) (cons &?binding1~1623545778~1356 (cons &?body0~1623545778~1357 &?body1~1623545778~1358))) (quote ()))))) (&fail~1623545778~1353))))) (&fail~1623545778~1353)))) (&fail~1623545778~1353))))) (&fail~1623545778~1353))) (&fail~1623545778~1353))))) (&fail~1623545778~1353)))))) (if (pair? &input~1623545778~1351) (let ((&temp~1623545778~1379 (car &input~1623545778~1351))) (let ((&dummy~1623545778~1369 &temp~1623545778~1379)) (let ((&temp~1623545778~1374 (cdr &input~1623545778~1351))) (if (pair? &temp~1623545778~1374) (let ((&temp~1623545778~1378 (car &temp~1623545778~1374))) (if (null? &temp~1623545778~1378) (let ((&temp~1623545778~1375 (cdr &temp~1623545778~1374))) (if (pair? &temp~1623545778~1375) (let ((&temp~1623545778~1377 (car &temp~1623545778~1375))) (let ((&?body0~1623545778~1370 &temp~1623545778~1377)) (let ((&temp~1623545778~1376 (cdr &temp~1623545778~1375))) (if (list? &temp~1623545778~1376) (let ((&?body1~1623545778~1371 &temp~1623545778~1376)) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1373)) 0 (quote (core let-values))) (cons &?body0~1623545778~1370 &?body1~1623545778~1371))) (&fail~1623545778~1352))))) (&fail~1623545778~1352))) (&fail~1623545778~1352))) (&fail~1623545778~1352))))) (&fail~1623545778~1352)))))) (values)) (lambda () (values)) (quote &build~1623545778~1380))) (values))
(begin (ex:register-library! (ex:make-library (quote (core define-values)) (lambda () (ex:uncompress (quote (((&env~1623545778~1437 0 1 2 3) (&env~1623545778~1425 4 1 2 3) (&env~1623545778~1408 5 1 2 3) (&env~1623545778~1395 6 1 2 3)) (6 (((dummy &c~1623545778~1382) . #f) ((var) . #f) ((expr) . #f))) (5 (((dummy &c~1623545778~1382) . #f) ((var0) . #f) ((var1) . #f) ((varn) . #f) ((expr) . #f))) (4 (((dummy &c~1623545778~1382) . #f) ((var) . #f) ((expr) . #f))) (3 (((define-values) macro &define-values~1623545778~1381 (0) #f (core define-values)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((syntax-rules) macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) ((letrec*) macro &letrec*~1623545778~179 (0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0) #f (core let)) ((let) macro &let~1623545778~100 (0) #f (core let)) ((list) variable list (0) #f ()) ((set-cdr!) variable set-cdr! (0) #f ()) ((cddr) variable cddr (0) #f ()) ((cadr) variable cadr (0) #f ()) ((car) variable car (0) #f ()) ((call-with-values) variable call-with-values (0) #f ()))) (2 (((x &c~1623545778~1382) variable &x~1623545778~1384 (0) #f (core define-values)))) (1 ()) (0 (((dummy &c~1623545778~1382) . #f) ((expr) . #f))))))) (quote ((define-values macro &define-values~1623545778~1381 (0) #f (core define-values)))) (quote (((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0))) (quote (&build~1623545778~203 &build~1623545778~99 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &define-values~1623545778~1381) (lambda (&x~1623545778~1384) (let ((&input~1623545778~1386 &x~1623545778~1384)) (let ((&fail~1623545778~1387 (lambda () (let ((&fail~1623545778~1388 (lambda () (let ((&fail~1623545778~1389 (lambda () (let ((&fail~1623545778~1390 (lambda () (ex:invalid-form &input~1623545778~1386)))) (if (pair? &input~1623545778~1386) (let ((&temp~1623545778~1401 (car &input~1623545778~1386))) (let ((&dummy~1623545778~1391 &temp~1623545778~1401)) (let ((&temp~1623545778~1396 (cdr &input~1623545778~1386))) (if (pair? &temp~1623545778~1396) (let ((&temp~1623545778~1400 (car &temp~1623545778~1396))) (let ((&var~1623545778~1392 &temp~1623545778~1400)) (let ((&temp~1623545778~1397 (cdr &temp~1623545778~1396))) (if (pair? &temp~1623545778~1397) (let ((&temp~1623545778~1399 (car &temp~1623545778~1397))) (let ((&expr~1623545778~1393 &temp~1623545778~1399)) (let ((&temp~1623545778~1398 (cdr &temp~1623545778~1397))) (if (null? &temp~1623545778~1398) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1395)) 0 (quote (core define-values))) (cons &var~1623545778~1392 (cons (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1623545778~1395)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1395)) 0 (quote (core define-values))) (cons (quote ()) (cons &expr~1623545778~1393 (quote ())))) (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1623545778~1395)) 0 (quote (core define-values))) (quote ())))) (quote ())))) (&fail~1623545778~1390))))) (&fail~1623545778~1390))))) (&fail~1623545778~1390))))) (&fail~1623545778~1390)))))) (if (pair? &input~1623545778~1386) (let ((&temp~1623545778~1420 (car &input~1623545778~1386))) (let ((&dummy~1623545778~1402 &temp~1623545778~1420)) (let ((&temp~1623545778~1409 (cdr &input~1623545778~1386))) (if (pair? &temp~1623545778~1409) (let ((&temp~1623545778~1413 (car &temp~1623545778~1409))) (if (pair? &temp~1623545778~1413) (let ((&temp~1623545778~1419 (car &temp~1623545778~1413))) (let ((&var0~1623545778~1403 &temp~1623545778~1419)) (let ((&temp~1623545778~1414 (cdr &temp~1623545778~1413))) (if (>= (ex:dotted-length &temp~1623545778~1414) 1) (let ((&temp~1623545778~1418 (ex:dotted-butlast &temp~1623545778~1414 1))) (if (list? &temp~1623545778~1418) (let ((&var1~1623545778~1404 &temp~1623545778~1418)) (let ((&temp~1623545778~1415 (ex:dotted-last &temp~1623545778~1414 1))) (if (pair? &temp~1623545778~1415) (let ((&temp~1623545778~1417 (car &temp~1623545778~1415))) (let ((&varn~1623545778~1405 &temp~1623545778~1417)) (let ((&temp~1623545778~1416 (cdr &temp~1623545778~1415))) (if (null? &temp~1623545778~1416) (let ((&temp~1623545778~1410 (cdr &temp~1623545778~1409))) (if (pair? &temp~1623545778~1410) (let ((&temp~1623545778~1412 (car &temp~1623545778~1410))) (let ((&expr~1623545778~1406 &temp~1623545778~1412)) (let ((&temp~1623545778~1411 (cdr &temp~1623545778~1410))) (if (null? &temp~1623545778~1411) (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (cons (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (quote ()) (cons &expr~1623545778~1406 (quote ())))) (cons (ex:syntax-rename (quote list) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (quote ())))) (quote ())))) (append (map (lambda (&var1~1623545778~1404) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var1~1623545778~1404 (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (cons (ex:syntax-rename (quote v) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote cadr) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (quote ()))) (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote set-cdr!) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (cons (cons (ex:syntax-rename (quote cddr) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (quote ()))) (quote ())))) (cons (ex:syntax-rename (quote v) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (quote ()))))) (quote ()))))) &var1~1623545778~1404) (cons (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &varn~1623545778~1405 (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (cons (ex:syntax-rename (quote v) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote cadr) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (quote ()))) (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote set!) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (cons (cons (ex:syntax-rename (quote car) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (cons &var0~1623545778~1403 (quote ()))) (quote ())))) (cons (ex:syntax-rename (quote v) (quote ()) (quote (&env~1623545778~1408)) 0 (quote (core define-values))) (quote ()))))) (quote ())))) (quote ()))))) (&fail~1623545778~1389))))) (&fail~1623545778~1389))) (&fail~1623545778~1389))))) (&fail~1623545778~1389)))) (&fail~1623545778~1389))) (&fail~1623545778~1389))))) (&fail~1623545778~1389))) (&fail~1623545778~1389))))) (&fail~1623545778~1389)))))) (if (pair? &input~1623545778~1386) (let ((&temp~1623545778~1433 (car &input~1623545778~1386))) (let ((&dummy~1623545778~1421 &temp~1623545778~1433)) (let ((&temp~1623545778~1426 (cdr &input~1623545778~1386))) (if (pair? &temp~1623545778~1426) (let ((&temp~1623545778~1430 (car &temp~1623545778~1426))) (if (pair? &temp~1623545778~1430) (let ((&temp~1623545778~1432 (car &temp~1623545778~1430))) (let ((&var~1623545778~1422 &temp~1623545778~1432)) (let ((&temp~1623545778~1431 (cdr &temp~1623545778~1430))) (if (null? &temp~1623545778~1431) (let ((&temp~1623545778~1427 (cdr &temp~1623545778~1426))) (if (pair? &temp~1623545778~1427) (let ((&temp~1623545778~1429 (car &temp~1623545778~1427))) (let ((&expr~1623545778~1423 &temp~1623545778~1429)) (let ((&temp~1623545778~1428 (cdr &temp~1623545778~1427))) (if (null? &temp~1623545778~1428) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1425)) 0 (quote (core define-values))) (cons &var~1623545778~1422 (cons &expr~1623545778~1423 (quote ())))) (&fail~1623545778~1388))))) (&fail~1623545778~1388))) (&fail~1623545778~1388))))) (&fail~1623545778~1388))) (&fail~1623545778~1388))))) (&fail~1623545778~1388)))))) (if (pair? &input~1623545778~1386) (let ((&temp~1623545778~1443 (car &input~1623545778~1386))) (let ((&dummy~1623545778~1434 &temp~1623545778~1443)) (let ((&temp~1623545778~1438 (cdr &input~1623545778~1386))) (if (pair? &temp~1623545778~1438) (let ((&temp~1623545778~1442 (car &temp~1623545778~1438))) (if (null? &temp~1623545778~1442) (let ((&temp~1623545778~1439 (cdr &temp~1623545778~1438))) (if (pair? &temp~1623545778~1439) (let ((&temp~1623545778~1441 (car &temp~1623545778~1439))) (let ((&expr~1623545778~1435 &temp~1623545778~1441)) (let ((&temp~1623545778~1440 (cdr &temp~1623545778~1439))) (if (null? &temp~1623545778~1440) (cons (ex:syntax-rename (quote define) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (ex:syntax-rename (quote dummy) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote call-with-values) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (quote ()) (cons &expr~1623545778~1435 (quote ())))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1623545778~1437)) 0 (quote (core define-values))) (cons (quote #f) (quote ())))) (quote ())))) (quote ())))) (&fail~1623545778~1387))))) (&fail~1623545778~1387))) (&fail~1623545778~1387))) (&fail~1623545778~1387))))) (&fail~1623545778~1387)))))) (values)) (lambda () (values)) (quote &build~1623545778~1444))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs control)) (lambda () (ex:uncompress (quote (((&env~1623545778~1662 0 1 2 3) (&env~1623545778~1645 4 1 2 3) (&env~1623545778~1620 5 1 2 3) (&env~1623545778~1597 6 1 2 3) (&env~1623545778~1570 7 8 9 3) (&env~1623545778~1556 10 8 9 3) (&env~1623545778~1528 11 12 13 14 15 3) (&env~1623545778~1524 16 12 13 14 15 3) (&env~1623545778~1476 17 18 19 3) (&env~1623545778~1457 20 21 22 3)) (22 (((x &c~1623545778~1446) variable &x~1623545778~1448 (0) #f (rnrs control)))) (21 ()) (20 (((dummy &c~1623545778~1446) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (19 (((x &c~1623545778~1465) variable &x~1623545778~1467 (0) #f (rnrs control)))) (18 ()) (17 (((dummy &c~1623545778~1465) . #f) ((test) . #f) ((result1) . #f) ((result2) . #f))) (16 (((e1) . #f) ((e2) . #f))) (15 (((orig-x) variable &orig-x~1623545778~1485 (1) #f (rnrs control)))) (14 ()) (13 (((var) . #f) ((init) . #f) ((step) . #f) ((e0) . #f) ((e1) . #f) ((c) . #f))) (12 (((step) . #f))) (11 ()) (10 (((dummy &c~1623545778~1544) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (9 (((x &c~1623545778~1544) variable &x~1623545778~1546 (0) #f (rnrs control)))) (8 ()) (7 (((dummy &c~1623545778~1544) . #f) ((fmls) . #f) ((b1) . #f) ((b2) . #f))) (6 (((dummy &c~1623545778~1580) . #f) ((args) . #f) ((n) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (5 (((dummy &c~1623545778~1580) . #f) ((args) . #f) ((n) . #f) ((x1) . #f) ((x2) . #f) ((r) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (4 (((dummy &c~1623545778~1580) . #f) ((args) . #f) ((n) . #f) ((x) . #f) ((b1) . #f) ((b2) . #f) ((more) . #f))) (3 (((case-lambda-help) macro &case-lambda-help~1623545778~1579 (0) #f (rnrs control)) ((case-lambda) macro &case-lambda~1623545778~1543 (0) #f (rnrs control)) ((do) macro &do~1623545778~1483 (0) #f (rnrs control)) ((unless) macro &unless~1623545778~1464 (0) #f (rnrs control)) ((when) macro &when~1623545778~1445 (0) #f (rnrs control)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro &letrec*~1623545778~179 (1 0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (1 0) #f (core let)) ((let) macro &let~1623545778~100 (1 0) #f (core let)) ((with-syntax) macro &with-syntax~1623545778~3 (1) #f (core with-syntax)) ((syntax-rules) macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) ((apply) variable apply (1 0) #f ()) ((>=) variable >= (1 0) #f ()) ((=) variable = (1 0) #f ()) ((assertion-violation) variable assertion-violation (1 0) #f ()) ((length) variable length (1 0) #f ()) ((map) variable map (1 0) #f ()) ((not) variable not (1 0) #f ()))) (2 (((x &c~1623545778~1580) variable &x~1623545778~1582 (0) #f (rnrs control)))) (1 ()) (0 (((dummy &c~1623545778~1580) . #f) ((args) . #f) ((n) . #f))))))) (quote ((when macro &when~1623545778~1445 (0) #f (rnrs control)) (unless macro &unless~1623545778~1464 (0) #f (rnrs control)) (do macro &do~1623545778~1483 (0) #f (rnrs control)) (case-lambda macro &case-lambda~1623545778~1543 (0) #f (rnrs control)))) (quote (((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0))) (quote (&build~1623545778~99 &build~1623545778~57 &build~1623545778~203 &build~1623545778~2)) (lambda () (ex:register-macro! (quote &when~1623545778~1445) (lambda (&x~1623545778~1448) (let ((&input~1623545778~1450 &x~1623545778~1448)) (let ((&fail~1623545778~1451 (lambda () (ex:invalid-form &input~1623545778~1450)))) (if (pair? &input~1623545778~1450) (let ((&temp~1623545778~1463 (car &input~1623545778~1450))) (let ((&dummy~1623545778~1452 &temp~1623545778~1463)) (let ((&temp~1623545778~1458 (cdr &input~1623545778~1450))) (if (pair? &temp~1623545778~1458) (let ((&temp~1623545778~1462 (car &temp~1623545778~1458))) (let ((&test~1623545778~1453 &temp~1623545778~1462)) (let ((&temp~1623545778~1459 (cdr &temp~1623545778~1458))) (if (pair? &temp~1623545778~1459) (let ((&temp~1623545778~1461 (car &temp~1623545778~1459))) (let ((&result1~1623545778~1454 &temp~1623545778~1461)) (let ((&temp~1623545778~1460 (cdr &temp~1623545778~1459))) (if (list? &temp~1623545778~1460) (let ((&result2~1623545778~1455 &temp~1623545778~1460)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1457)) 0 (quote (rnrs control))) (cons &test~1623545778~1453 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1457)) 0 (quote (rnrs control))) (cons &result1~1623545778~1454 &result2~1623545778~1455)) (quote ()))))) (&fail~1623545778~1451))))) (&fail~1623545778~1451))))) (&fail~1623545778~1451))))) (&fail~1623545778~1451)))))) (ex:register-macro! (quote &unless~1623545778~1464) (lambda (&x~1623545778~1467) (let ((&input~1623545778~1469 &x~1623545778~1467)) (let ((&fail~1623545778~1470 (lambda () (ex:invalid-form &input~1623545778~1469)))) (if (pair? &input~1623545778~1469) (let ((&temp~1623545778~1482 (car &input~1623545778~1469))) (let ((&dummy~1623545778~1471 &temp~1623545778~1482)) (let ((&temp~1623545778~1477 (cdr &input~1623545778~1469))) (if (pair? &temp~1623545778~1477) (let ((&temp~1623545778~1481 (car &temp~1623545778~1477))) (let ((&test~1623545778~1472 &temp~1623545778~1481)) (let ((&temp~1623545778~1478 (cdr &temp~1623545778~1477))) (if (pair? &temp~1623545778~1478) (let ((&temp~1623545778~1480 (car &temp~1623545778~1478))) (let ((&result1~1623545778~1473 &temp~1623545778~1480)) (let ((&temp~1623545778~1479 (cdr &temp~1623545778~1478))) (if (list? &temp~1623545778~1479) (let ((&result2~1623545778~1474 &temp~1623545778~1479)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1476)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote not) (quote ()) (quote (&env~1623545778~1476)) 0 (quote (rnrs control))) (cons &test~1623545778~1472 (quote ()))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1476)) 0 (quote (rnrs control))) (cons &result1~1623545778~1473 &result2~1623545778~1474)) (quote ()))))) (&fail~1623545778~1470))))) (&fail~1623545778~1470))))) (&fail~1623545778~1470))))) (&fail~1623545778~1470)))))) (ex:register-macro! (quote &do~1623545778~1483) (lambda (&orig-x~1623545778~1485) (let ((&input~1623545778~1487 &orig-x~1623545778~1485)) (let ((&fail~1623545778~1488 (lambda () (ex:invalid-form &input~1623545778~1487)))) (if (pair? &input~1623545778~1487) (let ((&temp~1623545778~1542 (car &input~1623545778~1487))) (let ((&temp~1623545778~1529 (cdr &input~1623545778~1487))) (if (pair? &temp~1623545778~1529) (let ((&temp~1623545778~1535 (car &temp~1623545778~1529))) (ex:map-while (lambda (&temp~1623545778~1535) (if (pair? &temp~1623545778~1535) (let ((&temp~1623545778~1541 (car &temp~1623545778~1535))) (let ((&var~1623545778~1489 &temp~1623545778~1541)) (let ((&temp~1623545778~1538 (cdr &temp~1623545778~1535))) (if (pair? &temp~1623545778~1538) (let ((&temp~1623545778~1540 (car &temp~1623545778~1538))) (let ((&init~1623545778~1490 &temp~1623545778~1540)) (let ((&temp~1623545778~1539 (cdr &temp~1623545778~1538))) (let ((&step~1623545778~1491 &temp~1623545778~1539)) (list &var~1623545778~1489 &init~1623545778~1490 &step~1623545778~1491))))) #f)))) #f)) &temp~1623545778~1535 (lambda (&cols~1623545778~1536 &rest~1623545778~1537) (if (null? &rest~1623545778~1537) (apply (lambda (&var~1623545778~1489 &init~1623545778~1490 &step~1623545778~1491) (let ((&temp~1623545778~1530 (cdr &temp~1623545778~1529))) (if (pair? &temp~1623545778~1530) (let ((&temp~1623545778~1532 (car &temp~1623545778~1530))) (if (pair? &temp~1623545778~1532) (let ((&temp~1623545778~1534 (car &temp~1623545778~1532))) (let ((&e0~1623545778~1492 &temp~1623545778~1534)) (let ((&temp~1623545778~1533 (cdr &temp~1623545778~1532))) (if (list? &temp~1623545778~1533) (let ((&e1~1623545778~1493 &temp~1623545778~1533)) (let ((&temp~1623545778~1531 (cdr &temp~1623545778~1530))) (if (list? &temp~1623545778~1531) (let ((&c~1623545778~1494 &temp~1623545778~1531)) (let ((&input~1623545778~1497 (map (lambda (&v~1623545778~1499 &s~1623545778~1500) (let ((&input~1623545778~1502 &s~1623545778~1500)) (let ((&fail~1623545778~1503 (lambda () (let ((&fail~1623545778~1504 (lambda () (let ((&fail~1623545778~1505 (lambda () (ex:invalid-form &input~1623545778~1502)))) (ex:syntax-violation (quote do) "Invalid step" &orig-x~1623545778~1485 &s~1623545778~1500))))) (if (pair? &input~1623545778~1502) (let ((&temp~1623545778~1510 (car &input~1623545778~1502))) (let ((&e~1623545778~1507 &temp~1623545778~1510)) (let ((&temp~1623545778~1509 (cdr &input~1623545778~1502))) (if (null? &temp~1623545778~1509) &e~1623545778~1507 (&fail~1623545778~1504))))) (&fail~1623545778~1504)))))) (if (null? &input~1623545778~1502) &v~1623545778~1499 (&fail~1623545778~1503))))) &var~1623545778~1489 &step~1623545778~1491))) (let ((&fail~1623545778~1513 (lambda () (ex:invalid-form &input~1623545778~1497)))) (if (list? &input~1623545778~1497) (let ((&step~1623545778~1514 &input~1623545778~1497)) (begin (let ((&input~1623545778~1517 &e1~1623545778~1493)) (let ((&fail~1623545778~1519 (lambda () (let ((&fail~1623545778~1520 (lambda () (ex:invalid-form &input~1623545778~1517)))) (if (pair? &input~1623545778~1517) (let ((&temp~1623545778~1526 (car &input~1623545778~1517))) (let ((&e1~1623545778~1521 &temp~1623545778~1526)) (let ((&temp~1623545778~1525 (cdr &input~1623545778~1517))) (if (list? &temp~1623545778~1525) (let ((&e2~1623545778~1522 &temp~1623545778~1525)) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) (cons (if (= (length &var~1623545778~1489) (length &init~1623545778~1490)) (map (lambda (&var~1623545778~1489 &init~1623545778~1490) (cons &var~1623545778~1489 (cons &init~1623545778~1490 (quote ())))) &var~1623545778~1489 &init~1623545778~1490) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((var init) ...)) (list &var~1623545778~1489 &init~1623545778~1490))) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) (cons &e0~1623545778~1492 (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) (cons &e1~1623545778~1521 &e2~1623545778~1522)) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) (append &c~1623545778~1494 (cons (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1623545778~1524)) 0 (quote (rnrs control))) &step~1623545778~1514) (quote ())))) (quote ()))))) (quote ())))))) (&fail~1623545778~1520))))) (&fail~1623545778~1520)))))) (if (null? &input~1623545778~1517) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) (cons (if (= (length &var~1623545778~1489) (length &init~1623545778~1490)) (map (lambda (&var~1623545778~1489 &init~1623545778~1490) (cons &var~1623545778~1489 (cons &init~1623545778~1490 (quote ())))) &var~1623545778~1489 &init~1623545778~1490) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((var init) ...)) (list &var~1623545778~1489 &init~1623545778~1490))) (cons (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote not) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) (cons &e0~1623545778~1492 (quote ()))) (cons (cons (ex:syntax-rename (quote begin) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) (append &c~1623545778~1494 (cons (cons (ex:syntax-rename (quote do) (quote ()) (quote (&env~1623545778~1528)) 0 (quote (rnrs control))) &step~1623545778~1514) (quote ())))) (quote ())))) (quote ()))))) (&fail~1623545778~1519)))))) (&fail~1623545778~1513))))) (&fail~1623545778~1488)))) (&fail~1623545778~1488))))) (&fail~1623545778~1488))) (&fail~1623545778~1488)))) (if (null? &cols~1623545778~1536) (quote (() () ())) (apply map list &cols~1623545778~1536))) (&fail~1623545778~1488))))) (&fail~1623545778~1488)))) (&fail~1623545778~1488)))))) (ex:register-macro! (quote &case-lambda~1623545778~1543) (lambda (&x~1623545778~1546) (let ((&input~1623545778~1548 &x~1623545778~1546)) (let ((&fail~1623545778~1549 (lambda () (let ((&fail~1623545778~1550 (lambda () (ex:invalid-form &input~1623545778~1548)))) (if (pair? &input~1623545778~1548) (let ((&temp~1623545778~1564 (car &input~1623545778~1548))) (let ((&dummy~1623545778~1551 &temp~1623545778~1564)) (let ((&temp~1623545778~1557 (cdr &input~1623545778~1548))) (ex:map-while (lambda (&temp~1623545778~1557) (if (pair? &temp~1623545778~1557) (let ((&temp~1623545778~1563 (car &temp~1623545778~1557))) (let ((&fmls~1623545778~1552 &temp~1623545778~1563)) (let ((&temp~1623545778~1560 (cdr &temp~1623545778~1557))) (if (pair? &temp~1623545778~1560) (let ((&temp~1623545778~1562 (car &temp~1623545778~1560))) (let ((&b1~1623545778~1553 &temp~1623545778~1562)) (let ((&temp~1623545778~1561 (cdr &temp~1623545778~1560))) (if (list? &temp~1623545778~1561) (let ((&b2~1623545778~1554 &temp~1623545778~1561)) (list &fmls~1623545778~1552 &b1~1623545778~1553 &b2~1623545778~1554)) #f)))) #f)))) #f)) &temp~1623545778~1557 (lambda (&cols~1623545778~1558 &rest~1623545778~1559) (if (null? &rest~1623545778~1559) (apply (lambda (&fmls~1623545778~1552 &b1~1623545778~1553 &b2~1623545778~1554) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (cons (cons (ex:syntax-rename (quote n) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (quote ()))) (quote ()))) (quote ())) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote args) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (cons (ex:syntax-rename (quote n) (quote ()) (quote (&env~1623545778~1556)) 0 (quote (rnrs control))) (if (= (length &fmls~1623545778~1552) (length &b1~1623545778~1553) (length &b2~1623545778~1554)) (map (lambda (&fmls~1623545778~1552 &b1~1623545778~1553 &b2~1623545778~1554) (cons &fmls~1623545778~1552 (cons &b1~1623545778~1553 &b2~1623545778~1554))) &fmls~1623545778~1552 &b1~1623545778~1553 &b2~1623545778~1554) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((fmls b1 b2 ...) ...)) (list &fmls~1623545778~1552 &b1~1623545778~1553 &b2~1623545778~1554)))))) (quote ())))) (quote ()))))) (if (null? &cols~1623545778~1558) (quote (() () ())) (apply map list &cols~1623545778~1558))) (&fail~1623545778~1550))))))) (&fail~1623545778~1550)))))) (if (pair? &input~1623545778~1548) (let ((&temp~1623545778~1578 (car &input~1623545778~1548))) (let ((&dummy~1623545778~1565 &temp~1623545778~1578)) (let ((&temp~1623545778~1571 (cdr &input~1623545778~1548))) (if (pair? &temp~1623545778~1571) (let ((&temp~1623545778~1573 (car &temp~1623545778~1571))) (if (pair? &temp~1623545778~1573) (let ((&temp~1623545778~1577 (car &temp~1623545778~1573))) (let ((&fmls~1623545778~1566 &temp~1623545778~1577)) (let ((&temp~1623545778~1574 (cdr &temp~1623545778~1573))) (if (pair? &temp~1623545778~1574) (let ((&temp~1623545778~1576 (car &temp~1623545778~1574))) (let ((&b1~1623545778~1567 &temp~1623545778~1576)) (let ((&temp~1623545778~1575 (cdr &temp~1623545778~1574))) (if (list? &temp~1623545778~1575) (let ((&b2~1623545778~1568 &temp~1623545778~1575)) (let ((&temp~1623545778~1572 (cdr &temp~1623545778~1571))) (if (null? &temp~1623545778~1572) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1570)) 0 (quote (rnrs control))) (cons &fmls~1623545778~1566 (cons &b1~1623545778~1567 &b2~1623545778~1568))) (&fail~1623545778~1549)))) (&fail~1623545778~1549))))) (&fail~1623545778~1549))))) (&fail~1623545778~1549))) (&fail~1623545778~1549))))) (&fail~1623545778~1549)))))) (ex:register-macro! (quote &case-lambda-help~1623545778~1579) (lambda (&x~1623545778~1582) (let ((&input~1623545778~1584 &x~1623545778~1582)) (let ((&fail~1623545778~1585 (lambda () (let ((&fail~1623545778~1586 (lambda () (let ((&fail~1623545778~1587 (lambda () (let ((&fail~1623545778~1588 (lambda () (ex:invalid-form &input~1623545778~1584)))) (if (pair? &input~1623545778~1584) (let ((&temp~1623545778~1609 (car &input~1623545778~1584))) (let ((&dummy~1623545778~1589 &temp~1623545778~1609)) (let ((&temp~1623545778~1598 (cdr &input~1623545778~1584))) (if (pair? &temp~1623545778~1598) (let ((&temp~1623545778~1608 (car &temp~1623545778~1598))) (let ((&args~1623545778~1590 &temp~1623545778~1608)) (let ((&temp~1623545778~1599 (cdr &temp~1623545778~1598))) (if (pair? &temp~1623545778~1599) (let ((&temp~1623545778~1607 (car &temp~1623545778~1599))) (let ((&n~1623545778~1591 &temp~1623545778~1607)) (let ((&temp~1623545778~1600 (cdr &temp~1623545778~1599))) (if (pair? &temp~1623545778~1600) (let ((&temp~1623545778~1602 (car &temp~1623545778~1600))) (if (pair? &temp~1623545778~1602) (let ((&temp~1623545778~1606 (car &temp~1623545778~1602))) (let ((&r~1623545778~1592 &temp~1623545778~1606)) (let ((&temp~1623545778~1603 (cdr &temp~1623545778~1602))) (if (pair? &temp~1623545778~1603) (let ((&temp~1623545778~1605 (car &temp~1623545778~1603))) (let ((&b1~1623545778~1593 &temp~1623545778~1605)) (let ((&temp~1623545778~1604 (cdr &temp~1623545778~1603))) (if (list? &temp~1623545778~1604) (let ((&b2~1623545778~1594 &temp~1623545778~1604)) (let ((&temp~1623545778~1601 (cdr &temp~1623545778~1600))) (if (list? &temp~1623545778~1601) (let ((&more~1623545778~1595 &temp~1623545778~1601)) (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1623545778~1597)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1597)) 0 (quote (rnrs control))) (cons &r~1623545778~1592 (cons &b1~1623545778~1593 &b2~1623545778~1594))) (cons &args~1623545778~1590 (quote ()))))) (&fail~1623545778~1588)))) (&fail~1623545778~1588))))) (&fail~1623545778~1588))))) (&fail~1623545778~1588))) (&fail~1623545778~1588))))) (&fail~1623545778~1588))))) (&fail~1623545778~1588))))) (&fail~1623545778~1588)))))) (if (pair? &input~1623545778~1584) (let ((&temp~1623545778~1636 (car &input~1623545778~1584))) (let ((&dummy~1623545778~1610 &temp~1623545778~1636)) (let ((&temp~1623545778~1621 (cdr &input~1623545778~1584))) (if (pair? &temp~1623545778~1621) (let ((&temp~1623545778~1635 (car &temp~1623545778~1621))) (let ((&args~1623545778~1611 &temp~1623545778~1635)) (let ((&temp~1623545778~1622 (cdr &temp~1623545778~1621))) (if (pair? &temp~1623545778~1622) (let ((&temp~1623545778~1634 (car &temp~1623545778~1622))) (let ((&n~1623545778~1612 &temp~1623545778~1634)) (let ((&temp~1623545778~1623 (cdr &temp~1623545778~1622))) (if (pair? &temp~1623545778~1623) (let ((&temp~1623545778~1625 (car &temp~1623545778~1623))) (if (pair? &temp~1623545778~1625) (let ((&temp~1623545778~1629 (car &temp~1623545778~1625))) (if (pair? &temp~1623545778~1629) (let ((&temp~1623545778~1633 (car &temp~1623545778~1629))) (let ((&x1~1623545778~1613 &temp~1623545778~1633)) (let ((&temp~1623545778~1630 (cdr &temp~1623545778~1629))) (if (>= (ex:dotted-length &temp~1623545778~1630) 0) (let ((&temp~1623545778~1632 (ex:dotted-butlast &temp~1623545778~1630 0))) (if (list? &temp~1623545778~1632) (let ((&x2~1623545778~1614 &temp~1623545778~1632)) (let ((&temp~1623545778~1631 (ex:dotted-last &temp~1623545778~1630 0))) (let ((&r~1623545778~1615 &temp~1623545778~1631)) (let ((&temp~1623545778~1626 (cdr &temp~1623545778~1625))) (if (pair? &temp~1623545778~1626) (let ((&temp~1623545778~1628 (car &temp~1623545778~1626))) (let ((&b1~1623545778~1616 &temp~1623545778~1628)) (let ((&temp~1623545778~1627 (cdr &temp~1623545778~1626))) (if (list? &temp~1623545778~1627) (let ((&b2~1623545778~1617 &temp~1623545778~1627)) (let ((&temp~1623545778~1624 (cdr &temp~1623545778~1623))) (if (list? &temp~1623545778~1624) (let ((&more~1623545778~1618 &temp~1623545778~1624)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote >=) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons &n~1623545778~1612 (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons (cons &x1~1623545778~1613 &x2~1623545778~1614) (quote ()))) (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons (cons &x1~1623545778~1613 (append &x2~1623545778~1614 &r~1623545778~1615)) (cons &b1~1623545778~1616 &b2~1623545778~1617))) (cons &args~1623545778~1611 (quote ())))) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1623545778~1620)) 0 (quote (rnrs control))) (cons &args~1623545778~1611 (cons &n~1623545778~1612 &more~1623545778~1618))) (quote ())))))) (&fail~1623545778~1587)))) (&fail~1623545778~1587))))) (&fail~1623545778~1587)))))) (&fail~1623545778~1587))) (&fail~1623545778~1587))))) (&fail~1623545778~1587))) (&fail~1623545778~1587))) (&fail~1623545778~1587))))) (&fail~1623545778~1587))))) (&fail~1623545778~1587))))) (&fail~1623545778~1587)))))) (if (pair? &input~1623545778~1584) (let ((&temp~1623545778~1657 (car &input~1623545778~1584))) (let ((&dummy~1623545778~1637 &temp~1623545778~1657)) (let ((&temp~1623545778~1646 (cdr &input~1623545778~1584))) (if (pair? &temp~1623545778~1646) (let ((&temp~1623545778~1656 (car &temp~1623545778~1646))) (let ((&args~1623545778~1638 &temp~1623545778~1656)) (let ((&temp~1623545778~1647 (cdr &temp~1623545778~1646))) (if (pair? &temp~1623545778~1647) (let ((&temp~1623545778~1655 (car &temp~1623545778~1647))) (let ((&n~1623545778~1639 &temp~1623545778~1655)) (let ((&temp~1623545778~1648 (cdr &temp~1623545778~1647))) (if (pair? &temp~1623545778~1648) (let ((&temp~1623545778~1650 (car &temp~1623545778~1648))) (if (pair? &temp~1623545778~1650) (let ((&temp~1623545778~1654 (car &temp~1623545778~1650))) (if (list? &temp~1623545778~1654) (let ((&x~1623545778~1640 &temp~1623545778~1654)) (let ((&temp~1623545778~1651 (cdr &temp~1623545778~1650))) (if (pair? &temp~1623545778~1651) (let ((&temp~1623545778~1653 (car &temp~1623545778~1651))) (let ((&b1~1623545778~1641 &temp~1623545778~1653)) (let ((&temp~1623545778~1652 (cdr &temp~1623545778~1651))) (if (list? &temp~1623545778~1652) (let ((&b2~1623545778~1642 &temp~1623545778~1652)) (let ((&temp~1623545778~1649 (cdr &temp~1623545778~1648))) (if (list? &temp~1623545778~1649) (let ((&more~1623545778~1643 &temp~1623545778~1649)) (cons (ex:syntax-rename (quote if) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote =) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons &n~1623545778~1639 (cons (cons (ex:syntax-rename (quote length) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote quote) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons &x~1623545778~1640 (quote ()))) (quote ()))) (quote ())))) (cons (cons (ex:syntax-rename (quote apply) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons &x~1623545778~1640 (cons &b1~1623545778~1641 &b2~1623545778~1642))) (cons &args~1623545778~1638 (quote ())))) (cons (cons (ex:syntax-rename (quote case-lambda-help) (quote ()) (quote (&env~1623545778~1645)) 0 (quote (rnrs control))) (cons &args~1623545778~1638 (cons &n~1623545778~1639 &more~1623545778~1643))) (quote ())))))) (&fail~1623545778~1586)))) (&fail~1623545778~1586))))) (&fail~1623545778~1586)))) (&fail~1623545778~1586))) (&fail~1623545778~1586))) (&fail~1623545778~1586))))) (&fail~1623545778~1586))))) (&fail~1623545778~1586))))) (&fail~1623545778~1586)))))) (if (pair? &input~1623545778~1584) (let ((&temp~1623545778~1668 (car &input~1623545778~1584))) (let ((&dummy~1623545778~1658 &temp~1623545778~1668)) (let ((&temp~1623545778~1663 (cdr &input~1623545778~1584))) (if (pair? &temp~1623545778~1663) (let ((&temp~1623545778~1667 (car &temp~1623545778~1663))) (let ((&args~1623545778~1659 &temp~1623545778~1667)) (let ((&temp~1623545778~1664 (cdr &temp~1623545778~1663))) (if (pair? &temp~1623545778~1664) (let ((&temp~1623545778~1666 (car &temp~1623545778~1664))) (let ((&n~1623545778~1660 &temp~1623545778~1666)) (let ((&temp~1623545778~1665 (cdr &temp~1623545778~1664))) (if (null? &temp~1623545778~1665) (cons (ex:syntax-rename (quote assertion-violation) (quote ()) (quote (&env~1623545778~1662)) 0 (quote (rnrs control))) (cons (quote #f) (cons (quote "unexpected number of arguments") (quote ())))) (&fail~1623545778~1585))))) (&fail~1623545778~1585))))) (&fail~1623545778~1585))))) (&fail~1623545778~1585)))))) (values)) (lambda () (values)) (quote &build~1623545778~1669))) (values))
(begin (ex:register-library! (ex:make-library (quote (thcheme syntax-error)) (lambda () (quote ())) (quote ((syntax-error macro &syntax-error~1623545778~1670 (0) #f (thcheme syntax-error)))) (quote (((core primitives) 1 0))) (quote (&build~1623545778~2)) (lambda () (ex:register-macro! (quote &syntax-error~1623545778~1670) (lambda (&e~1623545778~1672) (let ((&input~1623545778~1674 &e~1623545778~1672)) (let ((&fail~1623545778~1675 (lambda () (ex:invalid-form &input~1623545778~1674)))) (if (pair? &input~1623545778~1674) (let ((&temp~1623545778~1682 (car &input~1623545778~1674))) (let ((&temp~1623545778~1679 (cdr &input~1623545778~1674))) (if (pair? &temp~1623545778~1679) (let ((&temp~1623545778~1681 (car &temp~1623545778~1679))) (let ((&msg~1623545778~1676 &temp~1623545778~1681)) (let ((&temp~1623545778~1680 (cdr &temp~1623545778~1679))) (if (list? &temp~1623545778~1680) (let ((&args~1623545778~1677 &temp~1623545778~1680)) (apply error (cons &msg~1623545778~1676 &args~1623545778~1677))) (&fail~1623545778~1675))))) (&fail~1623545778~1675)))) (&fail~1623545778~1675)))))) (values)) (lambda () (values)) (quote &build~1623545778~1683))) (values))
(begin (define &make-parameter~1623545778~1686 ex:unspecified) (define &<param-convert>~1623545778~1685 ex:unspecified) (define &<param-set!>~1623545778~1684 ex:unspecified) (ex:register-library! (ex:make-library (quote (thcheme parameters)) (lambda () (ex:uncompress (quote (((&env~1623545778~1744 0 1 2 3) (&env~1623545778~1719 4 1 2 3) (&env~1623545778~1701 5 1 2 3)) (5 (((dummy &c~1623545778~1688) . #f) ((param) . #f) ((value) . #f) ((body) . #f))) (4 (((dummy &c~1623545778~1688) . #f) ((args) . #f) ((param) . #f) ((value) . #f) ((rest) . #f) ((body) . #f))) (3 (((parameterize) macro &parameterize~1623545778~1687 (0) #f (thcheme parameters)) ((make-parameter) variable &make-parameter~1623545778~1686 (0) #f (thcheme parameters)) ((<param-convert>) variable &<param-convert>~1623545778~1685 (0) #f (thcheme parameters)) ((<param-set!>) variable &<param-set!>~1623545778~1684 (0) #f (thcheme parameters)) ((syntax-rules) macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((=>) macro &=>~1623545778~481 (1 0) #f (core derived)) ((else) macro &else~1623545778~485 (1 0) #f (core derived)) ((case) macro &case~1623545778~401 (1 0) #f (core derived)) ((cond) macro &cond~1623545778~285 (1 0) #f (core derived)) ((let*) macro &let*~1623545778~204 (1 0) #f (core derived)) ((letrec*) macro &letrec*~1623545778~179 (0) #f (core let)) ((letrec) macro &letrec~1623545778~148 (0) #f (core let)) ((let) macro &let~1623545778~100 (0) #f (core let)) ((cadr) variable cadr (0) #f ()) ((car) variable car (0) #f ()) ((cons) variable cons (0) #f ()) ((null?) variable null? (0) #f ()) ((pair?) variable pair? (0) #f ()) ((list) variable list (0) #f ()) ((error) variable error (0) #f ()) ((eq?) variable eq? (0) #f ()) ((id) variable id (0) #f ()) ((dynamic-wind) variable dynamic-wind (0) #f ()))) (2 (((x &c~1623545778~1688) variable &x~1623545778~1690 (0) #f (thcheme parameters)))) (1 ()) (0 (((dummy &c~1623545778~1688) . #f) ((param) . #f) ((value) . #f) ((p) . #f) ((old) . #f) ((new) . #f) ((body) . #f))))))) (quote ((make-parameter variable &make-parameter~1623545778~1686 (0) #f (thcheme parameters)) (parameterize macro &parameterize~1623545778~1687 (0) #f (thcheme parameters)))) (quote (((core let) 0) ((core derived) 1 0) ((core primitives) 1 0) ((core syntax-rules) 1))) (quote (&build~1623545778~203 &build~1623545778~489 &build~1623545778~2 &build~1623545778~99)) (lambda () (ex:register-macro! (quote &parameterize~1623545778~1687) (lambda (&x~1623545778~1690) (let ((&input~1623545778~1692 &x~1623545778~1690)) (let ((&fail~1623545778~1693 (lambda () (let ((&fail~1623545778~1694 (lambda () (let ((&fail~1623545778~1695 (lambda () (ex:invalid-form &input~1623545778~1692)))) (if (pair? &input~1623545778~1692) (let ((&temp~1623545778~1711 (car &input~1623545778~1692))) (let ((&dummy~1623545778~1696 &temp~1623545778~1711)) (let ((&temp~1623545778~1702 (cdr &input~1623545778~1692))) (if (pair? &temp~1623545778~1702) (let ((&temp~1623545778~1704 (car &temp~1623545778~1702))) (ex:map-while (lambda (&temp~1623545778~1704) (if (pair? &temp~1623545778~1704) (let ((&temp~1623545778~1710 (car &temp~1623545778~1704))) (let ((&param~1623545778~1697 &temp~1623545778~1710)) (let ((&temp~1623545778~1707 (cdr &temp~1623545778~1704))) (if (pair? &temp~1623545778~1707) (let ((&temp~1623545778~1709 (car &temp~1623545778~1707))) (let ((&value~1623545778~1698 &temp~1623545778~1709)) (let ((&temp~1623545778~1708 (cdr &temp~1623545778~1707))) (if (null? &temp~1623545778~1708) (list &param~1623545778~1697 &value~1623545778~1698) #f)))) #f)))) #f)) &temp~1623545778~1704 (lambda (&cols~1623545778~1705 &rest~1623545778~1706) (if (null? &rest~1623545778~1706) (apply (lambda (&param~1623545778~1697 &value~1623545778~1698) (let ((&temp~1623545778~1703 (cdr &temp~1623545778~1702))) (let ((&body~1623545778~1699 &temp~1623545778~1703)) (cons (ex:syntax-rename (quote parameterize) (quote ()) (quote (&env~1623545778~1701)) 0 (quote (thcheme parameters))) (cons (quote "step") (cons (quote ()) (cons (if (= (length &param~1623545778~1697) (length &value~1623545778~1698)) (map (lambda (&param~1623545778~1697 &value~1623545778~1698) (cons &param~1623545778~1697 (cons &value~1623545778~1698 (quote ())))) &param~1623545778~1697 &value~1623545778~1698) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((param value) ...)) (list &param~1623545778~1697 &value~1623545778~1698))) (cons &body~1623545778~1699 (quote ()))))))))) (if (null? &cols~1623545778~1705) (quote (() ())) (apply map list &cols~1623545778~1705))) (&fail~1623545778~1695))))) (&fail~1623545778~1695))))) (&fail~1623545778~1695)))))) (if (pair? &input~1623545778~1692) (let ((&temp~1623545778~1735 (car &input~1623545778~1692))) (let ((&dummy~1623545778~1712 &temp~1623545778~1735)) (let ((&temp~1623545778~1720 (cdr &input~1623545778~1692))) (if (pair? &temp~1623545778~1720) (let ((&temp~1623545778~1734 (car &temp~1623545778~1720))) (if (equal? &temp~1623545778~1734 (quote "step")) (let ((&temp~1623545778~1721 (cdr &temp~1623545778~1720))) (if (pair? &temp~1623545778~1721) (let ((&temp~1623545778~1733 (car &temp~1623545778~1721))) (let ((&args~1623545778~1713 &temp~1623545778~1733)) (let ((&temp~1623545778~1722 (cdr &temp~1623545778~1721))) (if (pair? &temp~1623545778~1722) (let ((&temp~1623545778~1726 (car &temp~1623545778~1722))) (if (pair? &temp~1623545778~1726) (let ((&temp~1623545778~1728 (car &temp~1623545778~1726))) (if (pair? &temp~1623545778~1728) (let ((&temp~1623545778~1732 (car &temp~1623545778~1728))) (let ((&param~1623545778~1714 &temp~1623545778~1732)) (let ((&temp~1623545778~1729 (cdr &temp~1623545778~1728))) (if (pair? &temp~1623545778~1729) (let ((&temp~1623545778~1731 (car &temp~1623545778~1729))) (let ((&value~1623545778~1715 &temp~1623545778~1731)) (let ((&temp~1623545778~1730 (cdr &temp~1623545778~1729))) (if (null? &temp~1623545778~1730) (let ((&temp~1623545778~1727 (cdr &temp~1623545778~1726))) (let ((&rest~1623545778~1716 &temp~1623545778~1727)) (let ((&temp~1623545778~1723 (cdr &temp~1623545778~1722))) (if (pair? &temp~1623545778~1723) (let ((&temp~1623545778~1725 (car &temp~1623545778~1723))) (let ((&body~1623545778~1717 &temp~1623545778~1725)) (let ((&temp~1623545778~1724 (cdr &temp~1623545778~1723))) (if (null? &temp~1623545778~1724) (cons (ex:syntax-rename (quote parameterize) (quote ()) (quote (&env~1623545778~1719)) 0 (quote (thcheme parameters))) (cons (quote "step") (cons (cons (cons &param~1623545778~1714 (cons &value~1623545778~1715 (cons (ex:syntax-rename (quote p) (quote ()) (quote (&env~1623545778~1719)) 0 (quote (thcheme parameters))) (cons (ex:syntax-rename (quote old) (quote ()) (quote (&env~1623545778~1719)) 0 (quote (thcheme parameters))) (cons (ex:syntax-rename (quote new) (quote ()) (quote (&env~1623545778~1719)) 0 (quote (thcheme parameters))) (quote ())))))) &args~1623545778~1713) (cons &rest~1623545778~1716 (cons &body~1623545778~1717 (quote ())))))) (&fail~1623545778~1694))))) (&fail~1623545778~1694))))) (&fail~1623545778~1694))))) (&fail~1623545778~1694))))) (&fail~1623545778~1694))) (&fail~1623545778~1694))) (&fail~1623545778~1694))))) (&fail~1623545778~1694))) (&fail~1623545778~1694))) (&fail~1623545778~1694))))) (&fail~1623545778~1694)))))) (if (pair? &input~1623545778~1692) (let ((&temp~1623545778~1766 (car &input~1623545778~1692))) (let ((&dummy~1623545778~1736 &temp~1623545778~1766)) (let ((&temp~1623545778~1745 (cdr &input~1623545778~1692))) (if (pair? &temp~1623545778~1745) (let ((&temp~1623545778~1765 (car &temp~1623545778~1745))) (if (equal? &temp~1623545778~1765 (quote "step")) (let ((&temp~1623545778~1746 (cdr &temp~1623545778~1745))) (if (pair? &temp~1623545778~1746) (let ((&temp~1623545778~1752 (car &temp~1623545778~1746))) (ex:map-while (lambda (&temp~1623545778~1752) (if (pair? &temp~1623545778~1752) (let ((&temp~1623545778~1764 (car &temp~1623545778~1752))) (let ((&param~1623545778~1737 &temp~1623545778~1764)) (let ((&temp~1623545778~1755 (cdr &temp~1623545778~1752))) (if (pair? &temp~1623545778~1755) (let ((&temp~1623545778~1763 (car &temp~1623545778~1755))) (let ((&value~1623545778~1738 &temp~1623545778~1763)) (let ((&temp~1623545778~1756 (cdr &temp~1623545778~1755))) (if (pair? &temp~1623545778~1756) (let ((&temp~1623545778~1762 (car &temp~1623545778~1756))) (let ((&p~1623545778~1739 &temp~1623545778~1762)) (let ((&temp~1623545778~1757 (cdr &temp~1623545778~1756))) (if (pair? &temp~1623545778~1757) (let ((&temp~1623545778~1761 (car &temp~1623545778~1757))) (let ((&old~1623545778~1740 &temp~1623545778~1761)) (let ((&temp~1623545778~1758 (cdr &temp~1623545778~1757))) (if (pair? &temp~1623545778~1758) (let ((&temp~1623545778~1760 (car &temp~1623545778~1758))) (let ((&new~1623545778~1741 &temp~1623545778~1760)) (let ((&temp~1623545778~1759 (cdr &temp~1623545778~1758))) (if (null? &temp~1623545778~1759) (list &param~1623545778~1737 &value~1623545778~1738 &p~1623545778~1739 &old~1623545778~1740 &new~1623545778~1741) #f)))) #f)))) #f)))) #f)))) #f)))) #f)) &temp~1623545778~1752 (lambda (&cols~1623545778~1753 &rest~1623545778~1754) (if (null? &rest~1623545778~1754) (apply (lambda (&param~1623545778~1737 &value~1623545778~1738 &p~1623545778~1739 &old~1623545778~1740 &new~1623545778~1741) (let ((&temp~1623545778~1747 (cdr &temp~1623545778~1746))) (if (pair? &temp~1623545778~1747) (let ((&temp~1623545778~1751 (car &temp~1623545778~1747))) (if (null? &temp~1623545778~1751) (let ((&temp~1623545778~1748 (cdr &temp~1623545778~1747))) (if (pair? &temp~1623545778~1748) (let ((&temp~1623545778~1750 (car &temp~1623545778~1748))) (let ((&body~1623545778~1742 &temp~1623545778~1750)) (let ((&temp~1623545778~1749 (cdr &temp~1623545778~1748))) (if (null? &temp~1623545778~1749) (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (if (= (length &p~1623545778~1739) (length &param~1623545778~1737)) (map (lambda (&p~1623545778~1739 &param~1623545778~1737) (cons &p~1623545778~1739 (cons &param~1623545778~1737 (quote ())))) &p~1623545778~1739 &param~1623545778~1737) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((p param) ...)) (list &p~1623545778~1739 &param~1623545778~1737))) (cons (cons (ex:syntax-rename (quote let) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (append (if (= (length &old~1623545778~1740) (length &p~1623545778~1739)) (map (lambda (&old~1623545778~1740 &p~1623545778~1739) (cons &old~1623545778~1740 (cons (cons &p~1623545778~1739 (quote ())) (quote ())))) &old~1623545778~1740 &p~1623545778~1739) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((old (p)) ... (new ((p <param-convert>) value)) ...)) (list &old~1623545778~1740 &p~1623545778~1739))) (if (= (length &new~1623545778~1741) (length &p~1623545778~1739) (length &value~1623545778~1738)) (map (lambda (&new~1623545778~1741 &p~1623545778~1739 &value~1623545778~1738) (cons &new~1623545778~1741 (cons (cons (cons &p~1623545778~1739 (cons (ex:syntax-rename (quote <param-convert>) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (quote ()))) (cons &value~1623545778~1738 (quote ()))) (quote ())))) &new~1623545778~1741 &p~1623545778~1739 &value~1623545778~1738) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((new ((p <param-convert>) value)) ...)) (list &new~1623545778~1741 &p~1623545778~1739 &value~1623545778~1738)))) (cons (cons (ex:syntax-rename (quote dynamic-wind) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (quote ()) (if (= (length &p~1623545778~1739) (length &new~1623545778~1741)) (map (lambda (&p~1623545778~1739 &new~1623545778~1741) (cons &p~1623545778~1739 (cons (ex:syntax-rename (quote <param-set!>) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons &new~1623545778~1741 (quote ()))))) &p~1623545778~1739 &new~1623545778~1741) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((p <param-set!> new) ...)) (list &p~1623545778~1739 &new~1623545778~1741))))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (quote ()) &body~1623545778~1742)) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons (quote ()) (if (= (length &p~1623545778~1739) (length &old~1623545778~1740)) (map (lambda (&p~1623545778~1739 &old~1623545778~1740) (cons &p~1623545778~1739 (cons (ex:syntax-rename (quote <param-set!>) (quote ()) (quote (&env~1623545778~1744)) 0 (quote (thcheme parameters))) (cons &old~1623545778~1740 (quote ()))))) &p~1623545778~1739 &old~1623545778~1740) (ex:syntax-violation (quote syntax) "Pattern variables denoting lists of unequal length preceding ellipses" (quote ((p <param-set!> old) ...)) (list &p~1623545778~1739 &old~1623545778~1740))))) (quote ()))))) (quote ())))) (quote ())))) (&fail~1623545778~1693))))) (&fail~1623545778~1693))) (&fail~1623545778~1693))) (&fail~1623545778~1693)))) (if (null? &cols~1623545778~1753) (quote (() () () () ())) (apply map list &cols~1623545778~1753))) (&fail~1623545778~1693))))) (&fail~1623545778~1693))) (&fail~1623545778~1693))) (&fail~1623545778~1693))))) (&fail~1623545778~1693)))))) (values)) (lambda () (set! &make-parameter~1623545778~1686 ex:undefined) (set! &<param-convert>~1623545778~1685 ex:undefined) (set! &<param-set!>~1623545778~1684 ex:undefined) (set! &<param-set!>~1623545778~1684 (list (quote <param-set!>))) (set! &<param-convert>~1623545778~1685 (list (quote <param-convert>))) (set! &make-parameter~1623545778~1686 (lambda (&init~1623545778~1768 . &converter~1623545778~1769) ((lambda (&converter~1623545778~1773) ((lambda (&value~1623545778~1776) (lambda &args~1623545778~1778 (if (null? &args~1623545778~1778) (begin &value~1623545778~1776) (if (eq? (car &args~1623545778~1778) &<param-set!>~1623545778~1684) (begin (set! &value~1623545778~1776 (cadr &args~1623545778~1778))) (if (eq? (car &args~1623545778~1778) &<param-convert>~1623545778~1685) (begin &converter~1623545778~1773) (begin (error "bad parameter syntax: " (cons (quote <parameter>) &args~1623545778~1778)))))))) (&converter~1623545778~1773 &init~1623545778~1768))) (if (pair? &converter~1623545778~1769) (car &converter~1623545778~1769) id)))) (values)) (quote &build~1623545778~1792))) (values))
(begin (define &with-output-to-string~1623545778~1799 ex:unspecified) (define &with-input-from-string~1623545778~1798 ex:unspecified) (define &with-output-to-file~1623545778~1797 ex:unspecified) (define &with-input-from-file~1623545778~1796 ex:unspecified) (define &current-error-port~1623545778~1795 ex:unspecified) (define &current-output-port~1623545778~1794 ex:unspecified) (define &current-input-port~1623545778~1793 ex:unspecified) (ex:register-library! (ex:make-library (quote (thcheme ports)) (lambda () (quote ())) (quote ((call-with-port variable call-with-port (0) #f ()) (call-with-input-file variable call-with-input-file (0) #f ()) (call-with-output-file variable call-with-output-file (0) #f ()) (input-port? variable input-port? (0) #f ()) (output-port? variable output-port? (0) #f ()) (textual-port? variable textual-port? (0) #f ()) (binary-port? variable binary-port? (0) #f ()) (port? variable port? (0) #f ()) (input-port-open? variable input-port-open? (0) #f ()) (output-port-open? variable output-port-open? (0) #f ()) (current-input-port variable &current-input-port~1623545778~1793 (0) #f (thcheme ports)) (current-output-port variable &current-output-port~1623545778~1794 (0) #f (thcheme ports)) (current-error-port variable &current-error-port~1623545778~1795 (0) #f (thcheme ports)) (with-input-from-file variable &with-input-from-file~1623545778~1796 (0) #f (thcheme ports)) (with-output-to-file variable &with-output-to-file~1623545778~1797 (0) #f (thcheme ports)) (with-input-from-string variable &with-input-from-string~1623545778~1798 (0) #f (thcheme ports)) (with-output-to-string variable &with-output-to-string~1623545778~1799 (0) #f (thcheme ports)) (open-input-file variable open-input-file (0) #f ()) (open-output-file variable open-output-file (0) #f ()) (close-port variable close-port (0) #f ()) (close-input-port variable close-input-port (0) #f ()) (close-output-port variable close-output-port (0) #f ()) (open-input-string variable open-input-string (0) #f ()) (open-output-string variable open-output-string (0) #f ()) (get-output-string variable get-output-string (0) #f ()))) (quote (((thcheme parameters) 0) ((core primitives) 0))) (quote (&build~1623545778~1792 &build~1623545778~2)) (lambda () (values)) (lambda () (set! &with-output-to-string~1623545778~1799 ex:undefined) (set! &with-input-from-string~1623545778~1798 ex:undefined) (set! &with-output-to-file~1623545778~1797 ex:undefined) (set! &with-input-from-file~1623545778~1796 ex:undefined) (set! &current-error-port~1623545778~1795 ex:undefined) (set! &current-output-port~1623545778~1794 ex:undefined) (set! &current-input-port~1623545778~1793 ex:undefined) (set! &current-input-port~1623545778~1793 (&make-parameter~1623545778~1686 (standard-input-port))) (set! &current-output-port~1623545778~1794 (&make-parameter~1623545778~1686 (standard-output-port))) (set! &current-error-port~1623545778~1795 (&make-parameter~1623545778~1686 (standard-error-port))) (set! &with-input-from-file~1623545778~1796 (lambda (&filename~1623545778~1853 &thunk~1623545778~1854) ((lambda (&result~1623545778~1856 &p~1623545778~1855) (set! &p~1623545778~1855 (open-input-file &filename~1623545778~1853)) (set! &result~1623545778~1856 ((lambda (&p~1623545778~1862) ((lambda (&old~1623545778~1865 &new~1623545778~1866) (dynamic-wind (lambda () (&p~1623545778~1862 &<param-set!>~1623545778~1684 &new~1623545778~1866)) (lambda () (&thunk~1623545778~1854)) (lambda () (&p~1623545778~1862 &<param-set!>~1623545778~1684 &old~1623545778~1865)))) (&p~1623545778~1862) ((&p~1623545778~1862 &<param-convert>~1623545778~1685) &p~1623545778~1855))) &current-input-port~1623545778~1793)) (close-input-port &p~1623545778~1855) &result~1623545778~1856) ex:undefined ex:undefined))) (set! &with-output-to-file~1623545778~1797 (lambda (&filename~1623545778~1835 &thunk~1623545778~1836) ((lambda (&result~1623545778~1838 &p~1623545778~1837) (set! &p~1623545778~1837 (open-output-file &filename~1623545778~1835)) (set! &result~1623545778~1838 ((lambda (&p~1623545778~1844) ((lambda (&old~1623545778~1847 &new~1623545778~1848) (dynamic-wind (lambda () (&p~1623545778~1844 &<param-set!>~1623545778~1684 &new~1623545778~1848)) (lambda () (&thunk~1623545778~1836)) (lambda () (&p~1623545778~1844 &<param-set!>~1623545778~1684 &old~1623545778~1847)))) (&p~1623545778~1844) ((&p~1623545778~1844 &<param-convert>~1623545778~1685) &p~1623545778~1837))) &current-output-port~1623545778~1794)) (close-output-port &p~1623545778~1837) &result~1623545778~1838) ex:undefined ex:undefined))) (set! &with-input-from-string~1623545778~1798 (lambda (&string~1623545778~1817 &thunk~1623545778~1818) ((lambda (&result~1623545778~1820 &p~1623545778~1819) (set! &p~1623545778~1819 (open-input-string &string~1623545778~1817)) (set! &result~1623545778~1820 ((lambda (&p~1623545778~1826) ((lambda (&old~1623545778~1829 &new~1623545778~1830) (dynamic-wind (lambda () (&p~1623545778~1826 &<param-set!>~1623545778~1684 &new~1623545778~1830)) (lambda () (&thunk~1623545778~1818)) (lambda () (&p~1623545778~1826 &<param-set!>~1623545778~1684 &old~1623545778~1829)))) (&p~1623545778~1826) ((&p~1623545778~1826 &<param-convert>~1623545778~1685) &p~1623545778~1819))) &current-input-port~1623545778~1793)) (close-input-port &p~1623545778~1819) &result~1623545778~1820) ex:undefined ex:undefined))) (set! &with-output-to-string~1623545778~1799 (lambda (&thunk~1623545778~1801) ((lambda (&p~1623545778~1802) (set! &p~1623545778~1802 (open-output-string)) ((lambda (&p~1623545778~1808) ((lambda (&old~1623545778~1811 &new~1623545778~1812) (dynamic-wind (lambda () (&p~1623545778~1808 &<param-set!>~1623545778~1684 &new~1623545778~1812)) (lambda () (&thunk~1623545778~1801)) (lambda () (&p~1623545778~1808 &<param-set!>~1623545778~1684 &old~1623545778~1811)))) (&p~1623545778~1808) ((&p~1623545778~1808 &<param-convert>~1623545778~1685) &p~1623545778~1802))) &current-output-port~1623545778~1794) (get-output-string &p~1623545778~1802)) ex:undefined))) (values)) (quote &build~1623545778~1870))) (values))
(begin (define &with-default-port1~1623545778~1872 ex:unspecified) (define &with-default-port0~1623545778~1871 ex:unspecified) (ex:register-library! (ex:make-library (quote (thcheme with-default-port)) (lambda () (quote ())) (quote ((with-default-port0 variable &with-default-port0~1623545778~1871 (0) #f (thcheme with-default-port)) (with-default-port1 variable &with-default-port1~1623545778~1872 (0) #f (thcheme with-default-port)))) (quote (((core derived) 0) ((core let) 0) ((core primitives) 0))) (quote (&build~1623545778~489 &build~1623545778~203 &build~1623545778~2)) (lambda () (values)) (lambda () (set! &with-default-port1~1623545778~1872 ex:undefined) (set! &with-default-port0~1623545778~1871 ex:undefined) (set! &with-default-port0~1623545778~1871 (lambda (&get-port~1623545778~1888 &proc~1623545778~1889) (lambda &port~1623545778~1891 ((lambda (&port~1623545778~1894) (&proc~1623545778~1889 &port~1623545778~1894)) (if (null? &port~1623545778~1891) (begin (&get-port~1623545778~1888)) (if (pair? &port~1623545778~1891) (begin (car &port~1623545778~1891)))))))) (set! &with-default-port1~1623545778~1872 (lambda (&get-port~1623545778~1874 &proc~1623545778~1875) (lambda (&obj~1623545778~1877 . &port~1623545778~1878) ((lambda (&port~1623545778~1881) (&proc~1623545778~1875 &obj~1623545778~1877 &port~1623545778~1881)) (if (null? &port~1623545778~1878) (begin (&get-port~1623545778~1874)) (if (pair? &port~1623545778~1878) (begin (car &port~1623545778~1878)))))))) (values)) (quote &build~1623545778~1900))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme base)) (lambda () (quote ())) (quote ((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (1 0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (1) #f ()) (... macro ... (1) #f ()) (let macro &let~1623545778~100 (0) #f (core let)) (let* macro &let*~1623545778~204 (0) #f (core derived)) (letrec macro &letrec~1623545778~148 (0) #f (core let)) (letrec* macro &letrec*~1623545778~179 (0) #f (core let)) (let-values macro &let-values~1623545778~1206 (0) #f (core let-values)) (let*-values macro &let*-values~1623545778~1346 (0) #f (core let-values)) (case macro &case~1623545778~401 (0) #f (core derived)) (cond macro &cond~1623545778~285 (0) #f (core derived)) (else macro &else~1623545778~485 (0) #f (core derived)) (=> macro &=>~1623545778~481 (0) #f (core derived)) (define-values macro &define-values~1623545778~1381 (0) #f (core define-values)) (when macro &when~1623545778~1445 (0) #f (rnrs control)) (unless macro &unless~1623545778~1464 (0) #f (rnrs control)) (do macro &do~1623545778~1483 (0) #f (rnrs control)) (parameterize macro &parameterize~1623545778~1687 (0) #f (thcheme parameters)) (quasiquote macro &quasiquote~1623545778~763 (0) #f (core quasiquote)) (unquote macro &unquote~1623545778~1197 (0) #f (core quasiquote)) (unquote-splicing macro &unquote-splicing~1623545778~1201 (0) #f (core quasiquote)) (syntax-error macro &syntax-error~1623545778~1670 (0) #f (thcheme syntax-error)) (syntax-rules macro &syntax-rules~1623545778~58 (1) #f (core syntax-rules)) (identifier-syntax macro &identifier-syntax~1623545778~490 (1) #f (core identifier-syntax)) (* variable * (0) #f ()) (+ variable + (0) #f ()) (- variable - (0) #f ()) (/ variable / (0) #f ()) (< variable < (0) #f ()) (<= variable <= (0) #f ()) (= variable = (0) #f ()) (> variable > (0) #f ()) (>= variable >= (0) #f ()) (abs variable abs (0) #f ()) (append variable append (0) #f ()) (apply variable apply (0) #f ()) (boolean? variable boolean? (0) #f ()) (call-with-current-continuation variable call-with-current-continuation (0) #f ()) (call-with-values variable call-with-values (0) #f ()) (car variable car (0) #f ()) (cdr variable cdr (0) #f ()) (caar variable caar (0) #f ()) (cadr variable cadr (0) #f ()) (cdar variable cdar (0) #f ()) (cddr variable cddr (0) #f ()) (ceiling variable ceiling (0) #f ()) (char? variable char? (0) #f ()) (char->integer variable char->integer (0) #f ()) (complex? variable complex? (0) #f ()) (cons variable cons (0) #f ()) (denominator variable denominator (0) #f ()) (dynamic-wind variable dynamic-wind (0) #f ()) (eq? variable eq? (0) #f ()) (equal? variable equal? (0) #f ()) (eqv? variable eqv? (0) #f ()) (even? variable even? (0) #f ()) (exact? variable exact? (0) #f ()) (expt variable expt (0) #f ()) (floor variable floor (0) #f ()) (for-each variable for-each (0) #f ()) (gcd variable gcd (0) #f ()) (imag-part variable imag-part (0) #f ()) (inexact? variable inexact? (0) #f ()) (integer->char variable integer->char (0) #f ()) (integer? variable integer? (0) #f ()) (lcm variable lcm (0) #f ()) (length variable length (0) #f ()) (list variable list (0) #f ()) (list->string variable list->string (0) #f ()) (list->vector variable list->vector (0) #f ()) (list-ref variable list-ref (0) #f ()) (list-tail variable list-tail (0) #f ()) (list? variable list? (0) #f ()) (make-string variable make-string (0) #f ()) (make-vector variable make-vector (0) #f ()) (map variable map (0) #f ()) (max variable max (0) #f ()) (min variable min (0) #f ()) (negative? variable negative? (0) #f ()) (not variable not (0) #f ()) (null? variable null? (0) #f ()) (number->string variable number->string (0) #f ()) (number? variable number? (0) #f ()) (numerator variable numerator (0) #f ()) (odd? variable odd? (0) #f ()) (pair? variable pair? (0) #f ()) (positive? variable positive? (0) #f ()) (procedure? variable procedure? (0) #f ()) (rational? variable rational? (0) #f ()) (rationalize variable rationalize (0) #f ()) (real-part variable real-part (0) #f ()) (real? variable real? (0) #f ()) (reverse variable reverse (0) #f ()) (round variable round (0) #f ()) (string variable string (0) #f ()) (string->list variable string->list (0) #f ()) (string->number variable string->number (0) #f ()) (string->symbol variable string->symbol (0) #f ()) (string-append variable string-append (0) #f ()) (string-copy variable string-copy (0) #f ()) (string-length variable string-length (0) #f ()) (string-ref variable string-ref (0) #f ()) (string<=? variable string<=? (0) #f ()) (string<? variable string<? (0) #f ()) (string=? variable string=? (0) #f ()) (string>=? variable string>=? (0) #f ()) (string>? variable string>? (0) #f ()) (string? variable string? (0) #f ()) (substring variable substring (0) #f ()) (symbol->string variable symbol->string (0) #f ()) (symbol? variable symbol? (0) #f ()) (truncate variable truncate (0) #f ()) (values variable values (0) #f ()) (vector variable vector (0) #f ()) (vector->list variable vector->list (0) #f ()) (vector-fill! variable vector-fill! (0) #f ()) (vector-length variable vector-length (0) #f ()) (vector-ref variable vector-ref (0) #f ()) (vector-set! variable vector-set! (0) #f ()) (vector? variable vector? (0) #f ()) (zero? variable zero? (0) #f ()) (assoc variable assoc (0) #f ()) (assq variable assq (0) #f ()) (assv variable assv (0) #f ()) (binary-port? variable binary-port? (0) #f ()) (boolean=? variable boolean=? (0) #f ()) (bytevector? variable bytevector? (0) #f ()) (call-with-port variable call-with-port (0) #f ()) (call/cc variable call/cc (0) #f ()) (char-ready? variable char-ready? (0) #f ()) (char<=? variable char<=? (0) #f ()) (char<? variable char<? (0) #f ()) (char=? variable char=? (0) #f ()) (char>=? variable char>=? (0) #f ()) (char>? variable char>? (0) #f ()) (close-input-port variable close-input-port (0) #f ()) (close-output-port variable close-output-port (0) #f ()) (close-port variable close-port (0) #f ()) (current-input-port variable &current-input-port~1623545778~1793 (0) #f (thcheme ports)) (current-output-port variable &current-output-port~1623545778~1794 (0) #f (thcheme ports)) (current-error-port variable &current-error-port~1623545778~1795 (0) #f (thcheme ports)) (define-record-type variable define-record-type (0) #f ()) (eof-object variable eof-object (0) #f ()) (eof-object? variable eof-object? (0) #f ()) (error variable error (0) #f ()) (error-object-irritants variable error-object-irritants (0) #f ()) (error-object-message variable error-object-message (0) #f ()) (exact variable exact (0) #f ()) (exact-integer-sqrt variable exact-integer-sqrt (0) #f ()) (exact-integer? variable exact-integer? (0) #f ()) (features variable features (0) #f ()) (file-error? variable file-error? (0) #f ()) (floor-quotient variable floor-quotient (0) #f ()) (floor-remainder variable floor-remainder (0) #f ()) (floor/ variable floor/ (0) #f ()) (flush-output-port variable flush-output-port (0) #f ()) (get-output-string variable get-output-string (0) #f ()) (inexact variable inexact (0) #f ()) (input-port-open? variable input-port-open? (0) #f ()) (input-port? variable input-port? (0) #f ()) (list-copy variable list-copy (0) #f ()) (list-set! variable list-set! (0) #f ()) (make-list variable make-list (0) #f ()) (make-parameter variable &make-parameter~1623545778~1686 (0) #f (thcheme parameters)) (member variable member (0) #f ()) (memq variable memq (0) #f ()) (memv variable memv (0) #f ()) (modulo variable modulo (0) #f ()) (newline variable newline (0) #f ()) (open-input-string variable open-input-string (0) #f ()) (open-output-string variable open-output-string (0) #f ()) (output-port-open? variable output-port-open? (0) #f ()) (output-port? variable output-port? (0) #f ()) (peek-char variable peek-char (0) #f ()) (port? variable port? (0) #f ()) (quotient variable quotient (0) #f ()) (raise variable raise (0) #f ()) (raise-continuable variable raise-continuable (0) #f ()) (read-char variable read-char (0) #f ()) (read-error? variable read-error? (0) #f ()) (read-line variable read-line (0) #f ()) (read-string variable read-string (0) #f ()) (remainder variable remainder (0) #f ()) (set-car! variable set-car! (0) #f ()) (set-cdr! variable set-cdr! (0) #f ()) (square variable square (0) #f ()) (string->vector variable string->vector (0) #f ()) (string-copy! variable string-copy! (0) #f ()) (string-fill! variable string-fill! (0) #f ()) (string-for-each variable string-for-each (0) #f ()) (string-map variable string-map (0) #f ()) (string-set! variable string-set! (0) #f ()) (symbol=? variable symbol=? (0) #f ()) (textual-port? variable textual-port? (0) #f ()) (truncate-quotient variable truncate-quotient (0) #f ()) (truncate-remainder variable truncate-remainder (0) #f ()) (truncate/ variable truncate/ (0) #f ()) (vector->string variable vector->string (0) #f ()) (vector-append variable vector-append (0) #f ()) (vector-copy variable vector-copy (0) #f ()) (vector-copy! variable vector-copy! (0) #f ()) (vector-for-each variable vector-for-each (0) #f ()) (vector-map variable vector-map (0) #f ()) (with-exception-handler variable with-exception-handler (0) #f ()) (write-char variable write-char (0) #f ()) (write-string variable write-string (0) #f ()))) (quote (((core identifier-syntax) 1) ((core syntax-rules) 1) ((thcheme ports) 0) ((thcheme parameters) 0) ((thcheme syntax-error) 0) ((rnrs control) 0) ((core define-values) 0) ((core let-values) 0) ((core quasiquote) 0) ((core derived) 0) ((core let) 0) ((core primitives) 1) ((core primitives) 0))) (quote (&build~1623545778~535 &build~1623545778~99 &build~1623545778~1870 &build~1623545778~1792 &build~1623545778~1683 &build~1623545778~1669 &build~1623545778~1444 &build~1623545778~1380 &build~1623545778~1205 &build~1623545778~489 &build~1623545778~203 &build~1623545778~2 &build~1623545778~2)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1901))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme case-lambda)) (lambda () (quote ())) (quote ((case-lambda macro &case-lambda~1623545778~1543 (0) #f (rnrs control)))) (quote (((rnrs control) 0))) (quote (&build~1623545778~1669)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1902))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme char)) (lambda () (quote ())) (quote ()) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1903))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme complex)) (lambda () (quote ())) (quote ((angle variable angle (0) #f ()) (imag-part variable imag-part (0) #f ()) (magnitude variable magnitude (0) #f ()) (make-polar variable make-polar (0) #f ()) (make-rectangular variable make-rectangular (0) #f ()) (real-part variable real-part (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1904))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme cxr)) (lambda () (quote ())) (quote ((caaar variable caaar (0) #f ()) (caadr variable caadr (0) #f ()) (cadar variable cadar (0) #f ()) (caddr variable caddr (0) #f ()) (cdaar variable cdaar (0) #f ()) (cdadr variable cdadr (0) #f ()) (cddar variable cddar (0) #f ()) (cdddr variable cdddr (0) #f ()) (caaaar variable caaaar (0) #f ()) (caaadr variable caaadr (0) #f ()) (caadar variable caadar (0) #f ()) (caaddr variable caaddr (0) #f ()) (cadaar variable cadaar (0) #f ()) (cadadr variable cadadr (0) #f ()) (caddar variable caddar (0) #f ()) (cadddr variable cadddr (0) #f ()) (cdaaar variable cdaaar (0) #f ()) (cdaadr variable cdaadr (0) #f ()) (cdadar variable cdadar (0) #f ()) (cdaddr variable cdaddr (0) #f ()) (cddaar variable cddaar (0) #f ()) (cddadr variable cddadr (0) #f ()) (cdddar variable cdddar (0) #f ()) (cddddr variable cddddr (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1905))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme eval)) (lambda () (quote ())) (quote ((environment variable ex:environment (0) #f ()) (eval variable ex:eval (0) #f ()))) (quote (((core primitives) 0))) (quote (&build~1623545778~2)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1906))) (values))
(begin (ex:register-library! (ex:make-library (quote (thcheme eval reflection)) (lambda () (quote ())) (quote ((environment-bindings variable ex:environment-bindings (0) #f ()))) (quote (((core primitives) 0))) (quote (&build~1623545778~2)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1907))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme file)) (lambda () (quote ())) (quote ((call-with-input-file variable call-with-input-file (0) #f ()) (call-with-output-file variable call-with-output-file (0) #f ()) (delete-file variable delete-file (0) #f ()) (file-exists? variable file-exists? (0) #f ()) (open-input-file variable open-input-file (0) #f ()) (open-output-file variable open-output-file (0) #f ()) (with-input-from-file variable &with-input-from-file~1623545778~1796 (0) #f (thcheme ports)) (with-output-to-file variable &with-output-to-file~1623545778~1797 (0) #f (thcheme ports)))) (quote (((thcheme ports) 0))) (quote (&build~1623545778~1870)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1908))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme inexact)) (lambda () (quote ())) (quote ((acos variable acos (0) #f ()) (asin variable asin (0) #f ()) (atan variable atan (0) #f ()) (cos variable cos (0) #f ()) (exp variable exp (0) #f ()) (finite? variable finite? (0) #f ()) (infinite? variable infinite? (0) #f ()) (log variable log (0) #f ()) (nan? variable nan? (0) #f ()) (sin variable sin (0) #f ()) (sqrt variable sqrt (0) #f ()) (tan variable tan (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1909))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme load)) (lambda () (quote ())) (quote ((load variable ex:load (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1910))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme process-context)) (lambda () (quote ())) (quote ((command-line variable command-line (0) #f ()) (emergency-exit variable emergency-exit (0) #f ()) (exit variable exit (0) #f ()) (get-environment-variable variable get-environment-variable (0) #f ()) (get-environment-variables variable get-environment-variables (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1911))) (values))
(begin (define &read~1623545778~1912 ex:unspecified) (ex:register-library! (ex:make-library (quote (scheme read)) (lambda () (quote ())) (quote ((read variable &read~1623545778~1912 (0) #f (scheme read)))) (quote (((thcheme with-default-port) 0) ((thcheme ports) 0) ((core primitives) 0))) (quote (&build~1623545778~1900 &build~1623545778~1870 &build~1623545778~2)) (lambda () (values)) (lambda () (set! &read~1623545778~1912 ex:undefined) (set! &read~1623545778~1912 (&with-default-port0~1623545778~1871 &current-input-port~1623545778~1793 read)) (values)) (quote &build~1623545778~1913))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme repl)) (lambda () (quote ())) (quote ((interaction-environment variable ex:interaction-environment (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1914))) (values))
(begin (ex:register-library! (ex:make-library (quote (scheme time)) (lambda () (quote ())) (quote ((current-jiffy variable current-jiffy (0) #f ()) (current-second variable current-second (0) #f ()) (jiffies-per-second variable jiffies-per-second (0) #f ()))) (quote ()) (quote ()) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1915))) (values))
(begin (define &display~1623545778~1919 ex:unspecified) (define &write-shared~1623545778~1918 ex:unspecified) (define &write-simple~1623545778~1917 ex:unspecified) (define &write~1623545778~1916 ex:unspecified) (ex:register-library! (ex:make-library (quote (scheme write)) (lambda () (quote ())) (quote ((display variable &display~1623545778~1919 (0) #f (scheme write)) (write variable &write~1623545778~1916 (0) #f (scheme write)) (write-shared variable &write-shared~1623545778~1918 (0) #f (scheme write)) (write-simple variable &write-simple~1623545778~1917 (0) #f (scheme write)))) (quote (((thcheme with-default-port) 0) ((thcheme ports) 0) ((core primitives) 0))) (quote (&build~1623545778~1900 &build~1623545778~1870 &build~1623545778~2)) (lambda () (values)) (lambda () (set! &display~1623545778~1919 ex:undefined) (set! &write-shared~1623545778~1918 ex:undefined) (set! &write-simple~1623545778~1917 ex:undefined) (set! &write~1623545778~1916 ex:undefined) (set! &write~1623545778~1916 (&with-default-port1~1623545778~1872 &current-output-port~1623545778~1794 write)) (set! &write-simple~1623545778~1917 (&with-default-port1~1623545778~1872 &current-output-port~1623545778~1794 write-simple)) (set! &write-shared~1623545778~1918 (&with-default-port1~1623545778~1872 &current-output-port~1623545778~1794 write-shared)) (set! &display~1623545778~1919 (&with-default-port1~1623545778~1872 &current-output-port~1623545778~1794 display)) (values)) (quote &build~1623545778~1920))) (values))
(begin (ex:register-library! (ex:make-library (quote (rnrs syntax-case)) (lambda () (quote ())) (quote ((make-variable-transformer variable ex:make-variable-transformer (0) #f ()) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (free-identifier=? variable ex:free-identifier=? (0) #f ()) (generate-temporaries variable ex:generate-temporaries (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()) (syntax->datum variable ex:syntax->datum (0) #f ()) (syntax-violation variable ex:syntax-violation (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (quasisyntax macro &quasisyntax~1623545778~536 (0) #f (core quasisyntax)) (unsyntax macro &unsyntax~1623545778~754 (0) #f (core quasisyntax)) (unsyntax-splicing macro &unsyntax-splicing~1623545778~758 (0) #f (core quasisyntax)) (with-syntax macro &with-syntax~1623545778~3 (0) #f (core with-syntax)) (_ macro _ (0) #f ()) (... macro ... (0) #f ()))) (quote (((core quasisyntax) 0) ((core with-syntax) 0) ((core primitives) 0))) (quote (&build~1623545778~762 &build~1623545778~57 &build~1623545778~2)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1921))) (values))
(begin (ex:register-library! (ex:make-library (quote (explicit-renaming helper)) (lambda () (ex:uncompress (quote (((&env~1623545778~1931 0 1 2 3)) (3 (((er-transformer) macro &er-transformer~1623545778~1922 (0) #f (explicit-renaming helper)) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()))) (2 (((exp) variable &exp~1623545778~1924 (1) #f (explicit-renaming helper)))) (1 ()) (0 (((k) . #f) ((proc) . #f))))))) (quote ((er-transformer macro &er-transformer~1623545778~1922 (0) #f (explicit-renaming helper)))) (quote (((core primitives) 1 0))) (quote (&build~1623545778~2)) (lambda () (ex:register-macro! (quote &er-transformer~1623545778~1922) (lambda (&exp~1623545778~1924) (let ((&input~1623545778~1926 &exp~1623545778~1924)) (let ((&fail~1623545778~1927 (lambda () (ex:invalid-form &input~1623545778~1926)))) (if (pair? &input~1623545778~1926) (let ((&temp~1623545778~1935 (car &input~1623545778~1926))) (let ((&k~1623545778~1928 &temp~1623545778~1935)) (let ((&temp~1623545778~1932 (cdr &input~1623545778~1926))) (if (pair? &temp~1623545778~1932) (let ((&temp~1623545778~1934 (car &temp~1623545778~1932))) (let ((&proc~1623545778~1929 &temp~1623545778~1934)) (let ((&temp~1623545778~1933 (cdr &temp~1623545778~1932))) (if (null? &temp~1623545778~1933) (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote form) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (quote ())) (cons (cons &proc~1623545778~1929 (cons (ex:syntax-rename (quote form) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote lambda) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote symbol) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (quote ())) (cons (cons (ex:syntax-rename (quote datum->syntax) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (cons (cons (ex:syntax-rename (quote syntax) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (cons &k~1623545778~1928 (quote ()))) (cons (ex:syntax-rename (quote symbol) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (quote ())))) (quote ())))) (cons (ex:syntax-rename (quote free-identifier=?) (quote ()) (quote (&env~1623545778~1931)) 0 (quote (explicit-renaming helper))) (quote ()))))) (quote ())))) (&fail~1623545778~1927))))) (&fail~1623545778~1927))))) (&fail~1623545778~1927)))))) (values)) (lambda () (values)) (quote &build~1623545778~1936))) (values))
(begin (ex:register-library! (ex:make-library (quote (explicit-renaming)) (lambda () (quote ())) (quote ((er-transformer macro &er-transformer~1623545778~1922 (0) #f (explicit-renaming helper)) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()))) (quote (((rnrs syntax-case) 0) ((explicit-renaming helper) 0))) (quote (&build~1623545778~1921 &build~1623545778~1936)) (lambda () (values)) (lambda () (values)) (quote &build~1623545778~1937))) (values))
