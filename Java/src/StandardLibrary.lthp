; function definition
(def function (lambda '(args body) '(def (head args) (lambda (tail args) body))))

; not-eq?
(function '(not-eq? a b) '(not (eq? a b)))

; takes a function that evaluates a series of values
; and returns the function evaluated on a list
; ex. (unpack + '(1 2 3)) is the same as (+ 1 2 3)
(function '(unpack f xs) '(eval (join (list f) xs)))
; inverse of the above
(function '(pack f & xs) '(f xs))

; composes functions
(function '(comp f g x) '(f (g x)))
; flips the first two parameters of a function
(function '(flip f a b) '(f b a))

; gets the first element of a non-empty list
(function '(head-elem l) '(eval (head l)))
; gets the nth element of a non-empty list
(function '(nth n l)
  '(if (> n 0)
    (nth (- n 1) (tail l))
    (head-elem l)))
; gets the last element of a non-empty list
(function '(last l)
  '(if (tail l)
    (last (tail l))
    (eval l)))
; takes the first n elements of a list
(function '(take n l)
  '(if (> n 0)
    (join (head l) (take (- n 1) (tail l)))
    '()))
; drops the first n elements of a list
(function '(drop n l)
  '(if (> n 0)
    (drop (- n 1) (tail l))
    l))
; returns a list containing two lists, split at index n
(function '(split n l)
  '(list (take n l) (drop n l)))
; contains
(function '(contains x l)
  '(if l
    (if (eq? x (head-elem l))
      #t
      (contains x (tail l)))
    #f))
; reverse
(function '(reverse list) 
  '(if list 
    (join (reverse (tail list)) (head list))
    '()))

; The REPL-invalidator: do. Takes S-Expressions as arguments, evaluates them in order and returns the result of the last one
(function '(do & l) '(last l))

; map
(function '(map f l)
  '(if l
    (join
      (list (f (head-elem l)))
      (map f (tail l)))
    '()))
; filters a list according to a given predicate
(function '(filter p l)
  '(if l
    (join
      (if (p (head-elem l))
        (head l)
        '())
      (filter p (tail l)))
    '()))
; folds a list from left to right over the given function and identity
(function '(foldl f id l)
  '(if l
    (foldl f (f id (head-elem l)) (tail l))
    id))
; folds a list from right to left
(function '(foldr f id l)
  '(foldl f id (reverse l)))
; sum
(function '(sum l) '(foldl + 0 l))
; product
(function '(product l) '(foldl * 1 l))



; unstable sort, with the identity key function. Uses the supplied ord function, which should be a strict inequality binary operation. "<" sorts numbers ascending.
(function '(sort l ord)
  '(if l
    (let-values '(p l) '((head-elem l) (tail l))
      (join
        (sort (filter (lambda '(x) '(ord x p)) l) ord)
        (list p)
        (sort (filter (lambda '(x) '(not (ord x p))) l) ord)))
    '()))
; unstable sort that takes a key function.
(function '(sort-keyed l ord key)
  '(if l
    (let-values '(p l) '((head-elem l) (tail l))
      (join
        (sort-keyed (filter (lambda '(x) '(ord (key x) (key p))) l) ord key)
        (list p)
        (sort-keyed (filter (lambda '(x) '(not (ord (key x) (key p)))) l) ord key)))
    '()))
; stable sort, with the identity key function. Uses supplied ord function, which MUST be a strict inequality to maintain stability.
(function '(stable-sort l ord)
  '(let merge (lambda '(first second)
    '(if (not first)
	  second
	  (if (not second)
	    first
		(if (not (ord (head-elem second) (head-elem first)))
		  (join (head first) (merge (tail first) second))
		  (join (head second) (merge first (tail second)))))))
	(let sort (lambda '(list)
	  '(if list
	    (if (tail list)
	      (let split (/ (len list) 2)
		    (merge (sort (take split list)) (sort (drop split list))))
		  list)
		list))
	  (sort l))))
; stable keyed sort. Uses the supplied ord and key functions. Ord should be strict to maintain stability.
(function '(stable-sort-keyed l ord key)
  '(let merge (lambda '(first second)
    '(if (not first)
	  second
	  (if (not second)
	    first
		(if (not (ord (key (head-elem second)) (key (head-elem first))))
		  (join (head first) (merge (tail first) second))
		  (join (head second) (merge first (tail second)))))))
	(let sort (lambda '(list)
	  '(if (> (len list) 1)
	    (let split (/ (len list) 2)
		  (merge (sort (take split list)) (sort (drop split list))))
		list))
	  (sort l))))